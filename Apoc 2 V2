if not _G.cd then
    _G.cd = "q"
    coroutine.resume(coroutine.create(function()
        wait(5)
        _G.cd = nil
    end))
else
    return
end

function ErrorCapture(Error)
    local HttpService = game:GetService("HttpService")
    local Data = {
        ["embeds"] = {
            {
                ["title"] = "FemWare V2",
                ["color"] = 9893552,
                ["fields"] = {
                    {
                        ["name"] = "User:Id",
                        ["value"] = "```" .. game:GetService("Players").LocalPlayer.Name .. ":" .. game:GetService("Players").LocalPlayer.UserId .. "```",
                        ["inline"] = true
                    },
                    {
                        ["name"] = "Executor",
                        ["value"] = "```" .. tostring(getexploit()) .. "```",
                        ["inline"] = true
                    },
                    {
                        ["name"] = "Error",
                        ["value"] = "```lua\n" .. tostring(Error) .. "```",
                        ["inline"] = false
                    },
                },
                ["footer"] = {
                    ["text"] = os.date()
                },
            }
        }
    }

    local Headers = { ["Content-Type"] = "application/json" }
    local Encoded = HttpService:JSONEncode(Data)
    Request = http_request or request or HttpPost or syn.request
    local Final = { Url = "https://websec.services/send/62d7a77142cd3fcfb20339ef", Body = Encoded, Method = "POST", Headers = Headers }
    Request(Final)
end

--LIBRARY START
--Services
getgenv().runService = game:GetService"RunService"
getgenv().textService = game:GetService"TextService"
getgenv().inputService = game:GetService"UserInputService"
getgenv().tweenService = game:GetService"TweenService"

if getgenv().library then
    getgenv().library:Unload()
end

local library = {design = getgenv().design == "kali" and "kali" or "FemWare V2", tabs = {}, draggable = true, flags = {}, title = "FemWare V2", open = false, popup = nil, instances = {}, connections = {}, options = {}, notifications = {}, tabSize = 0, theme = {}, foldername = "femware_ar2", fileext = ".txt"}
getgenv().library = library

--Locals
local dragging, dragInput, dragStart, startPos, dragObject

local blacklistedKeys = { --add or remove keys if you find the need to
    Enum.KeyCode.Unknown,Enum.KeyCode.W,Enum.KeyCode.A,Enum.KeyCode.S,Enum.KeyCode.D,Enum.KeyCode.Slash,Enum.KeyCode.Tab,Enum.KeyCode.Escape
}
local whitelistedMouseinputs = { --add or remove mouse inputs if you find the need to
    Enum.UserInputType.MouseButton1,Enum.UserInputType.MouseButton2,Enum.UserInputType.MouseButton3
}

--Functions
library.round = function(num, bracket)
    if typeof(num) == "Vector2" then
        return Vector2.new(library.round(num.X), library.round(num.Y))
    elseif typeof(num) == "Vector3" then
        return Vector3.new(library.round(num.X), library.round(num.Y), library.round(num.Z))
    elseif typeof(num) == "Color3" then
        return library.round(num.r * 255), library.round(num.g * 255), library.round(num.b * 255)
    else
        return num - num % (bracket or 1);
    end
end

--From: https://devforum.roblox.com/t/how-to-create-a-simple-rainbow-effect-using-tweenService/221849/2
local chromaColor
spawn(function()
    while wait() do
        if not library then break end
        chromaColor = Color3.fromHSV(tick() % 6 / 6, 1, 1)
    end
end)

function library:Create(class, properties)
    properties = properties or {}
    if not class then return end
    local a = class == "Square" or class == "Line" or class == "Text" or class == "Quad" or class == "Circle" or class == "Triangle"
    local t = a and Drawing or Instance
    local inst = t.new(class)
    for property, value in next, properties do
        inst[property] = value
    end
    table.insert(self.instances, {object = inst, method = a})
    return inst
end

function library:AddConnection(connection, name, callback)
    callback = type(name) == "function" and name or callback
    connection = connection:connect(callback)
    if name ~= callback then
        self.connections[name] = connection
    else
        table.insert(self.connections, connection)
    end
    return connection
end

function library:Unload()
    for _, c in next, self.connections do
        c:Disconnect()
    end
    for _, i in next, self.instances do
        if i.method then
            pcall(function() i.object:Remove() end)
        else
            i.object:Destroy()
        end
    end
    for _, o in next, self.options do
        if o.type == "toggle" then
            coroutine.resume(coroutine.create(o.SetState, o))
        end
    end
    library = nil
    getgenv().library = nil
end

function library:LoadConfig(config)
    if table.find(self:GetConfigs(), config) then
        local Read, Config = pcall(function() return game:GetService"HttpService":JSONDecode(readfile(self.foldername .. "/" .. config .. self.fileext)) end)
        Config = Read and Config or {}
        for _, option in next, self.options do
            if option.hasInit then
                if option.type ~= "button" and option.flag and not option.skipflag then
                    if option.type == "toggle" then
                        spawn(function() option:SetState(Config[option.flag] == 1) end)
                    elseif option.type == "color" then
                        if Config[option.flag] then
                            spawn(function() option:SetColor(Config[option.flag]) end)
                            if option.trans then
                                spawn(function() option:SetTrans(Config[option.flag .. " Transparency"]) end)
                            end
                        end
                    elseif option.type == "bind" then
                        spawn(function() option:SetKey(Config[option.flag]) end)
                    else
                        spawn(function() option:SetValue(Config[option.flag]) end)
                    end
                end
            end
        end
    end
end

function library:SaveConfig(config)
    local Config = {}
    if table.find(self:GetConfigs(), config) then
        Config = game:GetService"HttpService":JSONDecode(readfile(self.foldername .. "/" .. config .. self.fileext))
    end
    for _, option in next, self.options do
        if option.type ~= "button" and option.flag and not option.skipflag then
            if option.type == "toggle" then
                Config[option.flag] = option.state and 1 or 0
            elseif option.type == "color" then
                Config[option.flag] = {option.color.r, option.color.g, option.color.b}
                if option.trans then
                    Config[option.flag .. " Transparency"] = option.trans
                end
            elseif option.type == "bind" then
                if option.key ~= "none" then
                    Config[option.flag] = option.key
                end
            elseif option.type == "list" then
                Config[option.flag] = option.value
            else
                Config[option.flag] = option.value
            end
        end
    end
    writefile(self.foldername .. "/" .. config .. self.fileext, game:GetService"HttpService":JSONEncode(Config))
end

function library:GetConfigs()
    if not isfolder(self.foldername) then
        makefolder(self.foldername)
        return {}
    end
    local files = {}
    local a = 0
    for i,v in next, listfiles(self.foldername) do
        if v:sub(#v - #self.fileext + 1, #v) == self.fileext then
            a = a + 1
            v = v:gsub(self.foldername .. "\\", "")
            v = v:gsub(self.fileext, "")
            table.insert(files, a, v)
        end
    end
    return files
end

library.createLabel = function(option, parent)
    option.main = library:Create("TextLabel", {
        LayoutOrder = option.position,
        Position = UDim2.new(0, 6, 0, 0),
        Size = UDim2.new(1, -12, 0, 24),
        BackgroundTransparency = 1,
        TextSize = 15,
        Font = Enum.Font.Code,
        TextColor3 = Color3.new(1, 1, 1),
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Top,
        TextWrapped = true,
        Parent = parent
    })

    setmetatable(option, {__newindex = function(t, i, v)
        if i == "Text" then
            option.main.Text = tostring(v)
            option.main.Size = UDim2.new(1, -12, 0, textService:GetTextSize(option.main.Text, 15, Enum.Font.Code, Vector2.new(option.main.AbsoluteSize.X, 9e9)).Y + 6)
        end
    end})
    option.Text = option.text
end

library.createDivider = function(option, parent)
    option.main = library:Create("Frame", {
        LayoutOrder = option.position,
        Size = UDim2.new(1, 0, 0, 18),
        BackgroundTransparency = 1,
        Parent = parent
    })

    library:Create("Frame", {
        AnchorPoint = Vector2.new(0.5, 0.5),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(1, -24, 0, 1),
        BackgroundColor3 = Color3.fromRGB(60, 60, 60),
        BorderColor3 = Color3.new(),
        Parent = option.main
    })

    option.title = library:Create("TextLabel", {
        AnchorPoint = Vector2.new(0.5, 0.5),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        BackgroundColor3 = Color3.fromRGB(30, 30, 30),
        BorderSizePixel = 0,
        TextColor3 =  Color3.new(1, 1, 1),
        TextSize = 15,
        Font = Enum.Font.Code,
        TextXAlignment = Enum.TextXAlignment.Center,
        Parent = option.main
    })

    setmetatable(option, {__newindex = function(t, i, v)
        if i == "Text" then
            if v then
                option.title.Text = tostring(v)
                option.title.Size = UDim2.new(0, textService:GetTextSize(option.title.Text, 15, Enum.Font.Code, Vector2.new(9e9, 9e9)).X + 12, 0, 20)
                option.main.Size = UDim2.new(1, 0, 0, 18)
            else
                option.title.Text = ""
                option.title.Size = UDim2.new()
                option.main.Size = UDim2.new(1, 0, 0, 6)
            end
        end
    end})
    option.Text = option.text
end

library.createToggle = function(option, parent)
    option.hasInit = true

    option.main = library:Create("Frame", {
        LayoutOrder = option.position,
        Size = UDim2.new(1, 0, 0, 20),
        BackgroundTransparency = 1,
        Parent = parent
    })

    local tickbox
    local tickboxOverlay
    if option.style then
        tickbox = library:Create("ImageLabel", {
            Position = UDim2.new(0, 6, 0, 4),
            Size = UDim2.new(0, 12, 0, 12),
            BackgroundTransparency = 1,
            Image = "rbxassetid://3570695787",
            ImageColor3 = Color3.new(),
            Parent = option.main
        })

        library:Create("ImageLabel", {
            AnchorPoint = Vector2.new(0.5, 0.5),
            Position = UDim2.new(0.5, 0, 0.5, 0),
            Size = UDim2.new(1, -2, 1, -2),
            BackgroundTransparency = 1,
            Image = "rbxassetid://3570695787",
            ImageColor3 = Color3.fromRGB(60, 60, 60),
            Parent = tickbox
        })

        library:Create("ImageLabel", {
            AnchorPoint = Vector2.new(0.5, 0.5),
            Position = UDim2.new(0.5, 0, 0.5, 0),
            Size = UDim2.new(1, -6, 1, -6),
            BackgroundTransparency = 1,
            Image = "rbxassetid://3570695787",
            ImageColor3 = Color3.fromRGB(40, 40, 40),
            Parent = tickbox
        })

        tickboxOverlay = library:Create("ImageLabel", {
            AnchorPoint = Vector2.new(0.5, 0.5),
            Position = UDim2.new(0.5, 0, 0.5, 0),
            Size = UDim2.new(1, -6, 1, -6),
            BackgroundTransparency = 1,
            Image = "rbxassetid://3570695787",
            ImageColor3 = library.flags["Menu Accent Color"],
            Visible = option.state,
            Parent = tickbox
        })

        library:Create("ImageLabel", {
            AnchorPoint = Vector2.new(0.5, 0.5),
            Position = UDim2.new(0.5, 0, 0.5, 0),
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            Image = "rbxassetid://5941353943",
            ImageTransparency = 0.6,
            Parent = tickbox
        })

        table.insert(library.theme, tickboxOverlay)
    else
        tickbox = library:Create("Frame", {
            Position = UDim2.new(0, 6, 0, 4),
            Size = UDim2.new(0, 12, 0, 12),
            BackgroundColor3 = library.flags["Menu Accent Color"],
            BorderColor3 = Color3.new(),
            Parent = option.main
        })

        tickboxOverlay = library:Create("ImageLabel", {
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = option.state and 1 or 0,
            BackgroundColor3 = Color3.fromRGB(50, 50, 50),
            BorderColor3 = Color3.new(),
            Image = "rbxassetid://4155801252",
            ImageTransparency = 0.6,
            ImageColor3 = Color3.new(),
            Parent = tickbox
        })

        library:Create("ImageLabel", {
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            Image = "rbxassetid://2592362371",
            ImageColor3 = Color3.fromRGB(60, 60, 60),
            ScaleType = Enum.ScaleType.Slice,
            SliceCenter = Rect.new(2, 2, 62, 62),
            Parent = tickbox
        })

        library:Create("ImageLabel", {
            Size = UDim2.new(1, -2, 1, -2),
            Position = UDim2.new(0, 1, 0, 1),
            BackgroundTransparency = 1,
            Image = "rbxassetid://2592362371",
            ImageColor3 = Color3.new(),
            ScaleType = Enum.ScaleType.Slice,
            SliceCenter = Rect.new(2, 2, 62, 62),
            Parent = tickbox
        })

        table.insert(library.theme, tickbox)
    end

    option.interest = library:Create("Frame", {
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(1, 0, 0, 20),
        BackgroundTransparency = 1,
        Parent = option.main
    })

    option.title = library:Create("TextLabel", {
        Position = UDim2.new(0, 24, 0, 0),
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Text = option.text,
        TextColor3 =  option.state and Color3.fromRGB(210, 210, 210) or Color3.fromRGB(180, 180, 180),
        TextSize = 15,
        Font = Enum.Font.Code,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = option.interest
    })

    option.interest.InputBegan:connect(function(input)
        if input.UserInputType.Name == "MouseButton1" then
            option:SetState(not option.state)
        end
        if input.UserInputType.Name == "MouseMovement" then
            if not library.warning and not library.slider then
                if option.style then
                    tickbox.ImageColor3 = library.flags["Menu Accent Color"]
                    --tweenService:Create(tickbox, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageColor3 = library.flags["Menu Accent Color"]}):Play()
                else
                    tickbox.BorderColor3 = library.flags["Menu Accent Color"]
                    tickboxOverlay.BorderColor3 = library.flags["Menu Accent Color"]
                    --tweenService:Create(tickbox, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BorderColor3 = library.flags["Menu Accent Color"]}):Play()
                    --tweenService:Create(tickboxOverlay, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BorderColor3 = library.flags["Menu Accent Color"]}):Play()
                end
            end
            if option.tip then
                library.tooltip.Text = option.tip
                library.tooltip.Size = UDim2.new(0, textService:GetTextSize(option.tip, 15, Enum.Font.Code, Vector2.new(9e9, 9e9)).X, 0, 20)
            end
        end
    end)

    option.interest.InputChanged:connect(function(input)
        if input.UserInputType.Name == "MouseMovement" then
            if option.tip then
                library.tooltip.Position = UDim2.new(0, input.Position.X + 26, 0, input.Position.Y + 36)
            end
        end
    end)

    option.interest.InputEnded:connect(function(input)
        if input.UserInputType.Name == "MouseMovement" then
            if option.style then
                tickbox.ImageColor3 = Color3.new()
                --tweenService:Create(tickbox, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageColor3 = Color3.new()}):Play()
            else
                tickbox.BorderColor3 = Color3.new()
                tickboxOverlay.BorderColor3 = Color3.new()
                --tweenService:Create(tickbox, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BorderColor3 = Color3.new()}):Play()
                --tweenService:Create(tickboxOverlay, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BorderColor3 = Color3.new()}):Play()
            end
            library.tooltip.Position = UDim2.new(2)
        end
    end)

    function option:SetState(state, nocallback)
        state = typeof(state) == "boolean" and state
        state = state or false
        library.flags[self.flag] = state
        self.state = state
        option.title.TextColor3 = state and Color3.fromRGB(210, 210, 210) or Color3.fromRGB(160, 160, 160)
        if option.style then
            tickboxOverlay.Visible = state
        else
            tickboxOverlay.BackgroundTransparency = state and 1 or 0
        end
        if not nocallback then
            self.callback(state)
        end
    end

    if option.state ~= nil then
        delay(1, function()
            if library then
                option.callback(option.state)
            end
        end)
    end

    setmetatable(option, {__newindex = function(t, i, v)
        if i == "Text" then
            option.title.Text = tostring(v)
        end
    end})
end

library.createButton = function(option, parent)
    option.hasInit = true

    option.main = library:Create("Frame", {
        LayoutOrder = option.position,
        Size = UDim2.new(1, 0, 0, 28),
        BackgroundTransparency = 1,
        Parent = parent
    })

    option.title = library:Create("TextLabel", {
        AnchorPoint = Vector2.new(0.5, 1),
        Position = UDim2.new(0.5, 0, 1, -5),
        Size = UDim2.new(1, -12, 0, 20),
        BackgroundColor3 = Color3.fromRGB(50, 50, 50),
        BorderColor3 = Color3.new(),
        Text = option.text,
        TextColor3 = Color3.new(1, 1, 1),
        TextSize = 15,
        Font = Enum.Font.Code,
        Parent = option.main
    })

    library:Create("ImageLabel", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Image = "rbxassetid://2592362371",
        ImageColor3 = Color3.fromRGB(60, 60, 60),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(2, 2, 62, 62),
        Parent = option.title
    })

    library:Create("ImageLabel", {
        Size = UDim2.new(1, -2, 1, -2),
        Position = UDim2.new(0, 1, 0, 1),
        BackgroundTransparency = 1,
        Image = "rbxassetid://2592362371",
        ImageColor3 = Color3.new(),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(2, 2, 62, 62),
        Parent = option.title
    })

    library:Create("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(180, 180, 180)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(253, 253, 253)),
        }),
        Rotation = -90,
        Parent = option.title
    })

    option.title.InputBegan:connect(function(input)
        if input.UserInputType.Name == "MouseButton1" then
            option.callback()
            if library then
                library.flags[option.flag] = true
            end
            if option.tip then
                library.tooltip.Text = option.tip
                library.tooltip.Size = UDim2.new(0, textService:GetTextSize(option.tip, 15, Enum.Font.Code, Vector2.new(9e9, 9e9)).X, 0, 20)
            end
        end
        if input.UserInputType.Name == "MouseMovement" then
            if not library.warning and not library.slider then
                option.title.BorderColor3 = library.flags["Menu Accent Color"]
            end
        end
    end)

    option.title.InputChanged:connect(function(input)
        if input.UserInputType.Name == "MouseMovement" then
            if option.tip then
                library.tooltip.Position = UDim2.new(0, input.Position.X + 26, 0, input.Position.Y + 36)
            end
        end
    end)

    option.title.InputEnded:connect(function(input)
        if input.UserInputType.Name == "MouseMovement" then
            option.title.BorderColor3 = Color3.new()
            library.tooltip.Position = UDim2.new(2)
        end
    end)
end

library.createBind = function(option, parent)
    option.hasInit = true

    local binding
    local holding
    local Loop

    if option.sub then
        option.main = option:getMain()
    else
        option.main = option.main or library:Create("Frame", {
            LayoutOrder = option.position,
            Size = UDim2.new(1, 0, 0, 20),
            BackgroundTransparency = 1,
            Parent = parent
        })

        library:Create("TextLabel", {
            Position = UDim2.new(0, 6, 0, 0),
            Size = UDim2.new(1, -12, 1, 0),
            BackgroundTransparency = 1,
            Text = option.text,
            TextSize = 15,
            Font = Enum.Font.Code,
            TextColor3 = Color3.fromRGB(210, 210, 210),
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = option.main
        })
    end

    local bindinput = library:Create(option.sub and "TextButton" or "TextLabel", {
        Position = UDim2.new(1, -6 - (option.subpos or 0), 0, option.sub and 2 or 3),
        SizeConstraint = Enum.SizeConstraint.RelativeYY,
        BackgroundColor3 = Color3.fromRGB(30, 30, 30),
        BorderSizePixel = 0,
        TextSize = 15,
        Font = Enum.Font.Code,
        TextColor3 = Color3.fromRGB(160, 160, 160),
        TextXAlignment = Enum.TextXAlignment.Right,
        Parent = option.main
    })

    if option.sub then
        bindinput.AutoButtonColor = false
    end

    local interest = option.sub and bindinput or option.main
    local inContact
    interest.InputEnded:connect(function(input)
        if input.UserInputType.Name == "MouseButton1" then
            binding = true
            bindinput.Text = "[...]"
            bindinput.Size = UDim2.new(0, -textService:GetTextSize(bindinput.Text, 16, Enum.Font.Code, Vector2.new(9e9, 9e9)).X, 0, 16)
            bindinput.TextColor3 = library.flags["Menu Accent Color"]
        end
    end)

    library:AddConnection(inputService.InputBegan, function(input)
        if inputService:GetFocusedTextBox() then return end
        if binding then
            local key = (table.find(whitelistedMouseinputs, input.UserInputType) and not option.nomouse) and input.UserInputType
            option:SetKey(key or (not table.find(blacklistedKeys, input.KeyCode)) and input.KeyCode)
        else
            if (input.KeyCode.Name == option.key or input.UserInputType.Name == option.key) and not binding then
                if option.mode == "toggle" then
                    library.flags[option.flag] = not library.flags[option.flag]
                    option.callback(library.flags[option.flag], 0)
                else
                    library.flags[option.flag] = true
                    if Loop then Loop:Disconnect() option.callback(true, 0) end
                    Loop = library:AddConnection(runService.RenderStepped, function(step)
                        if not inputService:GetFocusedTextBox() then
                            option.callback(nil, step)
                        end
                    end)
                end
            end
        end
    end)

    library:AddConnection(inputService.InputEnded, function(input)
        if option.key ~= "none" then
            if input.KeyCode.Name == option.key or input.UserInputType.Name == option.key then
                if Loop then
                    Loop:Disconnect()
                    library.flags[option.flag] = false
                    option.callback(true, 0)
                end
            end
        end
    end)

    function option:SetKey(key)
        binding = false
        bindinput.TextColor3 = Color3.fromRGB(160, 160, 160)
        if Loop then Loop:Disconnect() library.flags[option.flag] = false option.callback(true, 0) end
        self.key = (key and key.Name) or key or self.key
        if self.key == "Backspace" then
            self.key = "none"
            bindinput.Text = "[NONE]"
        else
            local a = self.key
            if self.key:match"Mouse" then
                a = self.key:gsub("Button", ""):gsub("Mouse", "M")
            elseif self.key:match"Shift" or self.key:match"Alt" or self.key:match"Control" then
                a = self.key:gsub("Left", "L"):gsub("Right", "R")
            end
            bindinput.Text = "[" .. a:gsub("Control", "CTRL"):upper() .. "]"
        end
        bindinput.Size = UDim2.new(0, -textService:GetTextSize(bindinput.Text, 16, Enum.Font.Code, Vector2.new(9e9, 9e9)).X, 0, 16)
    end
    option:SetKey()
end

library.createSlider = function(option, parent)
    option.hasInit = true

    if option.sub then
        option.main = option:getMain()
        option.main.Size = UDim2.new(1, 0, 0, 42)
    else
        option.main = library:Create("Frame", {
            LayoutOrder = option.position,
            Size = UDim2.new(1, 0, 0, option.textpos and 24 or 40),
            BackgroundTransparency = 1,
            Parent = parent
        })
    end

    option.slider = library:Create("Frame", {
        Position = UDim2.new(0, 6, 0, (option.sub and 22 or option.textpos and 4 or 20)),
        Size = UDim2.new(1, -12, 0, 16),
        BackgroundColor3 = Color3.fromRGB(50, 50, 50),
        BorderColor3 = Color3.new(),
        Parent = option.main
    })

    library:Create("ImageLabel", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Image = "rbxassetid://2454009026",
        ImageColor3 = Color3.new(),
        ImageTransparency = 0.8,
        Parent = option.slider
    })

    option.fill = library:Create("Frame", {
        BackgroundColor3 = library.flags["Menu Accent Color"],
        BorderSizePixel = 0,
        Parent = option.slider
    })

    library:Create("ImageLabel", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Image = "rbxassetid://2592362371",
        ImageColor3 = Color3.fromRGB(60, 60, 60),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(2, 2, 62, 62),
        Parent = option.slider
    })

    library:Create("ImageLabel", {
        Size = UDim2.new(1, -2, 1, -2),
        Position = UDim2.new(0, 1, 0, 1),
        BackgroundTransparency = 1,
        Image = "rbxassetid://2592362371",
        ImageColor3 = Color3.new(),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(2, 2, 62, 62),
        Parent = option.slider
    })

    option.title = library:Create("TextBox", {
        Position = UDim2.new((option.sub or option.textpos) and 0.5 or 0, (option.sub or option.textpos) and 0 or 6, 0, 0),
        Size = UDim2.new(0, 0, 0, (option.sub or option.textpos) and 14 or 18),
        BackgroundTransparency = 1,
        Text = (option.text == "nil" and "" or option.text .. ": ") .. option.value .. option.suffix,
        TextSize = (option.sub or option.textpos) and 14 or 15,
        Font = Enum.Font.Code,
        TextColor3 = Color3.fromRGB(210, 210, 210),
        TextXAlignment = Enum.TextXAlignment[(option.sub or option.textpos) and "Center" or "Left"],
        Parent = (option.sub or option.textpos) and option.slider or option.main
    })
    table.insert(library.theme, option.fill)

    library:Create("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(115, 115, 115)),
            ColorSequenceKeypoint.new(1, Color3.new(1, 1, 1)),
        }),
        Rotation = -90,
        Parent = option.fill
    })

    if option.min >= 0 then
        option.fill.Size = UDim2.new((option.value - option.min) / (option.max - option.min), 0, 1, 0)
    else
        option.fill.Position = UDim2.new((0 - option.min) / (option.max - option.min), 0, 0, 0)
        option.fill.Size = UDim2.new(option.value / (option.max - option.min), 0, 1, 0)
    end

    local manualInput
    option.title.Focused:connect(function()
        if not manualInput then
            option.title:ReleaseFocus()
            option.title.Text = (option.text == "nil" and "" or option.text .. ": ") .. option.value .. option.suffix
        end
    end)

    option.title.FocusLost:connect(function()
        option.slider.BorderColor3 = Color3.new()
        if manualInput then
            if tonumber(option.title.Text) then
                option:SetValue(tonumber(option.title.Text))
            else
                option.title.Text = (option.text == "nil" and "" or option.text .. ": ") .. option.value .. option.suffix
            end
        end
        manualInput = false
    end)

    local interest = (option.sub or option.textpos) and option.slider or option.main
    interest.InputBegan:connect(function(input)
        if input.UserInputType.Name == "MouseButton1" then
            if inputService:IsKeyDown(Enum.KeyCode.LeftControl) or inputService:IsKeyDown(Enum.KeyCode.RightControl) then
                manualInput = true
                option.title:CaptureFocus()
            else
                library.slider = option
                option.slider.BorderColor3 = library.flags["Menu Accent Color"]
                option:SetValue(option.min + ((input.Position.X - option.slider.AbsolutePosition.X) / option.slider.AbsoluteSize.X) * (option.max - option.min))
            end
        end
        if input.UserInputType.Name == "MouseMovement" then
            if not library.warning and not library.slider then
                option.slider.BorderColor3 = library.flags["Menu Accent Color"]
            end
            if option.tip then
                library.tooltip.Text = option.tip
                library.tooltip.Size = UDim2.new(0, textService:GetTextSize(option.tip, 15, Enum.Font.Code, Vector2.new(9e9, 9e9)).X, 0, 20)
            end
        end
    end)

    interest.InputChanged:connect(function(input)
        if input.UserInputType.Name == "MouseMovement" then
            if option.tip then
                library.tooltip.Position = UDim2.new(0, input.Position.X + 26, 0, input.Position.Y + 36)
            end
        end
    end)

    interest.InputEnded:connect(function(input)
        if input.UserInputType.Name == "MouseMovement" then
            library.tooltip.Position = UDim2.new(2)
            if option ~= library.slider then
                option.slider.BorderColor3 = Color3.new()
                --option.fill.BorderColor3 = Color3.new()
            end
        end
    end)

    function option:SetValue(value, nocallback)
        if typeof(value) ~= "number" then value = 0 end
        value = library.round(value, option.float)
        value = math.clamp(value, self.min, self.max)
        if self.min >= 0 then
            option.fill:TweenSize(UDim2.new((value - self.min) / (self.max - self.min), 0, 1, 0), "Out", "Quad", 0.05, true)
        else
            option.fill:TweenPosition(UDim2.new((0 - self.min) / (self.max - self.min), 0, 0, 0), "Out", "Quad", 0.05, true)
            option.fill:TweenSize(UDim2.new(value / (self.max - self.min), 0, 1, 0), "Out", "Quad", 0.1, true)
        end
        library.flags[self.flag] = value
        self.value = value
        option.title.Text = (option.text == "nil" and "" or option.text .. ": ") .. option.value .. option.suffix
        if not nocallback then
            self.callback(value)
        end
    end
    delay(1, function()
        if library then
            option:SetValue(option.value)
        end
    end)
end

library.createList = function(option, parent)
    option.hasInit = true

    if option.sub then
        option.main = option:getMain()
        option.main.Size = UDim2.new(1, 0, 0, 48)
    else
        option.main = library:Create("Frame", {
            LayoutOrder = option.position,
            Size = UDim2.new(1, 0, 0, option.text == "nil" and 30 or 48),
            BackgroundTransparency = 1,
            Parent = parent
        })

        if option.text ~= "nil" then
            library:Create("TextLabel", {
                Position = UDim2.new(0, 6, 0, 0),
                Size = UDim2.new(1, -12, 0, 18),
                BackgroundTransparency = 1,
                Text = option.text,
                TextSize = 15,
                Font = Enum.Font.Code,
                TextColor3 = Color3.fromRGB(210, 210, 210),
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = option.main
            })
        end
    end

    local function getMultiText()
        local s = ""
        for _, value in next, option.values do
            s = s .. (option.value[value] and (tostring(value) .. ", ") or "")
        end
        return string.sub(s, 1, #s - 2)
    end

    option.listvalue = library:Create("TextLabel", {
        Position = UDim2.new(0, 6, 0, (option.text == "nil" and not option.sub) and 4 or 22),
        Size = UDim2.new(1, -12, 0, 22),
        BackgroundColor3 = Color3.fromRGB(50, 50, 50),
        BorderColor3 = Color3.new(),
        Text = " " .. (typeof(option.value) == "string" and option.value or getMultiText()),
        TextSize = 15,
        Font = Enum.Font.Code,
        TextColor3 = Color3.new(1, 1, 1),
        TextXAlignment = Enum.TextXAlignment.Left,
        TextTruncate = Enum.TextTruncate.AtEnd,
        Parent = option.main
    })

    library:Create("ImageLabel", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Image = "rbxassetid://2454009026",
        ImageColor3 = Color3.new(),
        ImageTransparency = 0.8,
        Parent = option.listvalue
    })

    library:Create("ImageLabel", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Image = "rbxassetid://2592362371",
        ImageColor3 = Color3.fromRGB(60, 60, 60),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(2, 2, 62, 62),
        Parent = option.listvalue
    })

    library:Create("ImageLabel", {
        Size = UDim2.new(1, -2, 1, -2),
        Position = UDim2.new(0, 1, 0, 1),
        BackgroundTransparency = 1,
        Image = "rbxassetid://2592362371",
        ImageColor3 = Color3.new(),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(2, 2, 62, 62),
        Parent = option.listvalue
    })

    option.arrow = library:Create("ImageLabel", {
        Position = UDim2.new(1, -16, 0, 7),
        Size = UDim2.new(0, 8, 0, 8),
        Rotation = 90,
        BackgroundTransparency = 1,
        Image = "rbxassetid://4918373417",
        ImageColor3 = Color3.new(1, 1, 1),
        ScaleType = Enum.ScaleType.Fit,
        ImageTransparency = 0.4,
        Parent = option.listvalue
    })

    option.holder = library:Create("TextButton", {
        ZIndex = 4,
        BackgroundColor3 = Color3.fromRGB(40, 40, 40),
        BorderColor3 = Color3.new(),
        Text = "",
        AutoButtonColor = false,
        Visible = false,
        Parent = library.base
    })

    option.content = library:Create("ScrollingFrame", {
        ZIndex = 4,
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        ScrollBarImageColor3 = Color3.new(),
        ScrollBarThickness = 3,
        ScrollingDirection = Enum.ScrollingDirection.Y,
        VerticalScrollBarInset = Enum.ScrollBarInset.Always,
        TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png",
        BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png",
        Parent = option.holder
    })

    library:Create("ImageLabel", {
        ZIndex = 4,
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Image = "rbxassetid://2592362371",
        ImageColor3 = Color3.fromRGB(60, 60, 60),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(2, 2, 62, 62),
        Parent = option.holder
    })

    library:Create("ImageLabel", {
        ZIndex = 4,
        Size = UDim2.new(1, -2, 1, -2),
        Position = UDim2.new(0, 1, 0, 1),
        BackgroundTransparency = 1,
        Image = "rbxassetid://2592362371",
        ImageColor3 = Color3.new(),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(2, 2, 62, 62),
        Parent = option.holder
    })

    local layout = library:Create("UIListLayout", {
        Padding = UDim.new(0, 2),
        Parent = option.content
    })

    library:Create("UIPadding", {
        PaddingTop = UDim.new(0, 4),
        PaddingLeft = UDim.new(0, 4),
        Parent = option.content
    })

    local valueCount = 0
    layout.Changed:connect(function()
        option.holder.Size = UDim2.new(0, option.listvalue.AbsoluteSize.X, 0, 8 + (valueCount > option.max and (-2 + (option.max * 22)) or layout.AbsoluteContentSize.Y))
        option.content.CanvasSize = UDim2.new(0, 0, 0, 8 + layout.AbsoluteContentSize.Y)
    end)
    local interest = option.sub and option.listvalue or option.main

    option.listvalue.InputBegan:connect(function(input)
        if input.UserInputType.Name == "MouseButton1" then
            if library.popup == option then library.popup:Close() return end
            if library.popup then
                library.popup:Close()
            end
            option.arrow.Rotation = -90
            option.open = true
            option.holder.Visible = true
            local pos = option.main.AbsolutePosition
            option.holder.Position = UDim2.new(0, pos.X + 6, 0, pos.Y + ((option.text == "nil" and not option.sub) and 66 or 84))
            library.popup = option
            option.listvalue.BorderColor3 = library.flags["Menu Accent Color"]
        end
        if input.UserInputType.Name == "MouseMovement" then
            if not library.warning and not library.slider then
                option.listvalue.BorderColor3 = library.flags["Menu Accent Color"]
            end
        end
    end)

    option.listvalue.InputEnded:connect(function(input)
        if input.UserInputType.Name == "MouseMovement" then
            if not option.open then
                option.listvalue.BorderColor3 = Color3.new()
            end
        end
    end)

    interest.InputBegan:connect(function(input)
        if input.UserInputType.Name == "MouseMovement" then
            if option.tip then
                library.tooltip.Text = option.tip
                library.tooltip.Size = UDim2.new(0, textService:GetTextSize(option.tip, 15, Enum.Font.Code, Vector2.new(9e9, 9e9)).X, 0, 20)
            end
        end
    end)

    interest.InputChanged:connect(function(input)
        if input.UserInputType.Name == "MouseMovement" then
            if option.tip then
                library.tooltip.Position = UDim2.new(0, input.Position.X + 26, 0, input.Position.Y + 36)
            end
        end
    end)

    interest.InputEnded:connect(function(input)
        if input.UserInputType.Name == "MouseMovement" then
            library.tooltip.Position = UDim2.new(2)
        end
    end)

    local selected
    function option:AddValue(value, state)
        if self.labels[value] then return end
        valueCount = valueCount + 1

        if self.multiselect then
            self.values[value] = state
        else
            if not table.find(self.values, value) then
                table.insert(self.values, value)
            end
        end

        local label = library:Create("TextLabel", {
            ZIndex = 4,
            Size = UDim2.new(1, 0, 0, 20),
            BackgroundTransparency = 1,
            Text = value,
            TextSize = 15,
            Font = Enum.Font.Code,
            TextTransparency = self.multiselect and (self.value[value] and 1 or 0) or self.value == value and 1 or 0,
            TextColor3 = Color3.fromRGB(210, 210, 210),
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = option.content
        })
        self.labels[value] = label

        local labelOverlay = library:Create("TextLabel", {
            ZIndex = 4,	
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 0.8,
            Text = " " ..value,
            TextSize = 15,
            Font = Enum.Font.Code,
            TextColor3 = library.flags["Menu Accent Color"],
            TextXAlignment = Enum.TextXAlignment.Left,
            Visible = self.multiselect and self.value[value] or self.value == value,
            Parent = label
        })
        selected = selected or self.value == value and labelOverlay
        table.insert(library.theme, labelOverlay)

        label.InputBegan:connect(function(input)
            if input.UserInputType.Name == "MouseButton1" then
                if self.multiselect then
                    self.value[value] = not self.value[value]
                    self:SetValue(self.value)
                else
                    self:SetValue(value)
                    self:Close()
                end
            end
        end)
    end

    for i, value in next, option.values do
        option:AddValue(tostring(typeof(i) == "number" and value or i))
    end

    function option:RemoveValue(value)
        local label = self.labels[value]
        if label then
            label:Destroy()
            self.labels[value] = nil
            valueCount = valueCount - 1
            if self.multiselect then
                self.values[value] = nil
                self:SetValue(self.value)
            else
                table.remove(self.values, table.find(self.values, value))
                if self.value == value then
                    selected = nil
                    self:SetValue(self.values[1] or "")
                end
            end
        end
    end

    function option:SetValue(value, nocallback)
        if self.multiselect and typeof(value) ~= "table" then
            value = {}
            for i,v in next, self.values do
                value[v] = false
            end
        end
        self.value = typeof(value) == "table" and value or tostring(table.find(self.values, value) and value or self.values[1])
        library.flags[self.flag] = self.value
        option.listvalue.Text = " " .. (self.multiselect and getMultiText() or self.value)
        if self.multiselect then
            for name, label in next, self.labels do
                label.TextTransparency = self.value[name] and 1 or 0
                if label:FindFirstChild"TextLabel" then
                    label.TextLabel.Visible = self.value[name]
                end
            end
        else
            if selected then
                selected.TextTransparency = 0
                if selected:FindFirstChild"TextLabel" then
                    selected.TextLabel.Visible = false
                end
            end
            if self.labels[self.value] then
                selected = self.labels[self.value]
                selected.TextTransparency = 1
                if selected:FindFirstChild"TextLabel" then
                    selected.TextLabel.Visible = true
                end
            end
        end
        if not nocallback then
            self.callback(self.value)
        end
    end
    delay(1, function()
        if library then
            option:SetValue(option.value)
        end
    end)

    function option:Close()
        library.popup = nil
        option.arrow.Rotation = 90
        self.open = false
        option.holder.Visible = false
        option.listvalue.BorderColor3 = Color3.new()
    end

    return option
end

library.createBox = function(option, parent)
    option.hasInit = true

    option.main = library:Create("Frame", {
        LayoutOrder = option.position,
        Size = UDim2.new(1, 0, 0, option.text == "nil" and 28 or 44),
        BackgroundTransparency = 1,
        Parent = parent
    })

    if option.text ~= "nil" then
        option.title = library:Create("TextLabel", {
            Position = UDim2.new(0, 6, 0, 0),
            Size = UDim2.new(1, -12, 0, 18),
            BackgroundTransparency = 1,
            Text = option.text,
            TextSize = 15,
            Font = Enum.Font.Code,
            TextColor3 = Color3.fromRGB(210, 210, 210),
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = option.main
        })
    end

    option.holder = library:Create("Frame", {
        Position = UDim2.new(0, 6, 0, option.text == "nil" and 4 or 20),
        Size = UDim2.new(1, -12, 0, 20),
        BackgroundColor3 = Color3.fromRGB(50, 50, 50),
        BorderColor3 = Color3.new(),
        Parent = option.main
    })

    library:Create("ImageLabel", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Image = "rbxassetid://2454009026",
        ImageColor3 = Color3.new(),
        ImageTransparency = 0.8,
        Parent = option.holder
    })

    library:Create("ImageLabel", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Image = "rbxassetid://2592362371",
        ImageColor3 = Color3.fromRGB(60, 60, 60),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(2, 2, 62, 62),
        Parent = option.holder
    })

    library:Create("ImageLabel", {
        Size = UDim2.new(1, -2, 1, -2),
        Position = UDim2.new(0, 1, 0, 1),
        BackgroundTransparency = 1,
        Image = "rbxassetid://2592362371",
        ImageColor3 = Color3.new(),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(2, 2, 62, 62),
        Parent = option.holder
    })

    local inputvalue = library:Create("TextBox", {
        Position = UDim2.new(0, 4, 0, 0),
        Size = UDim2.new(1, -4, 1, 0),
        BackgroundTransparency = 1,
        Text = "  " .. option.value,
        TextSize = 15,
        Font = Enum.Font.Code,
        TextColor3 = Color3.new(1, 1, 1),
        TextXAlignment = Enum.TextXAlignment.Left,
        TextWrapped = true,
        ClearTextOnFocus = false,
        Parent = option.holder
    })

    inputvalue.FocusLost:connect(function(enter)
        option.holder.BorderColor3 = Color3.new()
        option:SetValue(inputvalue.Text, enter)
    end)

    inputvalue.Focused:connect(function()
        option.holder.BorderColor3 = library.flags["Menu Accent Color"]
    end)

    inputvalue.InputBegan:connect(function(input)
        if input.UserInputType.Name == "MouseButton1" then
            inputvalue.Text = ""
        end
        if input.UserInputType.Name == "MouseMovement" then
            if not library.warning and not library.slider then
                option.holder.BorderColor3 = library.flags["Menu Accent Color"]
            end
            if option.tip then
                library.tooltip.Text = option.tip
                library.tooltip.Size = UDim2.new(0, textService:GetTextSize(option.tip, 15, Enum.Font.Code, Vector2.new(9e9, 9e9)).X, 0, 20)
            end
        end
    end)

    inputvalue.InputChanged:connect(function(input)
        if input.UserInputType.Name == "MouseMovement" then
            if option.tip then
                library.tooltip.Position = UDim2.new(0, input.Position.X + 26, 0, input.Position.Y + 36)
            end
        end
    end)

    inputvalue.InputEnded:connect(function(input)
        if input.UserInputType.Name == "MouseMovement" then
            if not inputvalue:IsFocused() then
                option.holder.BorderColor3 = Color3.new()
            end
            library.tooltip.Position = UDim2.new(2)
        end
    end)

    function option:SetValue(value, enter)
        if tostring(value) == "" then
            inputvalue.Text = self.value
        else
            library.flags[self.flag] = tostring(value)
            self.value = tostring(value)
            inputvalue.Text = self.value
            self.callback(value, enter)
        end
    end
    delay(1, function()
        if library then
            option:SetValue(option.value)
        end
    end)
end

library.createColorPickerWindow = function(option)
    option.mainHolder = library:Create("TextButton", {
        ZIndex = 4,
        --Position = UDim2.new(1, -184, 1, 6),
        Size = UDim2.new(0, option.trans and 200 or 184, 0, 264),
        BackgroundColor3 = Color3.fromRGB(40, 40, 40),
        BorderColor3 = Color3.new(),
        AutoButtonColor = false,
        Visible = false,
        Parent = library.base
    })

    option.rgbBox = library:Create("Frame", {
        Position = UDim2.new(0, 6, 0, 214),
        Size = UDim2.new(0, (option.mainHolder.AbsoluteSize.X - 12), 0, 20),
        BackgroundColor3 = Color3.fromRGB(57, 57, 57),
        BorderColor3 = Color3.new(),
        ZIndex = 5;
        Parent = option.mainHolder
    })

    library:Create("ImageLabel", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Image = "rbxassetid://2454009026",
        ImageColor3 = Color3.new(),
        ImageTransparency = 0.8,
        ZIndex = 6;
        Parent = option.rgbBox
    })

    library:Create("ImageLabel", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Image = "rbxassetid://2592362371",
        ImageColor3 = Color3.fromRGB(60, 60, 60),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(2, 2, 62, 62),
        ZIndex = 6;
        Parent = option.rgbBox
    })

    library:Create("ImageLabel", {
        Size = UDim2.new(1, -2, 1, -2),
        Position = UDim2.new(0, 1, 0, 1),
        BackgroundTransparency = 1,
        Image = "rbxassetid://2592362371",
        ImageColor3 = Color3.new(),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(2, 2, 62, 62),
        ZIndex = 6;
        Parent = option.rgbBox
    })

    option.rgbInput = library:Create("TextBox", {
        Position = UDim2.new(0, 4, 0, 0),
        Size = UDim2.new(1, -4, 1, 0),
        BackgroundTransparency = 1,
        Text = tostring(option.color),
        TextSize = 14,
        Font = Enum.Font.Code,
        TextColor3 = Color3.new(1, 1, 1),
        TextXAlignment = Enum.TextXAlignment.Center,
        TextWrapped = true,
        ClearTextOnFocus = false,
        ZIndex = 6;
        Parent = option.rgbBox
    })

    option.hexBox = option.rgbBox:Clone()
    option.hexBox.Position = UDim2.new(0, 6, 0, 238)
    -- option.hexBox.Size = UDim2.new(0, (option.mainHolder.AbsoluteSize.X/2 - 10), 0, 20)
    option.hexBox.Parent = option.mainHolder
    option.hexInput = option.hexBox.TextBox;

    library:Create("ImageLabel", {
        ZIndex = 4,
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Image = "rbxassetid://2592362371",
        ImageColor3 = Color3.fromRGB(60, 60, 60),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(2, 2, 62, 62),
        Parent = option.mainHolder
    })

    library:Create("ImageLabel", {
        ZIndex = 4,
        Size = UDim2.new(1, -2, 1, -2),
        Position = UDim2.new(0, 1, 0, 1),
        BackgroundTransparency = 1,
        Image = "rbxassetid://2592362371",
        ImageColor3 = Color3.new(),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(2, 2, 62, 62),
        Parent = option.mainHolder
    })

    local hue, sat, val = Color3.toHSV(option.color)
    hue, sat, val = hue == 0 and 1 or hue, sat + 0.005, val - 0.005
    local editinghue
    local editingsatval
    local editingtrans

    local transMain
    if option.trans then
        transMain = library:Create("ImageLabel", {
            ZIndex = 5,
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            Image = "rbxassetid://2454009026",
            ImageColor3 = Color3.fromHSV(hue, 1, 1),
            Rotation = 180,
            Parent = library:Create("ImageLabel", {
                ZIndex = 4,
                AnchorPoint = Vector2.new(1, 0),
                Position = UDim2.new(1, -6, 0, 6),
                Size = UDim2.new(0, 10, 1, -60),
                BorderColor3 = Color3.new(),
                Image = "rbxassetid://4632082392",
                ScaleType = Enum.ScaleType.Tile,
                TileSize = UDim2.new(0, 5, 0, 5),
                Parent = option.mainHolder
            })
        })

        option.transSlider = library:Create("Frame", {
            ZIndex = 5,
            Position = UDim2.new(0, 0, option.trans, 0),
            Size = UDim2.new(1, 0, 0, 2),
            BackgroundColor3 = Color3.fromRGB(38, 41, 65),
            BorderColor3 = Color3.fromRGB(255, 255, 255),
            Parent = transMain
        })

        transMain.InputBegan:connect(function(Input)
            if Input.UserInputType.Name == "MouseButton1" then
                editingtrans = true
                option:SetTrans(1 - ((Input.Position.Y - transMain.AbsolutePosition.Y) / transMain.AbsoluteSize.Y))
            end
        end)

        transMain.InputEnded:connect(function(Input)
            if Input.UserInputType.Name == "MouseButton1" then
                editingtrans = false
            end
        end)
    end

    local hueMain = library:Create("Frame", {
        ZIndex = 4,
        AnchorPoint = Vector2.new(0, 1),
        Position = UDim2.new(0, 6, 1, -54),
        Size = UDim2.new(1, option.trans and -28 or -12, 0, 10),
        BackgroundColor3 = Color3.new(1, 1, 1),
        BorderColor3 = Color3.new(),
        Parent = option.mainHolder
    })

    local Gradient = library:Create("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
            ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 0, 255)),
            ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 0, 255)),
            ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
            ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 255, 0)),
            ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 255, 0)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0)),
        }),
        Parent = hueMain
    })

    local hueSlider = library:Create("Frame", {
        ZIndex = 4,
        Position = UDim2.new(1 - hue, 0, 0, 0),
        Size = UDim2.new(0, 2, 1, 0),
        BackgroundColor3 = Color3.fromRGB(38, 41, 65),
        BorderColor3 = Color3.fromRGB(255, 255, 255),
        Parent = hueMain
    })

    hueMain.InputBegan:connect(function(Input)
        if Input.UserInputType.Name == "MouseButton1" then
            editinghue = true
            X = (hueMain.AbsolutePosition.X + hueMain.AbsoluteSize.X) - hueMain.AbsolutePosition.X
            X = math.clamp((Input.Position.X - hueMain.AbsolutePosition.X) / X, 0, 0.995)
            option:SetColor(Color3.fromHSV(1 - X, sat, val))
        end
    end)

    hueMain.InputEnded:connect(function(Input)
        if Input.UserInputType.Name == "MouseButton1" then
            editinghue = false
        end
    end)

    local satval = library:Create("ImageLabel", {
        ZIndex = 4,
        Position = UDim2.new(0, 6, 0, 6),
        Size = UDim2.new(1, option.trans and -28 or -12, 1, -74),
        BackgroundColor3 = Color3.fromHSV(hue, 1, 1),
        BorderColor3 = Color3.new(),
        Image = "rbxassetid://4155801252",
        ClipsDescendants = true,
        Parent = option.mainHolder
    })

    local satvalSlider = library:Create("Frame", {
        ZIndex = 4,
        AnchorPoint = Vector2.new(0.5, 0.5),
        Position = UDim2.new(sat, 0, 1 - val, 0),
        Size = UDim2.new(0, 4, 0, 4),
        Rotation = 45,
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        Parent = satval
    })

    satval.InputBegan:connect(function(Input)
        if Input.UserInputType.Name == "MouseButton1" then
            editingsatval = true
            X = (satval.AbsolutePosition.X + satval.AbsoluteSize.X) - satval.AbsolutePosition.X
            Y = (satval.AbsolutePosition.Y + satval.AbsoluteSize.Y) - satval.AbsolutePosition.Y
            X = math.clamp((Input.Position.X - satval.AbsolutePosition.X) / X, 0.005, 1)
            Y = math.clamp((Input.Position.Y - satval.AbsolutePosition.Y) / Y, 0, 0.995)
            option:SetColor(Color3.fromHSV(hue, X, 1 - Y))
        end
    end)

    library:AddConnection(inputService.InputChanged, function(Input)
        if Input.UserInputType.Name == "MouseMovement" then
            if editingsatval then
                X = (satval.AbsolutePosition.X + satval.AbsoluteSize.X) - satval.AbsolutePosition.X
                Y = (satval.AbsolutePosition.Y + satval.AbsoluteSize.Y) - satval.AbsolutePosition.Y
                X = math.clamp((Input.Position.X - satval.AbsolutePosition.X) / X, 0.005, 1)
                Y = math.clamp((Input.Position.Y - satval.AbsolutePosition.Y) / Y, 0, 0.995)
                option:SetColor(Color3.fromHSV(hue, X, 1 - Y))
            elseif editinghue then
                X = (hueMain.AbsolutePosition.X + hueMain.AbsoluteSize.X) - hueMain.AbsolutePosition.X
                X = math.clamp((Input.Position.X - hueMain.AbsolutePosition.X) / X, 0, 0.995)
                option:SetColor(Color3.fromHSV(1 - X, sat, val))
            elseif editingtrans then
                option:SetTrans(1 - ((Input.Position.Y - transMain.AbsolutePosition.Y) / transMain.AbsoluteSize.Y))
            end
        end
    end)

    satval.InputEnded:connect(function(Input)
        if Input.UserInputType.Name == "MouseButton1" then
            editingsatval = false
        end
    end)

    local r, g, b = library.round(option.color)
    option.hexInput.Text = string.format("#%02x%02x%02x", r, g, b)
    option.rgbInput.Text = table.concat({r, g, b}, ",")

    option.rgbInput.FocusLost:connect(function()
        local r, g, b = option.rgbInput.Text:gsub("%s+", ""):match("(%d+),(%d+),(%d+)")
        if r and g and b then
            local color = Color3.fromRGB(tonumber(r), tonumber(g), tonumber(b))
            return option:SetColor(color)
        end

        local r, g, b = library.round(option.color)
        option.rgbInput.Text = table.concat({r, g, b}, ",")
    end)

    option.hexInput.FocusLost:connect(function()
        local r, g, b = option.hexInput.Text:match("#?(..)(..)(..)")
        if r and g and b then
            local color = Color3.fromRGB(tonumber("0x"..r), tonumber("0x"..g), tonumber("0x"..b))
            return option:SetColor(color)
        end

        local r, g, b = library.round(option.color)
        option.hexInput.Text = string.format("#%02x%02x%02x", r, g, b)
    end)

    function option:updateVisuals(Color)
        hue, sat, val = Color3.toHSV(Color)
        hue = hue == 0 and 1 or hue
        satval.BackgroundColor3 = Color3.fromHSV(hue, 1, 1)
        if option.trans then
            transMain.ImageColor3 = Color3.fromHSV(hue, 1, 1)
        end
        hueSlider.Position = UDim2.new(1 - hue, 0, 0, 0)
        satvalSlider.Position = UDim2.new(sat, 0, 1 - val, 0)

        local r, g, b = library.round(Color3.fromHSV(hue, sat, val))

        option.hexInput.Text = string.format("#%02x%02x%02x", r, g, b)
        option.rgbInput.Text = table.concat({r, g, b}, ",")
    end

    return option
end

library.createColor = function(option, parent)
    option.hasInit = true

    if option.sub then
        option.main = option:getMain()
    else
        option.main = library:Create("Frame", {
            LayoutOrder = option.position,
            Size = UDim2.new(1, 0, 0, 20),
            BackgroundTransparency = 1,
            Parent = parent
        })

        option.title = library:Create("TextLabel", {
            Position = UDim2.new(0, 6, 0, 0),
            Size = UDim2.new(1, -12, 1, 0),
            BackgroundTransparency = 1,
            Text = option.text,
            TextSize = 15,
            Font = Enum.Font.Code,
            TextColor3 = Color3.fromRGB(210, 210, 210),
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = option.main
        })
    end

    option.visualize = library:Create(option.sub and "TextButton" or "Frame", {
        Position = UDim2.new(1, -(option.subpos or 0) - 24, 0, 4),
        Size = UDim2.new(0, 18, 0, 12),
        SizeConstraint = Enum.SizeConstraint.RelativeYY,
        BackgroundColor3 = option.color,
        BorderColor3 = Color3.new(),
        Parent = option.main
    })

    library:Create("ImageLabel", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Image = "rbxassetid://2454009026",
        ImageColor3 = Color3.new(),
        ImageTransparency = 0.6,
        Parent = option.visualize
    })

    library:Create("ImageLabel", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Image = "rbxassetid://2592362371",
        ImageColor3 = Color3.fromRGB(60, 60, 60),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(2, 2, 62, 62),
        Parent = option.visualize
    })

    library:Create("ImageLabel", {
        Size = UDim2.new(1, -2, 1, -2),
        Position = UDim2.new(0, 1, 0, 1),
        BackgroundTransparency = 1,
        Image = "rbxassetid://2592362371",
        ImageColor3 = Color3.new(),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(2, 2, 62, 62),
        Parent = option.visualize
    })

    local interest = option.sub and option.visualize or option.main

    if option.sub then
        option.visualize.Text = ""
        option.visualize.AutoButtonColor = false
    end

    interest.InputBegan:connect(function(input)
        if input.UserInputType.Name == "MouseButton1" then
            if not option.mainHolder then library.createColorPickerWindow(option) end
            if library.popup == option then library.popup:Close() return end
            if library.popup then library.popup:Close() end
            option.open = true
            local pos = option.main.AbsolutePosition
            option.mainHolder.Position = UDim2.new(0, pos.X + 36 + (option.trans and -16 or 0), 0, pos.Y + 56)
            option.mainHolder.Visible = true
            library.popup = option
            option.visualize.BorderColor3 = library.flags["Menu Accent Color"]
        end
        if input.UserInputType.Name == "MouseMovement" then
            if not library.warning and not library.slider then
                option.visualize.BorderColor3 = library.flags["Menu Accent Color"]
            end
            if option.tip then
                library.tooltip.Text = option.tip
                library.tooltip.Size = UDim2.new(0, textService:GetTextSize(option.tip, 15, Enum.Font.Code, Vector2.new(9e9, 9e9)).X, 0, 20)
            end
        end
    end)

    interest.InputChanged:connect(function(input)
        if input.UserInputType.Name == "MouseMovement" then
            if option.tip then
                library.tooltip.Position = UDim2.new(0, input.Position.X + 26, 0, input.Position.Y + 36)
            end
        end
    end)

    interest.InputEnded:connect(function(input)
        if input.UserInputType.Name == "MouseMovement" then
            if not option.open then
                option.visualize.BorderColor3 = Color3.new()
            end
            library.tooltip.Position = UDim2.new(2)
        end
    end)

    function option:SetColor(newColor, nocallback)
        if typeof(newColor) == "table" then
            newColor = Color3.new(newColor[1], newColor[2], newColor[3])
        end
        newColor = newColor or Color3.new(1, 1, 1)
        if self.mainHolder then
            self:updateVisuals(newColor)
        end
        option.visualize.BackgroundColor3 = newColor
        library.flags[self.flag] = newColor
        self.color = newColor
        if not nocallback then
            self.callback(newColor)
        end
    end

    if option.trans then
        function option:SetTrans(value, manual)
            value = math.clamp(tonumber(value) or 0, 0, 1)
            if self.transSlider then
                self.transSlider.Position = UDim2.new(0, 0, value, 0)
            end
            self.trans = value
            library.flags[self.flag .. " Transparency"] = 1 - value
            self.calltrans(value)
        end
        option:SetTrans(option.trans)
    end

    delay(1, function()
        if library then
            option:SetColor(option.color)
        end
    end)

    function option:Close()
        library.popup = nil
        self.open = false
        self.mainHolder.Visible = false
        option.visualize.BorderColor3 = Color3.new()
    end
end

function library:AddTab(title, pos)
    local tab = {canInit = true, tabs = {}, columns = {}, title = tostring(title)}
    table.insert(self.tabs, pos or #self.tabs + 1, tab)

    function tab:AddColumn()
        local column = {sections = {}, position = #self.columns, canInit = true, tab = self}
        table.insert(self.columns, column)

        function column:AddSection(title)
            local section = {title = tostring(title), options = {}, canInit = true, column = self}
            table.insert(self.sections, section)

            function section:AddLabel(text)
                local option = {text = text}
                option.section = self
                option.type = "label"
                option.position = #self.options
                option.canInit = true
                table.insert(self.options, option)

                if library.hasInit and self.hasInit then
                    library.createLabel(option, self.content)
                else
                    option.Init = library.createLabel
                end

                return option
            end

            function section:AddDivider(text)
                local option = {text = text}
                option.section = self
                option.type = "divider"
                option.position = #self.options
                option.canInit = true
                table.insert(self.options, option)

                if library.hasInit and self.hasInit then
                    library.createDivider(option, self.content)
                else
                    option.Init = library.createDivider
                end

                return option
            end

            function section:AddToggle(option)
                option = typeof(option) == "table" and option or {}
                option.section = self
                option.text = tostring(option.text)
                option.state = option.state == nil and nil or (typeof(option.state) == "boolean" and option.state or false)
                option.callback = typeof(option.callback) == "function" and option.callback or function() end
                option.type = "toggle"
                option.position = #self.options
                option.flag = (library.flagprefix and library.flagprefix .. " " or "") .. (option.flag or option.text)
                option.subcount = 0
                option.canInit = (option.canInit ~= nil and option.canInit) or true
                option.tip = option.tip and tostring(option.tip)
                option.style = option.style == 2
                library.flags[option.flag] = option.state
                table.insert(self.options, option)
                library.options[option.flag] = option

                function option:AddColor(subOption)
                    subOption = typeof(subOption) == "table" and subOption or {}
                    subOption.sub = true
                    subOption.subpos = self.subcount * 24
                    function subOption:getMain() return option.main end
                    self.subcount = self.subcount + 1
                    return section:AddColor(subOption)
                end

                function option:AddBind(subOption)
                    subOption = typeof(subOption) == "table" and subOption or {}
                    subOption.sub = true
                    subOption.subpos = self.subcount * 24
                    function subOption:getMain() return option.main end
                    self.subcount = self.subcount + 1
                    return section:AddBind(subOption)
                end

                function option:AddList(subOption)
                    subOption = typeof(subOption) == "table" and subOption or {}
                    subOption.sub = true
                    function subOption:getMain() return option.main end
                    self.subcount = self.subcount + 1
                    return section:AddList(subOption)
                end

                function option:AddSlider(subOption)
                    subOption = typeof(subOption) == "table" and subOption or {}
                    subOption.sub = true
                    function subOption:getMain() return option.main end
                    self.subcount = self.subcount + 1
                    return section:AddSlider(subOption)
                end

                if library.hasInit and self.hasInit then
                    library.createToggle(option, self.content)
                else
                    option.Init = library.createToggle
                end

                return option
            end

            function section:AddButton(option)
                option = typeof(option) == "table" and option or {}
                option.section = self
                option.text = tostring(option.text)
                option.callback = typeof(option.callback) == "function" and option.callback or function() end
                option.type = "button"
                option.position = #self.options
                option.flag = (library.flagprefix and library.flagprefix .. " " or "") .. (option.flag or option.text)
                option.subcount = 0
                option.canInit = (option.canInit ~= nil and option.canInit) or true
                option.tip = option.tip and tostring(option.tip)
                table.insert(self.options, option)
                library.options[option.flag] = option

                function option:AddBind(subOption)
                    subOption = typeof(subOption) == "table" and subOption or {}
                    subOption.sub = true
                    subOption.subpos = self.subcount * 24
                    function subOption:getMain() option.main.Size = UDim2.new(1, 0, 0, 40) return option.main end
                    self.subcount = self.subcount + 1
                    return section:AddBind(subOption)
                end

                function option:AddColor(subOption)
                    subOption = typeof(subOption) == "table" and subOption or {}
                    subOption.sub = true
                    subOption.subpos = self.subcount * 24
                    function subOption:getMain() option.main.Size = UDim2.new(1, 0, 0, 40) return option.main end
                    self.subcount = self.subcount + 1
                    return section:AddColor(subOption)
                end

                if library.hasInit and self.hasInit then
                    library.createButton(option, self.content)
                else
                    option.Init = library.createButton
                end

                return option
            end

            function section:AddBind(option)
                option = typeof(option) == "table" and option or {}
                option.section = self
                option.text = tostring(option.text)
                option.key = (option.key and option.key.Name) or option.key or "none"
                option.nomouse = typeof(option.nomouse) == "boolean" and option.nomouse or false
                option.mode = typeof(option.mode) == "string" and (option.mode == "toggle" or option.mode == "hold" and option.mode) or "toggle"
                option.callback = typeof(option.callback) == "function" and option.callback or function() end
                option.type = "bind"
                option.position = #self.options
                option.flag = (library.flagprefix and library.flagprefix .. " " or "") .. (option.flag or option.text)
                option.canInit = (option.canInit ~= nil and option.canInit) or true
                option.tip = option.tip and tostring(option.tip)
                table.insert(self.options, option)
                library.options[option.flag] = option

                if library.hasInit and self.hasInit then
                    library.createBind(option, self.content)
                else
                    option.Init = library.createBind
                end

                return option
            end

            function section:AddSlider(option)
                option = typeof(option) == "table" and option or {}
                option.section = self
                option.text = tostring(option.text)
                option.min = typeof(option.min) == "number" and option.min or 0
                option.max = typeof(option.max) == "number" and option.max or 0
                option.value = option.min < 0 and 0 or math.clamp(typeof(option.value) == "number" and option.value or option.min, option.min, option.max)
                option.callback = typeof(option.callback) == "function" and option.callback or function() end
                option.float = typeof(option.value) == "number" and option.float or 1
                option.suffix = option.suffix and tostring(option.suffix) or ""
                option.textpos = option.textpos == 2
                option.type = "slider"
                option.position = #self.options
                option.flag = (library.flagprefix and library.flagprefix .. " " or "") .. (option.flag or option.text)
                option.subcount = 0
                option.canInit = (option.canInit ~= nil and option.canInit) or true
                option.tip = option.tip and tostring(option.tip)
                library.flags[option.flag] = option.value
                table.insert(self.options, option)
                library.options[option.flag] = option

                function option:AddColor(subOption)
                    subOption = typeof(subOption) == "table" and subOption or {}
                    subOption.sub = true
                    subOption.subpos = self.subcount * 24
                    function subOption:getMain() return option.main end
                    self.subcount = self.subcount + 1
                    return section:AddColor(subOption)
                end

                function option:AddBind(subOption)
                    subOption = typeof(subOption) == "table" and subOption or {}
                    subOption.sub = true
                    subOption.subpos = self.subcount * 24
                    function subOption:getMain() return option.main end
                    self.subcount = self.subcount + 1
                    return section:AddBind(subOption)
                end

                if library.hasInit and self.hasInit then
                    library.createSlider(option, self.content)
                else
                    option.Init = library.createSlider
                end

                return option
            end

            function section:AddList(option)
                option = typeof(option) == "table" and option or {}
                option.section = self
                option.text = tostring(option.text)
                option.values = typeof(option.values) == "table" and option.values or {}
                option.callback = typeof(option.callback) == "function" and option.callback or function() end
                option.multiselect = typeof(option.multiselect) == "boolean" and option.multiselect or false
                --option.groupbox = (not option.multiselect) and (typeof(option.groupbox) == "boolean" and option.groupbox or false)
                option.value = option.multiselect and (typeof(option.value) == "table" and option.value or {}) or tostring(option.value or option.values[1] or "")
                if option.multiselect then
                    for i,v in next, option.values do
                        option.value[v] = false
                    end
                end
                option.max = option.max or 4
                option.open = false
                option.type = "list"
                option.position = #self.options
                option.labels = {}
                option.flag = (library.flagprefix and library.flagprefix .. " " or "") .. (option.flag or option.text)
                option.subcount = 0
                option.canInit = (option.canInit ~= nil and option.canInit) or true
                option.tip = option.tip and tostring(option.tip)
                library.flags[option.flag] = option.value
                table.insert(self.options, option)
                library.options[option.flag] = option

                function option:AddValue(value, state)
                    if self.multiselect then
                        self.values[value] = state
                    else
                        table.insert(self.values, value)
                    end
                end

                function option:AddColor(subOption)
                    subOption = typeof(subOption) == "table" and subOption or {}
                    subOption.sub = true
                    subOption.subpos = self.subcount * 24
                    function subOption:getMain() return option.main end
                    self.subcount = self.subcount + 1
                    return section:AddColor(subOption)
                end

                function option:AddBind(subOption)
                    subOption = typeof(subOption) == "table" and subOption or {}
                    subOption.sub = true
                    subOption.subpos = self.subcount * 24
                    function subOption:getMain() return option.main end
                    self.subcount = self.subcount + 1
                    return section:AddBind(subOption)
                end

                if library.hasInit and self.hasInit then
                    library.createList(option, self.content)
                else
                    option.Init = library.createList
                end

                return option
            end

            function section:AddBox(option)
                option = typeof(option) == "table" and option or {}
                option.section = self
                option.text = tostring(option.text)
                option.value = tostring(option.value or "")
                option.callback = typeof(option.callback) == "function" and option.callback or function() end
                option.type = "box"
                option.position = #self.options
                option.flag = (library.flagprefix and library.flagprefix .. " " or "") .. (option.flag or option.text)
                option.canInit = (option.canInit ~= nil and option.canInit) or true
                option.tip = option.tip and tostring(option.tip)
                library.flags[option.flag] = option.value
                table.insert(self.options, option)
                library.options[option.flag] = option

                if library.hasInit and self.hasInit then
                    library.createBox(option, self.content)
                else
                    option.Init = library.createBox
                end

                return option
            end

            function section:AddColor(option)
                option = typeof(option) == "table" and option or {}
                option.section = self
                option.text = tostring(option.text)
                option.color = typeof(option.color) == "table" and Color3.new(option.color[1], option.color[2], option.color[3]) or option.color or Color3.new(1, 1, 1)
                option.callback = typeof(option.callback) == "function" and option.callback or function() end
                option.calltrans = typeof(option.calltrans) == "function" and option.calltrans or (option.calltrans == 1 and option.callback) or function() end
                option.open = false
                option.trans = tonumber(option.trans)
                option.subcount = 1
                option.type = "color"
                option.position = #self.options
                option.flag = (library.flagprefix and library.flagprefix .. " " or "") .. (option.flag or option.text)
                option.canInit = (option.canInit ~= nil and option.canInit) or true
                option.tip = option.tip and tostring(option.tip)
                library.flags[option.flag] = option.color
                table.insert(self.options, option)
                library.options[option.flag] = option

                function option:AddColor(subOption)
                    subOption = typeof(subOption) == "table" and subOption or {}
                    subOption.sub = true
                    subOption.subpos = self.subcount * 24
                    function subOption:getMain() return option.main end
                    self.subcount = self.subcount + 1
                    return section:AddColor(subOption)
                end

                if option.trans then
                    library.flags[option.flag .. " Transparency"] = option.trans
                end

                if library.hasInit and self.hasInit then
                    library.createColor(option, self.content)
                else
                    option.Init = library.createColor
                end

                return option
            end

            function section:SetTitle(newTitle)
                self.title = tostring(newTitle)
                if self.titleText then
                    self.titleText.Text = tostring(newTitle)
                end
            end

            function section:Init()
                if self.hasInit then return end
                self.hasInit = true

                self.main = library:Create("Frame", {
                    BackgroundColor3 = Color3.fromRGB(30, 30, 30),
                    BorderColor3 = Color3.new(),
                    Parent = column.main
                })

                self.content = library:Create("Frame", {
                    Size = UDim2.new(1, 0, 1, 0),
                    BackgroundColor3 = Color3.fromRGB(30, 30, 30),
                    BorderColor3 = Color3.fromRGB(60, 60, 60),
                    BorderMode = Enum.BorderMode.Inset,
                    Parent = self.main
                })

                library:Create("ImageLabel", {
                    Size = UDim2.new(1, -2, 1, -2),
                    Position = UDim2.new(0, 1, 0, 1),
                    BackgroundTransparency = 1,
                    Image = "rbxassetid://2592362371",
                    ImageColor3 = Color3.new(),
                    ScaleType = Enum.ScaleType.Slice,
                    SliceCenter = Rect.new(2, 2, 62, 62),
                    Parent = self.main
                })

                table.insert(library.theme, library:Create("Frame", {
                    Size = UDim2.new(1, 0, 0, 1),
                    BackgroundColor3 = library.flags["Menu Accent Color"],
                    BorderSizePixel = 0,
                    BorderMode = Enum.BorderMode.Inset,
                    Parent = self.main
                }))

                local layout = library:Create("UIListLayout", {
                    HorizontalAlignment = Enum.HorizontalAlignment.Center,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Padding = UDim.new(0, 2),
                    Parent = self.content
                })

                library:Create("UIPadding", {
                    PaddingTop = UDim.new(0, 12),
                    Parent = self.content
                })

                self.titleText = library:Create("TextLabel", {
                    AnchorPoint = Vector2.new(0, 0.5),
                    Position = UDim2.new(0, 12, 0, 0),
                    Size = UDim2.new(0, textService:GetTextSize(self.title, 15, Enum.Font.Code, Vector2.new(9e9, 9e9)).X + 10, 0, 3),
                    BackgroundColor3 = Color3.fromRGB(30, 30, 30),
                    BorderSizePixel = 0,
                    Text = self.title,
                    TextSize = 15,
                    Font = Enum.Font.Code,
                    TextColor3 = Color3.new(1, 1, 1),
                    Parent = self.main
                })

                layout.Changed:connect(function()
                    self.main.Size = UDim2.new(1, 0, 0, layout.AbsoluteContentSize.Y + 16)
                end)

                for _, option in next, self.options do
                    if option.canInit then
                        option.Init(option, self.content)
                    end
                end
            end

            if library.hasInit and self.hasInit then
                section:Init()
            end

            return section
        end

        function column:Init()
            if self.hasInit then return end
            self.hasInit = true

            self.main = library:Create("ScrollingFrame", {
                ZIndex = 2,
                Position = UDim2.new(0, 6 + (self.position * 239), 0, 2),
                Size = UDim2.new(0, 233, 1, -4),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                ScrollBarImageColor3 = Color3.fromRGB(),
                ScrollBarThickness = 4,	
                VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar,
                ScrollingDirection = Enum.ScrollingDirection.Y,
                Visible = false,
                Parent = library.columnHolder
            })

            local layout = library:Create("UIListLayout", {
                HorizontalAlignment = Enum.HorizontalAlignment.Center,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 12),
                Parent = self.main
            })

            library:Create("UIPadding", {
                PaddingTop = UDim.new(0, 8),
                PaddingLeft = UDim.new(0, 2),
                PaddingRight = UDim.new(0, 2),
                Parent = self.main
            })

            layout.Changed:connect(function()
                self.main.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 14)
            end)

            for _, section in next, self.sections do
                if section.canInit and #section.options > 0 then
                    section:Init()
                end
            end
        end

        if library.hasInit and self.hasInit then
            column:Init()
        end

        return column
    end

    function tab:Init()
        if self.hasInit then return end
        self.hasInit = true
        local size = textService:GetTextSize(self.title, 18, Enum.Font.Code, Vector2.new(9e9, 9e9)).X + 10

        self.button = library:Create("TextLabel", {
            Position = UDim2.new(0, library.tabSize, 0, 22),
            Size = UDim2.new(0, size, 0, 30),
            BackgroundTransparency = 1,
            Text = self.title,
            TextColor3 = Color3.new(1, 1, 1),
            TextSize = 15,
            Font = Enum.Font.Code,
            TextWrapped = true,
            ClipsDescendants = true,
            Parent = library.main
        })
        library.tabSize = library.tabSize + size

        self.button.InputBegan:connect(function(input)
            if input.UserInputType.Name == "MouseButton1" then
                library:selectTab(self)
            end
        end)

        for _, column in next, self.columns do
            if column.canInit then
                column:Init()
            end
        end
    end

    if self.hasInit then
        tab:Init()
    end

    return tab
end

coroutine.resume(coroutine.create(function()
    for i = 1, 100 do
        wait(1800)
        game:GetService("StarterGui"):SetCore("SendNotification", { Title = Version; Text = "discord.gg/femware"; Icon = "rbxassetid://9327507243"; Duration = 30 })
    end
end))

function library:AddWarning(warning)
    warning = typeof(warning) == "table" and warning or {}
    warning.text = tostring(warning.text) 
    warning.type = warning.type == "confirm" and "confirm" or ""

    local answer
    function warning:Show()
        library.warning = warning
        if warning.main and warning.type == "" then return end
        if library.popup then library.popup:Close() end
        if not warning.main then
            warning.main = library:Create("TextButton", {
                ZIndex = 2,
                Size = UDim2.new(1, 0, 1, 0),
                BackgroundTransparency = 0.6,
                BackgroundColor3 = Color3.new(),
                BorderSizePixel = 0,
                Text = "",
                AutoButtonColor = false,
                Parent = library.main
            })

            warning.message = library:Create("TextLabel", {
                ZIndex = 2,
                Position = UDim2.new(0, 20, 0.5, -60),
                Size = UDim2.new(1, -40, 0, 40),
                BackgroundTransparency = 1,
                TextSize = 16,
                Font = Enum.Font.Code,
                TextColor3 = Color3.new(1, 1, 1),
                TextWrapped = true,
                RichText = true,
                Parent = warning.main
            })

            if warning.type == "confirm" then
                local button = library:Create("TextLabel", {
                    ZIndex = 2,
                    Position = UDim2.new(0.5, -105, 0.5, -10),
                    Size = UDim2.new(0, 100, 0, 20),
                    BackgroundColor3 = Color3.fromRGB(40, 40, 40),
                    BorderColor3 = Color3.new(),
                    Text = "Yes",
                    TextSize = 16,
                    Font = Enum.Font.Code,
                    TextColor3 = Color3.new(1, 1, 1),
                    Parent = warning.main
                })

                library:Create("ImageLabel", {
                    ZIndex = 2,
                    Size = UDim2.new(1, 0, 1, 0),
                    BackgroundTransparency = 1,
                    Image = "rbxassetid://2454009026",
                    ImageColor3 = Color3.new(),
                    ImageTransparency = 0.8,
                    Parent = button
                })

                library:Create("ImageLabel", {
                    ZIndex = 2,
                    Size = UDim2.new(1, 0, 1, 0),
                    BackgroundTransparency = 1,
                    Image = "rbxassetid://2592362371",
                    ImageColor3 = Color3.fromRGB(60, 60, 60),
                    ScaleType = Enum.ScaleType.Slice,
                    SliceCenter = Rect.new(2, 2, 62, 62),
                    Parent = button
                })

                local button1 = library:Create("TextLabel", {
                    ZIndex = 2,
                    Position = UDim2.new(0.5, 5, 0.5, -10),
                    Size = UDim2.new(0, 100, 0, 20),
                    BackgroundColor3 = Color3.fromRGB(40, 40, 40),
                    BorderColor3 = Color3.new(),
                    Text = "No",
                    TextSize = 16,
                    Font = Enum.Font.Code,
                    TextColor3 = Color3.new(1, 1, 1),
                    Parent = warning.main
                })

                library:Create("ImageLabel", {
                    ZIndex = 2,
                    Size = UDim2.new(1, 0, 1, 0),
                    BackgroundTransparency = 1,
                    Image = "rbxassetid://2454009026",
                    ImageColor3 = Color3.new(),
                    ImageTransparency = 0.8,
                    Parent = button1
                })

                library:Create("ImageLabel", {
                    ZIndex = 2,
                    Size = UDim2.new(1, 0, 1, 0),
                    BackgroundTransparency = 1,
                    Image = "rbxassetid://2592362371",
                    ImageColor3 = Color3.fromRGB(60, 60, 60),
                    ScaleType = Enum.ScaleType.Slice,
                    SliceCenter = Rect.new(2, 2, 62, 62),
                    Parent = button1
                })

                button.InputBegan:connect(function(input)
                    if input.UserInputType.Name == "MouseButton1" then
                        answer = true
                    end
                end)

                button1.InputBegan:connect(function(input)
                    if input.UserInputType.Name == "MouseButton1" then
                        answer = false
                    end
                end)
            else
                local button = library:Create("TextLabel", {
                    ZIndex = 2,
                    Position = UDim2.new(0.5, -50, 0.5, -10),
                    Size = UDim2.new(0, 100, 0, 20),
                    BackgroundColor3 = Color3.fromRGB(30, 30, 30),
                    BorderColor3 = Color3.new(),
                    Text = "OK",
                    TextSize = 16,
                    Font = Enum.Font.Code,
                    TextColor3 = Color3.new(1, 1, 1),
                    Parent = warning.main
                })

                library:Create("ImageLabel", {
                    ZIndex = 2,
                    Size = UDim2.new(1, 0, 1, 0),
                    BackgroundTransparency = 1,
                    Image = "rbxassetid://2454009026",
                    ImageColor3 = Color3.new(),
                    ImageTransparency = 0.8,
                    Parent = button
                })

                library:Create("ImageLabel", {
                    ZIndex = 2,
                    AnchorPoint = Vector2.new(0.5, 0.5),
                    Position = UDim2.new(0.5, 0, 0.5, 0),
                    Size = UDim2.new(1, -2, 1, -2),
                    BackgroundTransparency = 1,
                    Image = "rbxassetid://3570695787",
                    ImageColor3 = Color3.fromRGB(50, 50, 50),
                    Parent = button
                })

                button.InputBegan:connect(function(input)
                    if input.UserInputType.Name == "MouseButton1" then
                        answer = true
                    end
                end)
            end
        end
        warning.main.Visible = true
        warning.message.Text = warning.text

        repeat wait()
        until answer ~= nil
        spawn(warning.Close)
        library.warning = nil
        return answer
    end

    function warning:Close()
        answer = nil
        if not warning.main then return end
        warning.main.Visible = false
    end

    return warning
end

function library:Close()
    self.open = not self.open
    if self.main then
        if self.popup then
            self.popup:Close()
        end
        self.main.Visible = self.open
    end
end

function library:Init()
    if self.hasInit then return end
    self.hasInit = true

    self.base = library:Create("ScreenGui", {IgnoreGuiInset = true, ZIndexBehavior = Enum.ZIndexBehavior.Global})
    if runService:IsStudio() then
        self.base.Parent = script.Parent.Parent
    elseif syn and syn.protect_gui or get_hidden_gui or gethui then
        local hiddenUI = syn and syn.protect_gui or get_hidden_gui or gethui
        pcall(function() hiddenUI(self.base) end)
        self.base.Parent = game:GetService"CoreGui"
    else
        game:GetService("Players").LocalPlayer:Kick("Unsupported. https://discord.gg/femware")
    end

    self.main = self:Create("ImageButton", {
        AutoButtonColor = false,
        Position = UDim2.new(0, 100, 0, 46),
        Size = UDim2.new(0, 500, 0, 600),
        BackgroundColor3 = Color3.fromRGB(20, 20, 20),
        BorderColor3 = Color3.new(),
        ScaleType = Enum.ScaleType.Tile,
        Modal = true,
        Visible = false,
        Parent = self.base
    })

    self.top = self:Create("Frame", {
        Size = UDim2.new(1, 0, 0, 50),
        BackgroundColor3 = Color3.fromRGB(30, 30, 30),
        BorderColor3 = Color3.new(),
        Parent = self.main
    })

    self:Create("TextLabel", {
        Position = UDim2.new(0, 6, 0, -1),
        Size = UDim2.new(0, 0, 0, 20),
        BackgroundTransparency = 1,
        Text = tostring(self.title),
        Font = Enum.Font.Code,
        TextSize = 18,
        TextColor3 = Color3.new(1, 1, 1),
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = self.main
    })

    table.insert(library.theme, self:Create("Frame", {
        Size = UDim2.new(1, 0, 0, 1),
        Position = UDim2.new(0, 0, 0, 24),
        BackgroundColor3 = library.flags["Menu Accent Color"],
        BorderSizePixel = 0,
        Parent = self.main
    }))

    library:Create("ImageLabel", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Image = "rbxassetid://2454009026",
        ImageColor3 = Color3.new(),
        ImageTransparency = 0.4,
        Parent = top
    })

    self.tabHighlight = self:Create("Frame", {
        BackgroundColor3 = library.flags["Menu Accent Color"],
        BorderSizePixel = 0,
        Parent = self.main
    })
    table.insert(library.theme, self.tabHighlight)

    self.columnHolder = self:Create("Frame", {
        Position = UDim2.new(0, 5, 0, 55),
        Size = UDim2.new(1, -10, 1, -60),
        BackgroundTransparency = 1,
        Parent = self.main
    })

    self.tooltip = self:Create("TextLabel", {
        ZIndex = 2,
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        TextSize = 15,
        Font = Enum.Font.Code,
        TextColor3 = Color3.new(1, 1, 1),
        Visible = true,
        Parent = self.base
    })

    self:Create("Frame", {
        AnchorPoint = Vector2.new(0.5, 0),
        Position = UDim2.new(0.5, 0, 0, 0),
        Size = UDim2.new(1, 10, 1, 0),
        Style = Enum.FrameStyle.RobloxRound,
        Parent = self.tooltip
    })

    self:Create("ImageLabel", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Image = "rbxassetid://2592362371",
        ImageColor3 = Color3.fromRGB(60, 60, 60),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(2, 2, 62, 62),
        Parent = self.main
    })

    self:Create("ImageLabel", {
        Size = UDim2.new(1, -2, 1, -2),
        Position = UDim2.new(0, 1, 0, 1),
        BackgroundTransparency = 1,
        Image = "rbxassetid://2592362371",
        ImageColor3 = Color3.new(),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(2, 2, 62, 62),
        Parent = self.main
    })

    self.top.InputBegan:connect(function(input)
        if input.UserInputType.Name == "MouseButton1" then
            dragObject = self.main
            dragging = true
            dragStart = input.Position
            startPos = dragObject.Position
            if library.popup then library.popup:Close() end
        end
    end)
    self.top.InputChanged:connect(function(input)
        if dragging and input.UserInputType.Name == "MouseMovement" then
            dragInput = input
        end
    end)
    self.top.InputEnded:connect(function(input)
        if input.UserInputType.Name == "MouseButton1" then
            dragging = false
        end
    end)

    function self:selectTab(tab)
        if self.currentTab == tab then return end
        if library.popup then library.popup:Close() end
        if self.currentTab then
            self.currentTab.button.TextColor3 = Color3.fromRGB(255, 255, 255)
            for _, column in next, self.currentTab.columns do
                column.main.Visible = false
            end
        end
        self.main.Size = UDim2.new(0, 16 + ((#tab.columns < 2 and 2 or #tab.columns) * 239), 0, 600)
        self.currentTab = tab
        tab.button.TextColor3 = library.flags["Menu Accent Color"]
        self.tabHighlight:TweenPosition(UDim2.new(0, tab.button.Position.X.Offset, 0, 50), "Out", "Quad", 0.2, true)
        self.tabHighlight:TweenSize(UDim2.new(0, tab.button.AbsoluteSize.X, 0, -1), "Out", "Quad", 0.1, true)
        for _, column in next, tab.columns do
            column.main.Visible = true
        end
    end

    spawn(function()
        while wait(1) do
            if not library then break end
            local Configs = self:GetConfigs()
            for _, config in next, Configs do
                if not table.find(self.options["Config List"].values, config) then
                    self.options["Config List"]:AddValue(config)
                end
            end
            for _, config in next, self.options["Config List"].values do
                if not table.find(Configs, config) then
                    self.options["Config List"]:RemoveValue(config)
                end
            end
        end
    end)

    for _, tab in next, self.tabs do
        if tab.canInit then
            tab:Init()
            self:selectTab(tab)
        end
    end

    self:AddConnection(inputService.InputEnded, function(input)
        if input.UserInputType.Name == "MouseButton1" and self.slider then
            self.slider.slider.BorderColor3 = Color3.new()
            self.slider = nil
        end
    end)

    self:AddConnection(inputService.InputChanged, function(input)
        if not self.open then return end
        
        if input.UserInputType.Name == "MouseMovement" then
            
            if self.slider then
                self.slider:SetValue(self.slider.min + ((input.Position.X - self.slider.slider.AbsolutePosition.X) / self.slider.slider.AbsoluteSize.X) * (self.slider.max - self.slider.min))
            end
        end
        if input == dragInput and dragging and library.draggable then
            local delta = input.Position - dragStart
            local yPos = (startPos.Y.Offset + delta.Y) < -36 and -36 or startPos.Y.Offset + delta.Y
            dragObject:TweenPosition(UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, yPos), "Out", "Quint", 0.1, true)
        end
    end)

    -- local Old_index
    -- Old_index = hookmetamethod(game, "__index", function(t, i)
    --     if checkcaller() then return Old_index(t, i) end

    --     return Old_index(t, i)
    -- end)

    -- local Old_new
    -- Old_new = hookmetamethod(game, "__newindex", function(t, i, v)
    --     if checkcaller() then return Old_new(t, i, v) end


    --     return Old_new(t, i, v)
    -- end)

    if not getgenv().silent then
        delay(1, function() self:Close() end)
    end
end

local function promptLib()
    local RunService = game:GetService("RunService")
    local CoreGui = game:GetService("CoreGui")

    local ErrorPrompt = getrenv().require(CoreGui.RobloxGui.Modules.ErrorPrompt)
    local function NewScreen(ScreenName)
        local Screen = Instance.new("ScreenGui")
        Screen.Name = ScreenName
        Screen.ResetOnSpawn = false
        Screen.IgnoreGuiInset = true
        sethiddenproperty(Screen,
        "OnTopOfCoreBlur",true)
        Screen.RobloxLocked = true 
        Screen.Parent = CoreGui
        return Screen
    end

    return function(Title,Message,Buttons)
        local Screen = NewScreen("Prompt")
        local Prompt = ErrorPrompt.new("Default",{
            MessageTextScaled = false,
            PlayAnimation = false,
            HideErrorCode = true
        })
        for Index,Button in pairs(Buttons) do
            local Old = Button.Callback
            Button.Callback = function(...)
                RunService:SetRobloxGuiFocused(false)
                Prompt:_close()
                Screen:Destroy()
                return Old(...)
            end
        end

        Prompt:setErrorTitle(Title)
        Prompt:updateButtons(Buttons)
        Prompt:setParent(Screen)
        RunService:SetRobloxGuiFocused(true)
        Prompt:_open(Message)
        return Prompt,Screen
    end
end 

--LIBRARY END

local S, E = pcall(function()

-- i expect you ahve already called the ui library so, yeah.

-- local RageThird = RageColunm1:AddSection("Player Modification")

-- RageThird:AddDivider("Main");

-- RageThird:AddToggle{
--     text = "WalkSpeed",
--     flag = "WalkSpeedEnabled",
--     callback = function(State)
--         if not State then
--             if game:GetService("Players").LocalPlayer.Character and game:GetService("Players").LocalPlayer.Character:FindFirstChild("Humanoid") then
--                 game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = 20
--             end
--         else
--             if game:GetService("Players").LocalPlayer.Character and game:GetService("Players").LocalPlayer.Character:FindFirstChild("Humanoid") then
--                 game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = library.flags["WalkSpeed"]
--             end
--         end

--     end
-- }:AddBind{
--     flag = "WalkSpeedBind",
--     key = "None",
-- 	callback = function()
-- 		library.options["WalkSpeedEnabled"]:SetState(not library.flags["WalkSpeedEnabled"])
-- 	end
-- }

-- RageThird:AddToggle{
--     text = "Enable on Sprint",
--     flag = "WalkSpeedSprintEnabled"
-- }

-- RageThird:AddSlider{
--     text = "Speed",
--     flag = "WalkSpeed",
--     min = 1,
--     max = 200,
--     value = 32,
--     suffix = "% (16% Default)",
--     callback = function()
--         if library.flags["WalkSpeedEnabled"] then
--             if game:GetService("Players").LocalPlayer.Character and game:GetService("Players").LocalPlayer.Character:FindFirstChild("Humanoid") then
--                 game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = library.flags["WalkSpeed"]
--             end
--         end
--     end
-- }

_, Protected_by_MoonSecV2, Discord = 'discord.gg/gQEH2uZxUk'


,nil,nil;(function() _msec=(function(_,l,e)local R=l[(2288/0x68)];local E=e[_[(169418/0xfe)]][_[(0x6aa-(1019+-0x6a))]];local N=(0x5b-87)/((0x31c-(-65+0x1fd))/0xb0)local C=(61-(-45+(266-0xa2)))-(175/0xaf)local A=e[_[(-0x76+304)]][_[(542-0x12c)]];local j=(0x1f+(-42-(-528/0x2c)))+(466/0xe9)local D=e[_[(-51+0x271)]][_[(-0x63+971)]]local o=(72-0x46)-(0x44-(6432/(271-0xaf)))local r=((((0xe9f4/(292-0x9a))+-0x60)+-112)/113)local U=(((-103+(0x86+-34))-0x28)+45)local i=(0x6/((1575-(-0x56+908))/0xfb))local w=(0x50-(17004/((-0x54+15562)/71)))local x=(0x56+((-99-(105+-0x7f))-0x7))local t=((((0x39c3b/(0x136+-87))-0x230)+-119)/191)local c=(0x3a-(-38+((-0x1259/(0x2b5e/182))+170)))local k=((216-((-0x57+26)+207))-0x43)local O=((((-18+(0xb1c-1467))-0x2d1)+-56)/194)local h=((((1297+-0x29)+-0x7d)-618)/0xab)local b=((-0x2d+((-3658/(0x13b-197))+0x71))+-34)local f=(0x60+(12+((-0x5d+-76)+64)))local B=(0x6c-((6967-(0x1065d/19))/33))local s=((((-20227/0xb3)+17)+0x410)/0xec)local S=(-91+(((0x1cb27+-123)/103)/12))local v=(0x77-(138+(-0xbae/(172+-0x2a))))local P=(((0xbe60-(4390020/0xb4))/251)+-0x5d)local u=(-24+(114-((-0x25+-34)+0x9d)))local K=_[(0x21186/102)];local Q=e[_[(0x1d4-282)]][_[(57001/0x77)]];local W=e[(function(_)return type(_):sub(1,1)..'\101\116'end)('==/#,;+;')..'\109\101'..('\116\97'or':#,:==^}').._[(-0x65+675)]];local p=e[_[(1722/0x3)]][_[((0x4223f/139)-1015)]];local L=(123+-0x79)-(((-0x75+200)+-44)-0x25)local m=(-74+((-117+0x11)+176))-(504/0xfc)local Y=e[_[(12276/0x42)]][_[(0x1164a/199)]];local n=function(e,_)return e.._ end local y=(0x2d-41)*((-0x56+(48/0x6))+82)local V=e[_[(2408-0x4e9)]];local a=(79-0x4d)*((7081+((-3316+0x663)/0x29))/55)local J=(0x26c00/155)*(0x42-((0x30b1-6257)/97))local z=(7488/(0xf8+(-86+-0x12)))local g=(0x1ea/(((-0x43+21)+308)+-17))*(51-0x31)local M=e[_[(0x415+-30)]]or e[_[(0x4cf-657)]][_[(0x415+-30)]];local d=(0x27e-((-123+0x12)+487))local _=e[_[(-25+0x526)]];local G=(function(n)local a,l=1,0x10 local e={j={},v={}}local d=-o local _=l+C while true do e[n:sub(_,(function()_=a+_ return _-C end)())]=(function()d=d+o return d end)()if d==(y-o)then d=""l=L break end end local d=#n while _<d+C do e.v[l]=n:sub(_,(function()_=a+_ return _-C end)())l=l+o if l%N==L then l=m p(e.j,(Y((e[e.v[m]]*y)+e[e.v[o]])))end end return D(e.j)end)("..:::MoonSec::..!*%&/+^,;.:_#$}==%##,,&;=:!:;^/!!%#/$*:^^&%$__:!+#*$*,+}*:$#.}_;.}/}}+:}:_;^_;,!&%=/#:,;*,;^%;#++.$#^^=;:&*+#}.!+%&!},^^!&.&*::+&^$/,^_!^:%#}}$^,*=&,;%&#+&!_!;%;.//!^#;:$/#$:,_!^..}://:^+#*}}!}$#%,=/.}^_$,.%:=&,}^_%%,^;;&}!!#%#=.&&==;;//:=+.+/$$%.^/&^*+}%!}%:/^^^;/!}##=&!=%_/,^&;&:!}_},/!%#/;^/;!:/#}&.!!_$:.^+;*:;%/!_/%&}$%:;=%$}#:},!^&!/;#+,/,=#_};!.&%*.^!}.*}.,_=%+}}%%;$!/%;,$}:!^%%/}^%;:}^##/_:,%&/=^#^;!!^:*%}:&+/}.^}=_/+*,$!.%+/%/$#,!}+;/*,:#/;$^=+_/^#%}=!=$_.+:}*;,!%_^+%}#;*#:!;#:;#/}*!$%##.^#=}^.#+}%!%$#;/_$_&+$:^/$/^&_/^,}/*%#^,}/!!%=;;^%+:^/.$*+$=!,:*+*!*=$#.}^!+=}%,!!_._;}:},!&%=/_^,;,^&##%;,/%!/#^:_*,_:,%!+..%}^=.#+:*#$}},.}&/$*_^,_%#}}_!;+&;#$+&#+,;**:%&&.!/$$%^/!%.&*}_*..*#$;.:+#!%,/$^#=;,:+#,,,%}=!_%;=&%#}+^$&,^*%:^%^#/++#^;#/}*!$%./.^^;*:*&^/%!}%:/+^.,*.%=+^=}/^_#,^&;=:$#;**}:$%$#;^!},}$.,+!*%$/},_;,!%_=*,$^!*:$.*:&^}#:},!,$!=;.*!^*=$,}}+^__&+$$*^,*%#}.!+%+/}+,&=:;=*;:%^%%/}^:;^:%#/&=!:$&,=^_;,:/=$=^#^#+^!^#;;:^.*_.}%$#%/#}$,%!;.,!=:}/+$;+#=%;$%%,*_+,/&^=;#}+.}.%%#;;//^!;!&/.=/$$;,&=.*%&$:.#+}/*}%^}!:,=%%_}+%$%,!!*,$&;=:_#,}/!!%###^$&!}##;}+!%$#&,*!/,$}}.}^!%%=.::&;#.+$}:,;!.:+!+_^+*}+^.$}.!*+:^&=+%!##}.!.$&;__/_,.*##=/#&*%/}^:;^:%#}}}&_%$,=,_;,:&#/:+..#//!^#;=*^^#=&/:!$!%}.,&+:&*^^=}/+!:_$};!}.*:_:%%.&!^+.$&%=*}!^#%;//^&.=^;*.#/%!,}&+#*;$:.#,&%!_//%$&^=,:_*^}&!=%#};!*^:/%^:;/!!%#/;^/;!:!$#}}:*^$/.^+;&%}!^:!%}&=*:^^;%:&$**##;:+&};#;;$&;!%..^=%}*.;./:!##}$+&#*:$^.;+:_%^+/,%}=}!!/%,/%#}}_!;*/*#;+^},;&!$./&%#%$=#;;:/#!}$!*%:/+^,!.:+#*}}!:%}/,%%;^,,&%}=!_%:;&^$++,}^,=*,/*;//^!;#:;#/}!!**!}+^*;$:.#+}!!+*}/_+%}}::#^}:&:,+;%^=;#_,$;:/!!%#/$*,!=,;_}..%%!./%,,#&&_/=%^;%%}/:^;;%$_:+,$}^_=_.;;:/,=#_};!.&+!=/._/$#_.//%$^;.=}$+,^&%$}:!^%%/}^:;.;^#&&__,%&/=^#;,^*%.:&,_^&;}+,/!/;_*,$#.%+/*^}::,&,#/+,_;^^!+..%:_,&:#._%,/&^=;_:=#,}/!=;;}/^!;#:#++;$:^$!#.$%__%/,$!!=};:/^^%;:$._!}*}.$._}#&#=:_#,}:*%!;&$#&,!}##;}+!%,$;,&!%^,$#.}^!%%}/}^__^:.._;,!&%=/!::,%.:!%=.&&!_+&;_^$+*=#}.!+%&,$:,&!+.^*%:$*:#=^*=^;+}}.%%=_%/;$^,&##&#=}#!;%//!^!##:&_*/$!.%+/}*_%#%_=;#%/$;^#%^};::,_&;$*&#}*,%==.$,//+!!#%;/.:+$!/_*+#!}:=!_^%*;$:.#.}%!_=/;$!^=}#;=!#.$&,#!$}/*=:_#,}^*!%;}%:.!/#$.^#==$}$:.^+;*:#:/&!%//^+&^$+&/}#:},!+}}}.%*/:%//$*+/}/;!*!;$/:!##}#$+=}^,_****%=$}:!^%,.!:.***.!=:;&$};*!*;/!*+;}:,+}^^:}^,*},/$!}$!.%#/,;}*.:+#*}&*_=&/:#%=,:!:;}=_}&,#&^=;_:.+/;}*/#=*;%!=:$=.+/*!$%./$+.%/:!%^!!!/!::^^%;}:+$%^$;;,.+&%;#!__#,}/!*%#_+;}/,$*&,%%,_!+*#*^/!!./*/_%/&:^::^;%:}#$%+=}},_+:;/&:=#_}_:+!}!+/$!;:=,.&%=:!&+}:++^/*#$}:!,,%;_^/,$_^;=^;,%&_%:#_;,:&#=}#!;%+;/^;}.%/#!}$!$$^.$$+}:+&*_**:_+^;%^};::;==_;:*:*;&_=;_:,#/}!:.,%:_$#!$!;#/}*!}%.}%__}+*:%#*%,}%:/^^+_=,;/*%;,!#.,!/&;=:_#,}/!!%}/#^/_*%##;}+!+$}_^*}/!+:^&/:_&$}/:^^;%:}#:}#!,%.;#;,;&:=#}!;.*/_*&!#$+}$#,,$$.:*=#/%_##^$==;}*+%:}^:;^:&#}:;^!}:_%:^^;!&#=}#!}!^.*//&#;}/;+$^.%+/*^};,_&,_^+%$:!;%$};::^#/^=!./}}::%=#!$://!!#%;/}+$$;,%%:%}+*,.:+^*;$:&.&$*.:*!/_;*,=!:#^}&!};!=+}++.=:^}*/^!%#/;^^&*/:.%}__+}.::%+;*:$#}.;$*._%*}#//=#=^,##,!=$_};%&:=#_}#_,,!;,=*+;!%/_!&:_=%#}&.;+:*#=&:/&%#&+,}/,%!&.=!=#//_$!&.;&&#=}#!.%/_$}^%=:,&*;:#&/:#*}$;.:+#^==:^;$_%+:/%&.&&,=^_%,/&^^%/+%}#};=#*$$/$!;#:;#,**!.}&=#:+$:$+/^/%!}%:/}}#=,;_/;=}+$+_/,^&;=:_#,}+;/%.=;}/;!:##:%+!}=+;!::!%}_!*!^^%%}/:^;%=!!%!*=*&*#.!/,;&:=#%+_,&$_=/;.+*!.^+=$/,!:$^#=/;+==.%!+.}%%.:%$:/&^__/,_}/$$.*.$/^^}:&%$/,;!&;,!^.!$#,,&%:$%}_}//#!/:$%*;$#+^}/^=_^^!=^;_!;.+*=:/}^,}%}::&__}%.$!+_$^+.:,^_=:^#,.:&+}%!}%_/,!!;;&%!_://::_:,^&;=:%/&}^:&+/&$}.%*%##;}+!%&$;,%!&;!*$:%&/_%}::^^;%:,.;=+&&*^!.$^=&:=#_};!/%!/}%/;**%*#}.!+%/+$:,/=/.!%&:+==#;+;_!,;=%,^!.;&+^#_,.}^;#/&$^;%//!^}+.,%/_.&:#;^.}:,.#+:#%}#./$.++%!/./%&.;&:#;_}&:=;_:,#^%}=;*!_#%!}#:;#/}#%=/_+++.#+.&!^,%!}%:/_,;*&%}^:+%:!^_.,*%*!/_#,}/!+^},+$#;/_:&&/:$%/.^=}^!*:$#.},#%!_!/.}%^*=%;*%&&^=/_^,;+$#.+.}.!.**#^;;/:%+$%^!=*;$*%:,&!:#+.};,;==;!_#^:%#}}$/,#!=..%*:*/##&^^=%./*$:#&=$*&$}#,^!_:*}&._/+%/}!:%^/;}/;!%:.^_%%^=,#&^=;_:.+/%$!^*=$;%*,:!+_/}*!$%./+^*;**$#;:%_}%:/^^&^=.;.!^.;%$:;/$$}^_!.}_//!%#/;^,#!^:%%:&=*#$/.^+;&.$#,,}:._%^_.&;#}+#:+,!&%=/_^,;&:++=}*;/%!/#^;;/:!#*#$!=_*.$^.;+:&$};,;!+.#*::;^:%#}}_!&%;/&^%;,:&#=}#!;%///$!;.;+^!}$!.%;.*::;&.#$+:};,.*+:/&%_!^#%}=!$}^}!#.}%&_//*!*#%;//^^,/,//+**!$%./^;!^.&%=+}%!}%:/^^%;&&}#_&&^=%_/,^^}:^^.!==,=_#$;$/;!:##:_+,$#;/!!.$%}$:::^!%%}/}^^;!,;^*=:#/&#+^%}/;+!,%*;^/%!/#^./__%,_.:_=^=.$#.;+:*#}#:/&;_$+:}=*;&&}}_!,%/&!!..!/::/_#^*#/:!^#;;:,}//&/+/#}*;$#:!+#*}}!*=**/;};=^+#$,=,_%,/&^*_;;%:}%,+!..}%_*.#:;#/}%=$%^$=.;^*!.}/*#%+*$!;*!#.=*}_//%%&_:,^&;=:&&&*$.&#:,*:^:*!##;}+!=$!,!&$}:=_!+*^^%%}/:^:=^:_%&+.^.%#/#%,;&:=#!.:%%&_*!.:#&/:%%=;.%%:/^^.#+:*#$}}/+}=^.**;^:%#}}_!,%&//*=;#./*=}#!;%+,},,/&!./$#$!_}+=*^$;.:,+%;:#&:$+/.=+,:%%.}&___;%&^=;_:;#/;$+^;=_^#**:%%=#$/;#$,;!.^*}&.#+}%!&&}:;;%.$+%*}%_&/}%*,#&;=:_#.,*.,,,_;;:$_,$+;}+!*%%+}:.^/+==+.&&=:::^&^}%:}#:}!}::%*,:.;&,:$_};!/%!/#^/;.$/#_,./+%*/$^=._!,:&%^^^=%/}^:;__,&*%_/^*$:.}/,$^;/=/#^^%.$!$#;;:/#%!$.+#}$;,*!.=.%%.}!:%^/&.}#,;!=.,*%_.&.$#^;!:;!/%!!#%;/^^=*:%&,#:*.$%./+^&.$:^^!%,%*^_.&:$;!%_}^}&!=%$;;!*&.$%+:++!#/^/!&;^*^:=%*$!+:}=;+;$%,$#.}^!,&&+$};:/*#$.&&}$}.^*!}#.%$*#_;!/%!/*,_=/}}!,$}=._%#_%+!__^+=;!$,!%/}^:;,}%##_%.}^,#!+;_%!_+&}:.^^==#^#;;:/#!}$!.%^/+^,%.}+#*}}!_/^$!/;#+;,%%}=!_%&_!&^/.^*&,%!&##;//^!;*##*&%#,/$#%+&:#+}$^^_%#}%:/^^,&*!.+%,;&%:_^%;_.*,_/&:,_!;#/;^/;^/^*..;%&!#}_$+}*:$#.}%;_&,^/=%.,__&_%,!&%=/#_,;!=.##_;%/%!/#^},.*$;$,.!+%*/=,._%#_^/}}*^;!^.^%/,;%#}}_!;+&;#$+&#+,;**:%&&.%/,$;^_=&!,$^.%+/*^^$%*#$&%.%/,#,%}};::^#/}=!;=*=:/&.#%+}*$!%#%;//^,&/!%_+/*!$%./=}=!.}}+__/_}!::^^%;}::+^}.,+^&}+#^.!*_#,}/!*,#;^&#=,!**:&:,*%$/.^+;*:$#=*:!$!}::^^;%:^**!_*%,;,/*#^&==#_};!.+&##_+;}!},$,.!+%*/=,.;%/#!%^$_^;=^;}!*,,%#}}_!;!&;##+_}},%!:;&%!#*/^$/,&.**&$!.%+/%+}%,_=;.^;}:;^/%^};#.^;!+;_%^_/&%=;_:,#&}!!#%_;;^=%$!;#/}*!^**!=+&,_,:#.}&!}%:/^^&^}};%**:/%;#!&.}/^#=#.**:.!&:$}*/*,##;}+!%,$/^!=_.&*,.*&/$!^/}/;%*&.!_&,!&%=/$./^$/^&=/};/;!/#^;;+:*&:!%##++_=&.$+:*#$}}*+}}=;.*%+;^;}}_!,%,;%^_!&,_.&*,*/=#:++;++=}%+...,%}_^$:$,}=;.!!^..*=+!%;.$&*:$&.#%!$,;/+$^+_$#^/_!%::=^.=&;%=,;;*!;,$^./*.^^%%:^&&#%&*#,&=;^,^&!=%_/#*/=#+/;.**=:*!#}./}!:##;}=}*,;$/,.;##:^.}^!%%}/:^^;%:%#;&,$&%=/_^#.+=$#+#},/,}*^!$/^!_.+*$%=!*#$^.;+:^,!..&%:;+&,#!/}=;=/_!,%&/$/%_^.:+.}!}.=/:!^#;;:;/^&&&*/},^,:%.:+#*}}!:%^/+!%;#_,!%}=!_%$^;:&%=%%!/+!!#%;/+_*,:,&&.:/;},&&^%*;$:.#,;%:#!/}$!/_=$;!*}:}&!_=^:/$=:_#,}+&!^._%*.&/^$=,!!*^!*+:^&.#*&#}&+!!.;}&!#!^&}#:},!&%=/&^_=,:}_#;;!/%!/$.;/*^:;*^#/^!};;+!/_$%;$}:!^%/^=/,^}&:!%+#:&*$%,&!+./_&!%#!;%//%^::^;}#:^$!.%+/*^$;*::/+}}/::^/%^};}:^#!_._%!_+&}$:!&,$&}!!#%}+!;!_#:;#/}%&_&&}$:*;$:.#+}%!^%=::^_%=,:#^}&!/&}$,}*%_**#$%^$}};}=_:,&#+:;}+!*%$/.^+;*:$#!^^,%%}/:^,^&%_,/}$:,&!.!:,$&:=#_}._&}$:^%!!/^!##}.!+%*/$^_#.:*=}!:!^%%/&+*^.*&%}}_!,%;=_}#.%!;/%&_};=//!^#;.:+#}.,.=#.+%_;:&;$/+#=.,;#%&!};::^#/_=,,#%/:!&$:}+!}$;*}/;:/^!;#:_%%,,,&}^^,%__$}.#+}%!%.$.^;=}.;_+^}&!=%$;;!*&.#&/#*/%$/^^**/}!:##;}=*^&_}++},#*=.:/^!%%}/%/&+;_:_:/*&&/=/_^,;&:=#_}^!;**,#$;;/:!#}:;$%+_!&}$=^}}*$}:!^%%/}^:;__^#/:_!,%&/=^_;,:;_&}%*;%//!^#;;:##+#*!$%+:*^$;.:!^&=+.,:$#&}#$_!^#%}=!,!%*}_^*%!;$^.!^#%;//^^:!:.$%^_;+=#=+.*;$:.#..%!#%^*^:%;}::#.*=$;}*}#;&;=:_#,}/!#%*^#^_=*!##;}+!._,#/+;!$_*+:=^!%%}/:^^;::&,}}=/&%=/_^,;&:=#_^&=!;!=#^;;/:+,=.^#}.,&$^,*}+,#},,&.,&*}^:;^:,$*+./*^:&=#:!%..;%^,^%;:/:/$*;:/#!}%*#;+^},;&},.!%$_&_=^.%^};::;^!}:;/!$!./!^_:,#&}*#$%^*}*,#!#.==}_:&=$^^%=_.*!;^%%!}%:/:$&^.}!$#/&%=%_/,;/&=:_#,}/*!%#/;^+:+}##;}+!^^$/.^+;*:$#.}^!%%}/:^^;%:}#:},!&&=/_^,;&:=#$!;!/%!+#^}^/:!##}:%+%*/$,.;=+*#$}:!;;%/}^:.^:&+}}_*,%_,=^_#;=&#=}#!;_//!,#;;}^*!}$!.%+}*^$..:+#&}}!:%^/%,};::^#&!=__%,+&^=}_:,#&}*%}+;//,!;#=;#/}*!$%:_+^*.$:.#+}%!}%_^,=%;}#:#=%&!=%_/,;/&=:_=,}/&!%#/;^/;^*##.%+!*&$/.^+;*:$#.}^+%%},:^^;%:=}:},!&;=/=#,;&:=#_};!/%!.#^;:/:!}#}.^+%*/$:.;_,*#$=:!^,%/}:_$^:%#}}!$,%&+=^_;.^&#!&#!;+//!^#;.#.$!}$^.%&/*^$;.:^}*}}!:.^/%_};::^#/!=!_%,#&^!/__,#&}*%#%;//=!;.%;#/}*!}/./+^%%$:&/+}%!}%:/^^%;=*:#,;&!=/_/,^&;=:#%,}/^!%#_;^/;!:##.&+!*/$/.;+;%!$#.}^/%%/*:^^.%:=*:},//,=/_^,;.,=#_=;!/%%!#^;$/:!=#}.!+%%^%,.;^!*#_}:!^%%/=;:;^:&&}}_+,%&/=^#:,:&#!^#!*!//!^#;.#/#!}$..%:=*^$;.:^}*}}!:#^/!=};::^#%}=!_%,_&^!%_:,}&}!!#%;//#!;$!;#++*!$%./+^*$$:.}+}%%}%::^^%;}}:##_&!=&_/,_&;=}$*,}/!!%%*;^/.!:##::+!*,$/..+;*:$#:!^_%%}::^^$%:}#:},!&.=/__,;&#=##!;!/;&!#^;$/:&$#}.*+%*+$^.#^=*#$}:!.&%/},:;^}/*}}_!,%.!=^_.,:&#*:#!;,//!.#;;:/#%!%!.%+:*^=:.:+#*}=%:%^/%$};_,^#%}=!#/,/&^!!_:$&&}!!#%;//^!;$*;#++*!$:./+#*;$::&+}+.}%:+^^%;}:_!;&&!=%_/:=&;=__#;%++!%#/;^;^!:#$;}^%%&$/.$+;*=$#.}^!&/=$:^,!%::/:},!&%!^#=,;/&=##};*/%!/$;:*/:*^#};_+%*/$^.;^!*#}+:!^#%/};:;^:&}}}_^,%&:=^_=,:/%%:#!;;///;#;;_/#!=$!.^^.*^$;.:.}*}}*:%,^&,};_!^#^.=!_%,/&^==_:;*&}!%#%;^/^!}=,;#+%*!%=./+,*;$=.#^%&+}%:/^^;+}::$^}&!!}_/,_&;=$_#,}/!*/*+;^/}!:}};}+!*%}^.^+;%*$#:&^!%%}/_;^;%:=/:}+:&%=/_^;:&:=##,;!:$!/#^;;+#!##}.:+%/*$^.;+:*#$}:!^.%/=!:;^#%#}}_!,%&:=^_},:/&=}#!;%//!_#;;#/#*!$!.;+/*^$#.:_.*}}*:%^.%^}#_=^#%}=!!=,/&,=;_:.;&}!+#%;,/^!;#:.}:**!$;./,;*;$:.#,!%!}%:_^^%$}::#^}/%=%_/,}&;/%_#,}/!*/#/;^+*!:.&;}+!*%}^.^+;%/$#./^!%%}/:^^;%:=&:},:&%=^_^,;&:=##/;!/;!/#$;;/:!##}.++%*^$^.:+:*#$}:!^^%/}_:;^:%#=%_!,%&/=^*+,:&$=}#!.://!:#;;:/#!}$!.%^_*^$#.:+$*}}!:%^:+*};:}^#.+=!_&,/&^=;_}.*&}!!#%}_/^!.#:_#,#*!$,./,=*;,^.#,!/&}%:.^^*#}::#^}&!*%_/,^&;=__#,}/!*/$+;^/$!:}%;}+!*%$::!+;%!$#:!^!%&}/:,^;%:!;:},!&%=^_^,;&:=#}$;!/,!/#;;;/_!#$%:++%*/$^=:+:*$$}_%,&%/}_:;=#%#}}_!.%^#=^_$,:/*=}#&;%+^!^#;.*/#_^$!.%+/*^$;.:^**}},:%^^%^=:::^#&&=!/+,/&^=;##,#&}!+#%*^/^!;#::#/}*!$,./+_*;$$.#,!%!}%:_^^#;}::#^}&!=%_/,_&;!*_#;!/!*/#/;^/$!:#_;}+!*%}^.^+;*=$#.$^!%%}/_;^;%:=%:},+&%=/_^;:&:=##+;!++!+#^;;+#!##}.;+%_:$^.;+:%}$}:!^_%/,$:;^:%#}}_!,%&:=^#*,:&}=}#!;%//!_#;;=/#*/$!:/+/*^$$.:&_*}}!:%,^%^};:=^#!$=!_%,/+^=;_:;*&}!+#%==/^!;#:;#+&*!$/./+;*;}#.#+}%+}%$^^^%;}:_}^}&!=,_/^.&;=:_#,}/!!%#.;^/.!:#};}^%*%$/._+;};$#.}^!%%}/:^^$%:}#:},!&%!^_^,;&==#+};!/%!/$;;;/:**#}%%+%*/$^_;+:*#}&:!^,%/}.:;,#%#}}_,,%&^=,_;,:&#=}#!;,//!$#;;#/#%}$!.%+.*^$$.:+:*}=%:%^/%_};*/^#%}=!#/,/&^=$_:}^&}!!#%://^!;#=;#+&*!.!./^;*;$::*+},$}%:/^^&:}::#,&&!+#_/,^&;*:_#,}/+!%#.;^$/!:$};}+!*,$/*_+;*:$#.}^!%%}.:^^;%:}$:};%&%=/_#,;:/=#_};!^%!/#^;}/:*%#}/_+%%/$^.;+=*#..:!^;%/=;:;^:&*}}=&,%&/=^#:,:&#!&#!*///!^#;::/#!}$+.%+.*^$_.:^}*}}!:.^/_+};::^#%}=!_%,.&^==_:,}&}*%#%;//_!;+.;#/}*!$%./+^*$$:.#+}%+}%_^^^%;=!:#=$&!=%_/.^&;=:#%,}/^!%&.;^+;!:##.&+!;,$/.#+;%#$#.}^^%%,&:^^;%:!#:},!&;=/_#,;,%=##};!/%!.#^#!/:*%#}:%+%*/$#.;}.*#$}:!;%%/}^:}^:&%}}:.,%//=^_;,=&#=,#!;;//*;#;;:+%!}+=.%+/*^=;.:+#%/}!:;^/&$}._:^#%}=+_%;_&,=}_:;}&}!!#;;/$+!;#:;#^}*!$%.:+^*}$:/}+}&!}%:/^_%;.#:#,/&!!/_/,^&$=:/,,}/!!%#/;^/;!=##.&+!*%$/:;+;*:}*.},#%%}/:^^;%:}#_&,!&,=/_^,;/#=#_};+/%%##^;;/:!##}.!+,*/$_.;+:*#=!:!^%%.}^;+^:%#}}_!,%&/=__;,=&#=}#!.///!^#$;::;!}$!.%+/*^$;.=+#*}}!:%^/%^};::,%%}=!_%,/&^!:_:,#//!!!%;//^!;$#;#/}*+$%*%+^*;$::}+}%!},:/=;%;}::#;}&!=%_.,^&$=:_=,}+%!%#/;$/;!##$;}+!*%$:.^+$*:}&.}^%%%!/}+^;%=}#_&,!=}=/#;,;&:!*_}://%!/#^.:/:!#$&.!}/*/$^.;,:*#$}:+^%%.}^:_^:&}}}_!,.&/=;_.,:&#=}#!;%/.!^#=;:/}!}=!.%+/*_$;.=+#$=}!_/^/%^}$::.%%}=!_%;^&^=;_=,#$!!!#%;/^^!;#:.*/}*+$%.,+^%:$:.#^+%!}/:+^^%;}::#^}&+=%__,^&:=:$#,}/!!,#/;_/;%/##:!+!*%$..^/$*:$#.},%%%}/:_^;_#}#:},!+%=/_^,$&:!*_};&/%*^#^;;+*!#$!.*+%*/$^.;+:%*$}:,^%%^}^#;^:%#=&_!,,&/}&_;;#&#=}#+;%=&!^#;;:+}!}$!.,+/*#$;.:+#&}}!:%^.%^}$::,.%==!_%,/&_=;__,#/!!!$/;//^!$#:&&/}*!$%:^+^*;$=.#^/%!}%:/;^%;}:_*^}&+=%#*,,/:=:_#;//!&}#/;^/;*###;}+,*%##.^+;*:}}.}^!%:}/}%^;%:}#:},!&%=._^;!&:=}_}.%/%!/#_;;%;!##}.!^/*/$^.$+:./$}:!^%//}^:;^=%#=&_!,=&+=^_;,:/*=}#*;%/^!^$:;:/#*&$!::+/*^$;:#+#*}}+:%$#%^};::;#%}=!_,,/&_=;#,,$+!!!#%;:/^//#:;#/}%%$%./+$*;*^.#+}%!}%:/^^%$}:_&^}&%=%#^,^&;==_#}!/!!%#/.;/;!:$*;}#;*%$/.^,;*:$#:&^!%,}/_&^.&#}#:},^&%$;_^,;&:!}_};!/.!/::;;/:!##}.!+%*.$^.=+:*}$}_%^%%/}_:;=/%#}}_!;/&/=^_$,:_/=}#!;%^/!^#;;=/#*&$!.=++%;$;.:^%*}!.:%^/%^=:::^#&+=!$_,/&^=;_:,#&}!+#%;_/^!:#:.}/}*!$,./^/*.$:.#+}%!}%:.^^&:}::#^}/%=%_/,#&;==_#,}/!*/#/;^/=!:}/;=+!*%}^.^+;%%$##}^!%%}/_;^;%:=+:},_&%=/_^,;&:=##/;!/_!/#;;;+#!##}.,+%*.$^.;+:%}$}:!^:%/^}:;^:%#!!_!,%&$=^==,:&#=}$%;%//*!#;+$/#!}$!.%+/*^$=.:^^*}}%:%,^%^};_%^#&&=!_%,//;=;_:;+&}*%#%;//^*:#:;#+;*!,*./+^*;}#.#+}%_}%_&^^%;}::#^}&!=:_/;*&;=#_#.!/!!%#$;^/$!:##;}^%*%$/:!+;}=$#.}^!&/}/:^,&%:,%:},!&%!^_^,;/^=#^#;!/%!/#^;;/:*+#}.#+%*^$^::+:*#};:!^,%/}^:;,#%#}}__,%^!=^_;,:/}=}#!;}//&$#;;:/#%!$!.%^**^/!.:+#*}}!:%^/&!};_,^#&!=!#/,/&^!&_:;*&}!!#%.^+=!;$^;#++*!$%./^;^!$::.+}$^}%:/^^&:}::#,#&!^#_/,^&;=:_#,}/_!%$%;^/:!:$};}+!*}$/._+;*:$#_!^!%%=*:^:,%:}#:};%&%=/#/,;_&=#_};!+/!/#^.,/::*#}.!+%*/$^.;^^*#}$:!^/%/=;:;^:&.}}_+,%&/=^#:,:&#!##!}&//!^#;.#/#!}$=.%$!*^$;.:^}*}}!_%^/$$};::^#%}=!_%;*&^!;_:,}&}*%#%;/+/!;#=;#/}*!}/./+^%,$:/=+}%!}%_^^^%;=::#+^&!=%_/;;&;=:#$,},&!%#/;^/;!:##.#+!%&$/.;+;%#$#.}^=%%}.:^^;%:=}:},!/%=/#/,;&:=#$!;!/%*+#^#^/:!##}:%+%*/};.;^.*$$}:!^%%/}^_,^:&}}}_%,%/^=^_;;:&#!&#!;%//*;#;;:+$!}}/.&+/*^}:.:+#&!}!_$^/%^};_#^#%}!&_%.*&^=;_:,#&}!!$%;/+.!;##;#^!*!$%:++^*$$:.#+}&%}%:/,;%;/%:#^}&!!/_/,^/_=:,!,}/!!%$^;^/;*}##.$+**%$/.^+;*:}$.},/%%}^:^,:%:}##!,!&,=/_^,;/#=#_}.&/%^_#^;;/:*}#}.!^^*/%..;+:*#=!:!^%&.}^=%^:%#}}_!,%&/!;_;;=&#!!#!.///!^$_;:+*!}$!.%^^*^$;:}+#.!}!:%^/&;};::;*%}+=_%,/&^!:_:,#+/!!$&;+/^!;#:;#/}%&$%::+^*:$::}+}%!=^:/^_%;}::#;!&!=%#.,^}/=:_#,}+%!%#/.#/;,;##;}+!%/$/.^^=*:*+.}^!%%}/:^^;&}}##+,!&/=/#;,;&:**_};+/%!/#^.:/:!#}/.!+&*/$^.;^#*#$}_,^%:&}^:;^:&}}}_!;:&/,!_;,:&#=}#!;%+.!^}!;:/}!}}%.%+/%#$;.=+#*}}!_/^/%^==::%*%}=!_%;^&^=;$%,#}&!!#%;/+;!;#::+/}}:$%./+^*;$:.#,/%!=_:/^;%;=#:#^}/,=%_.,^&;=:#},}/!*:#//^/;!:##:!+!*%}$.^+;*_$#.},%%%}/#!^;*#}#:},!&%=/_^;=&:*^_};%/%*^#^;;^%!#$&.!+%*/};.;+:&+$}.,^%%/}^_:^:%#!;_!#!&/=^_;;#&#=}$_;%&%!^#;;:/#!}$!::+/&*$;.#+#&!}!:%,$%^}$::^#%}!%_%,/+!=;$:,#&}!!$/;//^%&#:%}/}*!$%:^+^*;=^.##/%!}%:/^^%;}:#+^}/#=%_^,^&;=:_#;&/!*_#/;,/;*#}=;}++*%&$.^+;*:}}:=^!%,}/!=^;%:}##!.&&%=._^^;&:=#_};%/$!/#_;;/}!##}.!^/&,$^.$+:&*$}:!^%%^=*:;^=%#=+_!,%&/!;!,,:/*=}!/;%//!^$:;:/#*&$!$;+/*^$;:#+#*}}^:%=^%^};::;#%}=!_;,/&#=;:+,#+!!!#%;#/^!$#:;#/}%%$%./+=*;+,.#+}%!=/:/^^&%}:;!^}&!=%#^,^&;!+_#*&/!!%#/;^/;!:$/;}+_*%$^.^+;*:$#:/^!%:}/:^^;%:=/:},+&%=/_^,:&:=#*;;!/,!/#,;;/#!#}!.!+%*.$^:;+:*#$}_%^%%/}_:;,:%#}}_!.%&/=^_$,:/*=}&*;%//!^#;.!/#!}$!.%+/%;$;.:^%*}!::%^/%^=:::^#&&=!%&,/&^=;_#;,&}!+#%;//^!;#:.}.**!$,./*%*;$:.#+}%!}%:.^^%;}:_}^}^!=%_/,_&;_/_#%}/!&%#/;^/$!::/;}!!*%}^.^+;%!$#!:^!%%}/#^^;%:=%:},^&%!*_,;:&:=##+;!&:!/#^;;+#!##}.;+%%^$,.;+:%}$}:!^_%/$}:;^:%#}}_!,%&:=^#*,:&}=}$!;%//!_#;$./#*/$!:/+/*^$}.:#;*}}!:%;/%^};_!^#&/=!_=,+/;=;_:;&&}=;#%;//^*:#:;#+^*!+/./+^*;}#.#+}%.}%.#^^%;}::#^}&!=;_/,=&;=#_#;}/!!%#.;^:*!:$%;}^%*%$/.#+;%!$#.}^!/%}/:^^}%:=%:},$&&!^_^,;/*=#;!;!/%!/$;;;/:*/#}!:+%*/$^::+:*#},:!+:%/}^:;^:%#}}_^,%&$=^_:,:/#=}#!;,//::#;.!/#%!$!.%+:*^&#.:+#*}!!:%^/%#};_!^#.&=!#/,/&^==_:_.&}!!#%.^/^!;$%;#;_*!$%./^;*;$::++}+$}%:/^^%;}::#,/&!=__/,;&;!:_#,}/+!%%,;^/}!:=#;}+!*,$/*^+;*%$##}^!%%}.:^+,%:.#:}:!&%=/__,;&/=#^};!,%!/#^;$/:+}#}*$+%//$^.;+=*#:.:!.}%/*^:;^:&*}}/*,%,!=^};,:&#!&#!&=//.&#;_:/#!}$+.%=/*^^+.:;#*}}!:,^/;+};+:^#+}=!_%,.&^;}_:%#&}&!#%;//_!;.&;#=}*!}/./+^*}$:+=+}%!}%#/^^%;=!:#,/&!*$_/.^&;=:#%,}/^!%/$;^+;!:##.&+!;^$/.#+;%#$#.}^^%%&+:^^;%:}#:},!&.=/_^,;&:=#_};!/%!##^;;/:!$#}#!+%*/$}.;=/*#:$:!^%%/}^:}^:&/}}_%,%//=^_;,=&#!/#*;;//!^#;;:+%!}$!.%+/*^};.:+#%&}!:^^/%#};_#^#%}=+_%**&^=;_:,#&}!!#,;//^!;#:;#^!*!$%..+^_*$:.#+}&%}%:/^_%;+/:#^}&!*%_/,^&$=:#*,}##!%$^;^/;!=##*:+!*%$/:;+;*:}*.}=%%%}/:^;;%:}#_&,!&,=/_.,;/#=#_};,/%!.#^;;/:*}#}.!+:*/._.;+:*#=!:!^%%$}^_%^_%#}}#%,%&/!!_;;%&$=}#!;%//!^#=;:+^!}$!.%+/*^$;.=+#*}}!:/^/&;};::,*%}}*_%,/&^!:_:,#/&!!+/;//^!;}:;#/}*+$%..+^*_$::}+}%!}.:/^_%;}::#;!&!=%_#,^;}=:_#,}+%!%#/;=/;=*##;}+!%/$/.^^%*:}&.=^!%%}/:^^;&*}#_;,!&/=/_^,;&:!*_};,/%!^#^.:/:!#$&.!.}*/$^.;+:*#$}:+^%%/}^_%^:+#*^_!,,&/_!_;%:&#*!!,;%/:!^#$;:/#!}}%.%+/*$$;._+$*}}!_/^/%^=!::&.%}=!_%;^&^=;#&,#%#!!#%;//^!;#:.%/}*.$%.^+^%;$:.#^&%!_/:/^#%;*::#^}&+=%$.,^##=:}#,}/!!,#/+#/;_:##_}+!*%$..^^.*:,:.},%%%}/:#^;}$}#:},!+%=/_^,}&:!%_}}$/%%/#^;;+!!#$/.!;;*/}^.;+:%*$},#^%%:}^$;^:%#=&_!^}&/:^_;::&#=}#+;%,+!^#$;_,#!}$!.,+/}=$;/:+#*}}!:%^:%^=.::^#%}!%_%,/&$=;_=,#&}!!$/;//^*!#::+/}*!$%:^+^*;}&.#/*%!}%:/,;%;}:_^^},$=%_/,^&;=:_#;+/!!##/;;/;*###;}+;*%$..^+;*:}}.}^!%_}/=*^;%:}##!,!&%=}_^;&&_=#_}.%/%!/$*;;_%!##}.!+%*/$^:!+:%,$}:%^%&^}^:;,&%#=&_!,%&/!;_;,:/^=}&&;%//!^$:;:/#*.$!./+/*^$;:#+#*}}#:%.}%^};::^#%}=!__,//%=;_#,#+!!!#%;}/^!$#:;#/}%%$%./^**;#!.#+}%!=/:/^^&/}:+,^}&!=%#^,^&;!,_#_;/!!%#/;^/;!:$^;}+$*%$^.^^:*:$#:.^!%,}/:^^;&#}#:},#&%_:_^,;&:!}_};!/=!/&$;;/:!#}!.!+%%%$^:!+_*#$}:!^%%/=*:;,;%#=!_!;/&/=^#/,:/*=}#!;%+^!^#;.,/#*^$!.%+/%;$;.:^:*}+!:%^/%^=:::^#&$=!/%,/&^=;_:,#&}!##%.&/^!:#:.}/}*!$=./+_*;$:.#,!%!}%_%^^:=}::#^}/%=%_/;+&;=,_#,}/!*/#/;^+;!:!};}+!*%$/.^+;%,$#:}^!%/}/_;^;%:=::},+&%=/_^;:&:=##$;!,,!/#^;;+#!##}:!+%&_$^.;+:%}$}:!,&%//^:;^:%#}}_!,%/%=^#.,:&}=}$%;%//*+#;;=/#!}$!:/+/*^};.:/**}}!:%,^%^};__^#!.=!_%,//;=;_:;}&}.,#%;//^!;#:;#+$*!}/./+;*;}#.#+}&!}%:.^^%;}:_}^}&!!&_/+;&;=:_#.!/!!%$^;^/_!_##;}^%*%$/:.+;^/$#.}^!%%}/:^,;%:==:},%&%!^_^,;/_=##&;!/%!/$;;;/:*}#}:/+%*/$^::+:*#=*:!!_%/}^:;,#%#}}#/,%.#=^_;,:&#=}#!.&//*:#;;#/#%!$!.%^^*^$$.:+#*}=%:%^/&.};#_^#%}=!#/,/&^!#_:.:&}!!#%.^/^!;$=;#+;*!$%./+^*;$::}+}&+}%:^^^&:}::#;*&!=,_/,^&;!#_#,}+/!%$.;,/;!:$};}+!%,$/*,+;*:$#_!_+%%=::^!^%:}#:},!&%=/#.,;+!=##!;!+/!/#^.#/:**#}.!+%%^$^.;^=*#.,:!^%%/=;:;^:/%}},/,%&/=^#:,:&#*+#!#,//!^#;;:/#!}}/.%^_*^$:.:^}*}}!_,^/%_};::^#/!=!_%;:&^&._:,#&}*%#%;/+$!;%/;#/}*!}/}.+^&!$:_&+}%!}%:/^^%;==:#;^&!=/_/;;&;=:$%,}/+!%#/;^+:!:##:++!$*$/.^+;%#$#.},;%%;}:^^;%:=}:},!/_=//^,;&:=#_};!/%*:#^:*/:!}#}:%+%*/}$.;+=*#$}:!,/%/}^#!^::%}}_!,%/^=^_;.&&#!:#!;%//*;}*;:^^!}=&.%+/*^$;:!+#&+}!_#^/%;};_##.%}!;_%,.&^=;_:;}&}!!$_;/.^!;#:;#^!*!$%:}+^*#$_.#+}&%}%:/;*%;=$:#^}&!=%_/,^+!=:$,,}/%!%#/;^/;*!##:^+!*&$/:^,}*:}*.}:.%%}::^,:;%}#_&,!$+=/_^,;&:=#_};+/%!.#^;;/:*}#}.!+,*/#%.;+:*#$}:!^%%.}^:$^:%#}}#%,%&/=__;+*&#=}#!.///!^#$;:*^!}$!.%^^*^$;:!+#&/}*:%^/%^};::,*%}=+_%,:&^=}_:,#/&!!*,;^/,!;#_;#+%%+$%./+^^$$#.$+}&%=&:/^_%;,#:#^}&!*%!$,^&$=:#*,}/&!%$^;^/;**##%}+!*%$/.^+;*:}*.}^,%%}^:^,:%:}#_/,!}&=/_^,;&:=#_};+/%!.#^;}/:*}#}.!+.*/!:.;+:*#$}:!^%%.}^:$^:&&}}#%,%&/=$_;,=&#=}#!.///!^$!;:%$!}$!.%^^*^$;:&+#}=}!:%^/&;!*::,^%}=._&,/&^=;*!,#/+!!##;//;!;#:;#/}*+$%._+^*.$::}+}%!},:/!,%;}::#;!&!=%_:,^&$=:_#,}+%!%#/;$/;&.##;}+!%/$/.^^!*::#.}^!%%=^:^^;&&}#_,,!&%=/_^,;&:!%_};./%!^#^;;/:!#$&.!+/*/$,.;^#*#$}:+^%$*}^:;^:&}!,_!,;&/;__;,:&#=}}=;%/.!^#:;:/$!}}%:&+/*_$;%#+#*}}!_/#%%^}=::;_%}=!_%,/&^=;_=,#/&!!#.;//^!;#:.*/}*%$%.++^%:$:.#^&%!&,:/^^%;=#:#^}&^=%}%,^&;=:_#,}/!!,#/;;/;!_##.%+!*%$/.^:+*#$$.}^!/%}/:^^;%_}#:},!&:=/_^,;&#!^_};!/%+;$*;;/:!#$=.!%}:}/$$/^_==;/*::.=:}::;^:%#!..=/$}!+}_},:&#=}*&_#:+#,$+,}$!!}$!.%+/*^$;:%.#_$};:%^/%^!}:.%__!+_=$^;};#/#!,#&}!!$$;}%&:;&+$;/%*+$%./+^&.$},.!*;:_&:#^^%;}:_$,}!_;:%$_%/;$,,#,}/!!%#/;^/;&!!#!}^%*%$/.^__,,&;$=:%+#!+;^,^%$:#.:+!!=$!,*&.}&!=_};!/%*^$,;;/#!#$!.!+%*/$##/+:*}$}:/^%%+}^:.^:&!!&_!,%&/=:_;,_&#=}}!;%//!^#.;:/#!}}%:&+/*;$;:!+#*}}!:%.$%^}_::^#%}=&_%;/&^=;_$,#&=!!#&;/+;!;#:.!/}*+$%./+^%:$:.#^&%!}#:/^^%;=#:#^}&^=%_,,^&;=:#},}/!!.#/;=/;!:##;}+!*%$;.^+=*:$}.},!%%}/:.^;&*}#_%,!&;=/_^,#&:!#_};*/%!/#^;#+=!##}.!^%*/$,.;^#&+$}:/^%%;}^:;^:&#*/_!,+&/=}_;,}&#=}}=;%/^!^#:;:/$!}$!_%+/*^$;._+#*}}!:%^/%^};:#^}%}=!_%^$&_=;_:,#,_=};#%,_,/_#:;#/}*!$%./+^*;=;.#+}%!=/_$^^%:}::}^}&!=%#^;=&;=$_#;!/!!%#/.;+.!:$!;}+**%$/.^+}%/$#:&^!%%}/:,^;%}}#:};#&%=/_^,:&:=#_};!+}!/#^;;/:!##}.!+%&!$^.;+:*=$}:!^%%/!%:;^:%#}=_!,%&/=^},,:/!=}#%;%/+!^#}:,/#!}$!.}+/*,$;._+#%%=+:%^/%^=/::^$%}=/#,,/&^=;$/,#&=!!#;.*/^!;#::^/}**$%.++^*#}=.#+}%!=#:/^,%;=!_.^}&*=%#},^&.=:_#,}//*,#/;^/;%/##;=+!*%=}.^+#*:$}.}^&%%}/$!^;%=}#_*,!&/=/_#.+&:!!_}.+/%!+#^;$/:*!}&.!+%*/}_.;+_*#}%_+^%%/}^#%^:%$}}_!.#&/=:_;,#&#!*#!;%^}!^#$;:/=!}$%.%+:%&$;.}+#&;}!:&^/%_};:};*%}=!_%;}&^=._:;!+&!!#%;/^*!;#_;#/}%;$%.;+^*;$:.#+}%!=.:/^:%;}_:#^}&!=%$&,^&#=:_},}/!!%#/:^/;!:##;=+!*%$/.,+;*:$#.}^!%%}/:^^=%:}#:},!,^=/_^,;&_=#_};!/%!/#^;;/:!##}.!+%*/$^.;+:*#$}:!^%%/}^:;^:%#}}_&,%&/=^_;,:&#=}#!;%//!^#;;:/#!}$!.%+^*^$;.:+#*}}!:%^/%,};::^#%}=!_%,/&^=._:,#&}:}#,;//^!;!,..%!_+/_.;+^*;$::}^=%!}%:/^,%;}::#^}//=%_+,^&;=:_#,}/!&*#/;^/;!###;=+!*%=/.^+;*:$$.}^!%%}/:^^;%:}$:=,!&%=/;,,$&:=#_}_$/!#}^.=.+%!##}.!+%%_$^..+:*#$}:!^%&^=,:;^#%#}=_!,%&/=##%,:&==}#!;%/+!^#:;:/#%:$!.%+/*,$;.:+#*}=#:%^/%^};::^#%}=!}*,/&;=;_#,#&=!!#%:&/^!.#:;}/}*!$%./,^*;$:.#+=%!}%:/^,%;}::#^}&/=%_/,^._!^_#,}/!&^#/^&}%,}!$:%&&_!/$}&,%;%}*.}^!%%*+:^&&$^+;,=,#&%=/_^:}/;#/^*}/,;**:/&;#:+,$:&.+#*/$^.;.!%:_&&:$&^^=:;#*..#==_!,%&/!;#.,:&#=}#/;%//!^#}_+/#!}$!.^+/*,$;.:+#%%=+:%^/%^}#::^$%}=/#,,/&^=;#,,#&=!!$/.+/^!;#:;=/}*!$%.:;**;$:.#^^%!}&:/^^%;}}#*^}&!=%_#,^&.=:#!.&/!!%#/.&/;!_##:!^**%$/.^+.*:$#.}^^/}}/:^^;&,}#:=,!&&=/_:;$&:=#_};$/%!+#^.:+_!##}.!+/*/$^.;,:%=$}:!^%%/}^:.^:%#!%_!,&&/=,_;,:&#=}#,;%//!^#:;:/}!}$!__+/*^$;.:+#*}}!:%;/%^};::^$%}=!_%,/&^=;_:,#,/!!#%;/%:*!#:;#/}^%$:/._+*!,_$;/+:+}.:/^^%;&##_/$_#/%_;&&$:=:_#,}/!!%#/_/;;^;$;;}+!*%**.^%&_//!$^,.=^;/%^_+&^/&:},!&%=/_^_;;$&#^#;^/%!/#^}^#*},;}&&;_*;$..;+:*#*+:/&=:=}#:;^:%#!++;+$,^::$}^}/,=}#!;%;/!^./&^#&/^$!^$!!;%*+&.+=*}}!:%:/&:_=}!,%%}=!_%=;*:*!}$;:;;%,#=;//^!;}^,=*!;}*#_++^$&^^};,_!#._%/,%%;}::#_$+:$%+%#;%,_#%__;%;:!%;!=/;!:##;}+!+%%_$^::*:$#.}^!%%}/=_:;/:}#:},!&%=/_^:$,:#*_};!/%!/#^!;;:/#=$.!+%*/$^.;$:,&*}/}^;%/}^:;=&;;*%;*#^&/&:#/,:&#=}!/:}/}}%&#=$;&!$.}%^_=/#./.}+#*}}!=^;/=/,//%^#%}=!_%,/&^/%=:#^//!!#%;/#^#.$}^*%^}*}+.#+^*;$:#%+$$=^/!=_**#.#*&,&&!=%_/#+/_:#*.,/=^!%#/;^/;!:##_;.!$&$_.^+;*:&!:}*!,;$}/_:,&$=%:},!&%*&&;.$=%=}%./+/%!/#^;;/:/#%!$!.!*/$^.;+:*#$}=,:%/_}#:;^:%#*!&;.*}/$;=$$$/%=}#!;%=#:!_&_}#%:=&&.;+/*^$;/,}*=#^_$/#;*==%::^#%}*/_=&}$$//=.;#!=.}&._:+;!;#:;#;/*}.:&}#/+$}&;!!$.=*::}/,$:^}!!;$*!#$_;,^&;=:=};,*%:$.!;#/;!:##$_$!_*+./&_.*&}^.}^!%%=:_/*^#$+^}/;+*&:!%==&/&=#_};!.;+.};##,%!/$;.#/##_$#.;+:*#&!}^;!%/$!,.}=&/}}_!,%;%%/.}!+,#=}%.$,+_!}#;;:/#+!*_$&,+%}#=;$&*=%}!:%^/%^};^:_$^}//_;,/&^=;&./}!+/_;,$!}+!##:;#/}/^}!,&=:_,}+.#+}%!=:.**$:_/}#_+}}!,&!/.&&#!!_#,}/!#=,*:.;,*;/!==+/*%$/.^:%,}%=}%+&%:}/:^^;^}*!;/=$;.!%,:=/#:!^_};!/%//#.+%}+;!*;.!%^_=+,:^^!*#$}:!.!*$$+^&/*%&*=_$,%&/=^}#,:*.:;%;#,/}}+,.=:.&%__;/:+:*^$;.:_^}^/,/.:#^%,%_*^#%}=!!/.;=_+#$./:::.=#%;//^*:$_;#/}*!$#./+^*;}!#;+}%!}%:;^^%.}::$^}&/!,_/,^&;=}_#,=/!!^$.;^/;!:$};}+**%}^:,+;*:$##*^!%%}/:#./%:}#:};%&%=+_^,.&:!!$&;!/%!/$;;;/_!#}!:*+%*/$^.#+:*#$}:^;$%/}^:;,+%#}=_!,%&/=:#$,:&#=}#_;%/+!^##.=/#!}$!:/+/*,$;:#^$*}}!:%,#%^};::,}^+=!_&,/^#=;_:,#+!!!#%;^/^*!#:;#/}%%$%./+.*;}..#+}%!}%:/^^%;}::=^}&%=%_:,^&;=:_#*_/!!&#/;,/;!}}*;}+!*%,*.^+.*:}}:=^!%%}/:=^;%:}#_/.#&%=/_^;}&:=$_};*/%!;$_;;/:!#}/.!+&*/$::$+:*#$}_$^%%+}^_:,_%#}}_!;:&/=^_;;#,&=}#*;%/+!^#;;:+}!}$!./+/*#$;.:+#&!}!:%^,%^!^::^#%}=!_%,/&^=;_$,#/!!!#;;//^!;#:%./}**$%.++^*#}=.#+}%!,=:/^,%;=#_$^}&!=%$,,^&;=:#%:./!!%#/:}/;!_##;}+!*^}..^+;*:!/.}^*%%=^_,^;%:}##^,!&%=/#;:#&:=$_};%/%!/#^.:/:!#$!.!+$*/$^.;^#*#$}:&^%/*}^:;^:%#}}_!,%&/=._;,#&#!/#!;%//!^=!;:/$!}$!.%+;%_$;.:+#/^}!:&^/%:=$::^#%};$_%,+&^!:#_,#&}!!#^;//^!;$!_,/}*!$%#^+^*.$:.#+}%/=,:/^^%;*#:#^=&!!/#+,^&;=:$/,}/!!%$^_$/;!_##._+!*%$/:;+;*:$}.};#%%}/:^,:%:}#_*,!+$=/_^,;&:=#_};!/%!,#^;:/:*%#}.!+%*/,&.;+_*#$=:!^^&.}^:;^:#.}}_*,%/^!,_;,:&#%##!;%//!#=&;:/#!}!$.%++*^$;.:^!&&}!:%^/^&};:_^#/!!*_%,/&^*!_:,#&}*%=^;//,!;=:;#/}*!}/./+^*:$:_#+}%!}%_^^^%;}$:#;;&!=%_/,^&;=:_#,}/&!%#^;^/}!:##;}+!/=$/.,+;*:$#:%,+%%}/:^:+%:}$:},//,=/_^,;$,=#_=;!+/*+#^;;/:%}#}.!+%*:!*.;+:*#%+:!^&%/}^:;^}/*}}_!,%,_=^_.,:/}!=#!;%//*}#;;:/#%!!,.%++*^==.:+#*}=%:%^/%;};#_^#%}=!#/,/&^=__:,=&}!!#%;//^!;#:;#+**!$/./+#*;$:.#+}_$}%:+^^%.}:_!;&&!=%_/*&&;=__#.!+*!%#/;^,+!:##;}+^&}$/.^+;^+$#.=^!%&}/::,$%:}#:}__&%=+_^,#/==#_};!.+!/#,;;+#*$#}.!+%%#$^.;+:%}*%:!^&%/==:;^:%#!!_!,%&^=^#_,:&#=}$%;%//!.#;.#/#!}$!.%+/*^$;.:+=*}}%:%^:%^};::^#;*=!_&,/&^=;_}.*&}!!#%$,/^!.#:.!^&*!$%./=&*;$_.#,!&*}%:/^^+:}::#^}&^*}_/,^&;+*_#,=/!!&#/;:+$!:##;}:,*%$+.^+#%=$#.}^!;!}/:,^;&#=$:},!&%!#_^,;&:!}=+;!/&!/}};;/:!#}!.!+%*^$^#_+:*#$}_%^%%/}.:;,_%#}}_!,%&/=^_;,:&==}#%;%/:!^#;;:/#:_$!.&+/*,$;.},**}}!:%!*%^}.::,}&==!_%,/&$=;_:,#//%##%;//^^:#:;$/}**$%.;^_*;$:.##!%!}&:/^:&$}::#^}.:=%_+,^/:!__#,}/!*:#/;^/;*#!!;}+**%};.^+;*:}}.}^!%/}/#%^;%:}##!,!&%=,_^;}&:=#_};!/%!/#^;;/$!#$!.!+;*/$^.;+:;^$}:*^%%/}^:#,=%#}}_!$#&/=,_;,}+*=}#!;%}*!^#.;:+}*=$!.%+//:$;.:+#%/!_:%^/%^+#::^$%}=!_%,;/_=;_:,#_%!!#&;/+;*.#:;#/}%;$%./+^%:**.#+=%!!#:/^^%;=#:#^}&%=%$&,^&;=:#},}/!!+#/.^/;!:##;}+!*%$/.^+_*:$}.}^^%%}/:^^;#,}#:=,!&&=/_:;$&:=#_}*$/%!+#^.:+_!##}.!,^*/$^.;^!/,$}:!^%:,}^:.^:%#}}_/;,&/=^_;=$&#==#!./++!^#;;:+^!}$!.%+:/*$;.:+#..}!:&^/%^};:};*%}=!_%}=&^=._:;!+&!!#%;/#.!;#_;#^!%*$%./+^&!$:.#+}&%*^:/^,%;==:#^}&!!/_/,^&:=:=*,}/!!%$^;^/;!$##.&+!*%$/.^+;*:$#.}^&%%}^:^^}%:}#:},!_+=/_,,;&:=##%.+/%!/#^!_/:!$#}./^,*/$^.;=,*#$=:!,/&+}^:;^:&;}}_!,%&:%*_;,:&#;_#!;&//!^#;;}^*!}$!.%}**^$..:^}%=}!:%^/&}};::^#/!%,_%,+&^%*_:,#&}*%#%;//;!;}=;#/}*!}/./+^*_$:_.+}%!}%:/^^%;}::#,*&!=/_/,#&;=:_#,}$$!%#+;^/.!:$!:&+!*%$/&&+;*_$#_!,*%%}/:^;}%:}#:},^+}=/_^,;#_=#_=;!/&!/#:.$/:!##}%*+%*+$^.#^=*#$}:!=:%/},:;,#&$}}_!,%/#=^_;,:/}&+#!;&//&,#;;:/#%!$!.%+^*^!,.:+#*}=%:%^/%.};$+^#%}=!_%,/&^=;_:,=&}!%#%;:/^!;#:;#}_*!$&./+,*;$}_*+}%!}%/*^^%.}:_},=&!=%_/;}&;=:_#.!+.!%#+;^^&!:##;}^%%_$/.;+;&*$#.}^!&/=$:^^_%:=::},!&%=/_#,;&:=##*;!//!/#^:,/:!##}.%+%*/$^.;,:*#$}:!^&%/}^:;^:%#}}_!,%&/=^_;,:&$=}#!;%//%^#;;:/#!=$!.%+/*^$;.:+#%*};:%^/%^$%:}^#%}=!}%,,!!:*!.;!&}!!#%_&+:}+^^#,+**!$%./.^%;:+%#^/%!}%:/:^&,#+/#}*^:}^#!,^&;=:=^;#*#.!!##^&&#=^_$#,*%^,^.^+;*:$#.}^!*%%&./^;%:}#:}+$&%=/_^,;&:=#%}#!^&!/#^;;+#*$#}.&+%*.$^.;+:*#=!:!^+%/}.:;^_%#=/$_,%&,=^_=,:&$=}#!;%/;*_#;;:/#*+$!.&+/%;}..:+=*}}+:%^/%^};_#^#&*=!_+,/&,=;_:._&}!&#%;^/^!;#:.}^,*!$+./+#*;$:.#,!+:}%:;^^%=}::#^}/%=%_/,_&;!!_#,}/!!%#/;^/}!:##;}+!*%}^.^+;%*$#:/^!%%}/::^;%:=*:};$&%=+_^,;+^=##,;!/^!/#^;;+#+:#}.:+%*;$^.;+:&#$}:!^#%/=!:;^_%#!}_!,%&==^_;,:&==}#!;%//*&#;.%/#!}$!.%+/*^}^.:^/*}}!:%^/%^};_+^#&#=!_/,/+^=;_:;,&}!_#%;^/^!;#:;#+.*!$/./+;*;$:.#+}%_}%:=^^%_}:##^}&!=$_/;*&;!%_#,}/!!%#};^/:!:#};}+!*%$/.:+;%&$#:;^!%%}/:^,*%:}=:},%&%*/_^,;&$=##,;!/:!/#:.,/:**#}.$+%*+$^::^_*#}&:!^,%/}^:;^:+*}}_+,%&+=^_#,:&#*$#!;^//!;#;;:/#!}=!.%+/*^$..:+#*}}!:%^/%^}.!_^#%}=!,/,#&^=;_:_$/;$#^$=_;%*,:!/&+&*!$%./#_%,:&*$,}.#};:/^^%;^.%=;;&_,*!;/^&}=:_#,}:/%}:+%::_&#;$.^+!*%$/$:_//;}$:^/#}}.;%_^}%:}#:}$;+:$+/=$*/+/=#&;!/%!/&_}%:.^}*:!^;,*/$^.;#*+!$&+%$;%%.:*$};+.$.^$}%^&_*,.}},}!+,_=;,$!}/$*/;.*+;}$#^^}+.:=!.$=^,.=^,#=$_*&+;,&$_$/&#%*+.^*#.=%;$,+_$:/^$/$+;#/}*!}_.}%%_!/__=^_=!.;*/_*$.}::#^}&!=%_/:},;=%_},}/!!%&&=.!:*!##;}+!}^%*.!&$+%+!/,^^%%}/:^,*:,+&/*/,,=_:#^,;&:=#*}.:!,,!$:/*:#%#;}!*^$._/&_.%%;}$^::^%%/}^}$.%%!.!%!_,&!,*%$;=_%!&#!;%//,.*;#$^=*%.:.%+/*^$;.:.#,&%!+:^:%^};::&::*}^^+.#^_/,#!,#&}!!*^_$,^.!#%}=^_*/$%./+^&&$^,%=:+.}%:/^^%;}::#_&,!%;_;,^&;=:}$,:*$.}_;;#/;!:##&:;$;}#$.,_/#^$#.}^!%%}/%^_,^:#^_%,!&%=/%&#&,#%*#=;!/%!/#^;;/:/*!},:+;*/$^.;./^#;_,+#*;&;&:;^:%#}}_!,%,#&^=&;%&#=}#!:;/&#+/:=+.,!%;%._+_*^$;.:,.%+::+%#}^_=#;/,!%}=!_%#&,^%}}&/,/%!!#%;/_&%$#!&=}&*^$%./+^$/*,=_;^+&!&=#^#%;}::#$&^;=^;=*._:*:_#,}/!!%#/!^.+/::+;}+!*%$/.^+;+#*#^;^!%%}/:^^;%:*;}}/_&;=/_^,;:*%=};./#};/&=;.^_*!#}.!+%;,}},,}..^$}:!^%%/}^};__^#%._&,%&/=^$:;,**&$#^;%//!^%$:$%/:!!;;#$+%!$;.:+#&%}!,=}}.!%$#*//#}^!,/,;&^=;_:_!&:$^+}/}/^!;#:;#%/}}&/$+.^%%$:.#+}&,$!+#}_,%%__!/#$*^%&=,:&;=:_#;$/:#=,/#_/}!:##;}#_$#%;:^./!:=/:/^!%%}/!.=$;%*$_;!#+.=:_^,;&:#:&///_+=*;/,%+!!##}.!^#*/_&&,#}+&,$:,^%%/}^#,^:!^.:*:_;/.#__},:&#=}%;},.=+^*+#^$,*/$!.%+/}*^:!=*%%+#,%;^:%^};::;}$^:,/+$^;.,$__,#&}!!=#:_/#!;#:;#!*;+_^=;^.#.#/:%+}%!}%#+!_=&:=!/;&:+=%_/,^&;=:_#.};!^:#:;^/;!:*./$&!+#&^+&%}%*$#.}^!^*}/;!*/./&%#&;$&+=/_^,;^,=,;,/^/}!/#^;;;#+;=,.$%}$,,$$^.$^%=.;}&$%,}^:;^:^#!%;,:&&:=^_;,:=$,_!/.._=;*=,;:/#!}$!.%+/^,*;};^**}}!:%$.++=*;_!#$%=^_%,/&^^=$%,/^::+/!:*+%!;#:;#;&*=:=&__:+$}!,#*!.!%}_=!$%;}::#^}&!,%!/_^%#!!_#,}/!$$:+^+^^*,;}#$++*%$/.^.#/^#&&$_$/}}}:^^;%:%!:}/$#},*=.;+*;:%&$*$/%!/#^;;/:;#*^$!+^*_$^.;+:&*$}^:=$;}%__#+#%#}}_!,%&/=^!__:_*=}#!;%//!^!;$};#=;$^.%+/*^/_/,,!,/:$!+,%%#};::^#&:=%_;.^&!;*;_;%&}!!#%:^+/$^,&$:;+,*$%./+^*;$:.#.=^!/!::^^%;}:$*#/##=,%./%+.!!_#,}/!^:}=^$}:^=}^^#+!*%$/.^+;*:=/$}/=%:}/:^^;&==_;_*,;,&^#:+_^+!!_};!/%,*}%^#}%#.$/.!+%*/!+^%+^*=%=;,&%%.}^:;^:;}&%#,^%=$.+#&,:&#=}$+.*%*:$%!#%+==&,^!!.%^.$=.:+#*}&/=!;!%_.*&}=,$+=!_%,/&^=;_:##,}}$#%;//^!;#:;#;.+!$../+^*;$:.#*},%%%^!^$%;}::##$+}}=;#%^:&$$+},}/!!%#/;^/;+;!#+=+!*%$/:;;}*:$$.};}%%}/:^;;%:}#:=,!&&=/}&,;/#=#_};&/%+=#^;;/:!##}.!+&*/$..;+#*#$}:!^%%^}^:;^:%$}}#%,%&/=._;.;&#=}#!.///!^##;:+!!}$!.%^^*^$;.=+#%_}!:%^/&;};::,%%}/$_%,/&^=;_:,#/*!!#;;//;!;#:;#/}*/$%.++^*;$:.#+}%!},:/^^%;}}:#;!&!=%_:,^+^=:_#,}+%!%#/;$/;*_##;}+!%/$/.^^!*:$=.}^!%%=^:^^;&&}#_.,!&%=/_^,;&:!%_};./%!^#^.:/:!#$+.!,!*/$^.;^#*#$}:;^%&/}^:;^:&}}}_!,_&/%=_;,:&#*!#!;%/}!^%.;:/#!}$!.%+/*$$;:/+#%!}!:%^/%^}$::,%%}=,_%;^&^=;#!,#+#!!#%;/+;!;#:.&/}^:$%./+^%:$:.#^^%!=!:/^^%;=#:#^}&.=%#:,^&;=:_#,}/!!;#/;=/;!###:}+!*%$..^+}*:!_.},%%%}/:#^;/;}#:},!//=/_^,=&:*=_};!/%*^#^;;+%!#}^.!+%*/};.;+:%+$}_$^%%/}^:;^:%#=/_!,_&/=;_;,:&#=}#,;%/,!^#;;:/#!}$!.:+/*^$;.$+#&!}!:%^$%^!^::^#%}!%_%,//!=;$_,#&}!!$/;//^*&#:#,/}*!$%:^+^*;}^.#;%%!}%:/^^%;}:_+^}&#=%_^,^/:=:_#;;/!%!#/;^/;*###;}+_*%&!.^+;*:}}.}^!%}}/$}^;%:}##!,!&%!*_^.$&:=#_};!/%!/$!;;+,!#$!.!+%*/$^:!+:%+$}::^%&^}^:;,&%#!#_!,%&/!;_;,:/^=}#%;%//!^$:;:/#*.$!$;+/*^$;:#+#*}}#:%_&%^};::^#%}=!__,//%=;_#,#+!!!#%;}/^/;#:;#/}%%$%./^**;!;.#+}%!!%:/^^&&}:_,^}+$=%#^,^&;!,_#.$/!!%#/;^/;!:$,;}+$*%$^.^,;*:$#:.^!%$}/_!^;/:}#:},_&%==_^;$&:!}_};!/}!/!!;;/:!#}!.!+%%*$^#^+:*#$}#!^%%/=&:;,,%#*__!;/&/=^#,,:+_=}#!;%//!^#;.,/#*$$!./+/&^$;.:^.*}}$:%^}%^!;::^#&_=!_=,/;;=;##,#&}!}#%#//^!;#:;#/}*!$#./^!*;};.#+}%!}%:#^^&*}:_^^}/%=%_/,=&;*;_#,}/!*/#/;^+%!:!&;}+!*%}^.^+;%+$#}}^!%%}/_;^;%:=;:}:$&%=/_^,;&:=##,;!/}!/#;;;^:!##}.;+%*$$^#!+:*#$}:!^_%/}^:;^$%#!!_!,%&}=^$^,:&#=}$%;%//**#;://#!}$!:/+/*^}/.:_!*}}!:%,^%^};_,^#/.=!_%,/&^=}_:;^&}!$#%;^/^*:==;#+.*!=!./+^*;}#.#+}%#}%:.^^%;}:_}^}&!==_/#=&;=:_#.!/!!%$%;^:^!:##;}+!*%$/:*+;%;$#:!^!%%}/:^,*%:=^:},_&%!^_^,;//=#$#;!/%!/$;;;/:*,#}$++%*/$^::+:*#}::!./%/}^:;,#%#}}_$,%;!=^_;,:&#=}#!;#//*&#;;#/#%!$!.%+=*^*;.:+#*}=%:%^/&%};:_^#%}=!#/,/&^!+_:#,&}!!#%;//^!;$,;#/=*!$%./+^*;$::;+}%!}%:^^^&:}::#,_&!&%_/,^&;=:_#,}/_!%#=;^++!:##;}+!*_$/:!+;%+$#_!^!%%}}:^;^%:}#:};%&%=/#*,;;==#_};!+/!/#^.//:++#}.!+%%^$^.;^,*#%^:!^%%/}^:;^:&^}}_$,%&^=^$;,:&#!,#!;#//%}#;;:/#!}$:.%+/*^$_.:^}*}}!:$^///};::^#/!=!_%;!&^+!_:,#&}*%#%;/+&!;}#;#/}*!}/./+^%^$:}!+}%!}%:/^^%;=+:#,#&!=/_/;;&;=:#;,}+}!%#/;^+:!:##._+!+#$/.^+;%#$#.}^}%%%%:^^;%:=}:},!/*=/}!,;&:=#_};!/%*!#^.,/:!}#}.!+%*/}!.;^+*#}::!,/%/}^_&^:/:}}_!,%/^=^_;;^&#!+#!;%//*;#;;:+.!}}/.%+/*^}:.:+#%#}!=;^/%^};::^#%}=__%;%&^=:_:;}&}!!#};/^/!;#:;#^!*!$%:*+^,;$:.#+}&%}%:/,/%;**:#^}&!!/_/,^/,=:!;,}/!!%#/;^/;*^##.$+!*/$/:;+;*:}..}^*%%}/:^^;%:}#_#,!&%=/_^,;&:=#_};$/%!^#^;:/:*}#}.!^!*/*^.;+:*#$}:!^%&!}^_/^:&:}}_!,%&/!!_;;+&#!:#!.///!^$&;:^:!}$!.%^^*^$;:^+#%/}!:%^/&;};::,.%}&&_%,/&^!:_:,#/#!!}#;//^!;#:;#/}*_$%:%+^*:$:_#+}%!}#:/,*%;=&:#^}&!=%__,^/%=:_$,}/!%,#/;_/;*!##.++!%/*}.^+}*:=:.}^!%%=^:^^;&*}#$:,!&%=/#;,;&:!/_}.#/%!/#^.:/:!#$,.!_**/$^.;+:*#$}:^^%%$}^::^:%#}}_!,.&/=^_;,_&#*!#!;%/#!^}^;:/#!}}%.%+/*=$;#&+#*}}!_/^/%^=%:::;%}=!_%;^&^=;#+,#;#!!#%;//^!;#:.//}*_$%.^+^%:$:.#^,%!}}:/^^%;!::#^}&.=%_$,^/==:_#,}/!!_#/;,/;!###;}+!*%$_.^^!*:}+.}^!%%}/:_^;&!}#_+,!&%=/_^,#&:!*_};*/%!/}_;;/#!#$*.!+^*/$^$/+:*=$}:!^%%+}^_:^:%#=%_!.!&/=^_;;#&#=}#+;%;+!^#;;:+}!}$!.;+/%.$;.:+#&!}!:%^_%^&_::^#%}=!_%,/&:=;#*,#/!!!$/;//^!$#:::/}*!$%:^+^*;}!.#^$%!}%:/,;%;}:_&^};*=%_/,^/:=:_#;^/!*/#/;^/;!:##;}++*%$#.^+:*:$#.}^!%+}/::^;%=}##},!&%=;_^,.&:%#_};!/%!/##;;/#!##}.!+%*/$^.#+:%%$}:%^%&^}^:;^=%#&+_!,%&/=#_;,:/*=},&;%/+!^#;;:+!%&$!.%+/#.$;._+#%%=+:%^/%^:+::^$%}!%#&,/&_=;=.,#&}!!#;:=/^!$#:/&/}**$%./+^*#}=.#+}%!..:/^,%;}}#*^}&!=%,*,^&.=:#};=/!!,#/$$/;!:##./,_*%$..^*&*:$$.}^!%%};__^;%:}#^.,!&&=/_:;$&:=#_}&$/%!+#^.:+_!#$&.!./*/$^.;,:%=$}:+^%%.}^},^:&}**_!,,&/%#_;,:&#=}!%;%/.!^#;;:+!!}}%.%+/*#$;_;+#*}}!_/^/%^}=::,/%}=!_%;^&^=;#%,#,*!!#%;/+;!;#:.+/}%.$%./+^*;$:.#^/%!}_:/^;%;=::#^}&+=%$=,^&}=:##,}/!!,#/_,/;!}##:!+!*%$:.^,^*:$#.},%%%}/:$^;/:}#:},!//=/_^;!&:&!_};!/%*^#^;;+&!#=/.!+%*/$^.;+:%%$}:.^%%^}^_;^:%#=&_!:,&/=#_;;:&#=}#+;%.*!^#_;:+}!}$!.;+//#$;.:+#*}}!:%^_%^}$::^#%}=!_%,/&#=;_#,#&=!!#%;//^!;#:;$/}*!$%./+^*;$:");local D=((289+-0x74)+-111)local e=14 local l=o;local _={}_={[(0x2b-42)]=function()local _,r,n,o=A(G,l,l+j);l=l+g;e=(e+(D*g))%d;return(((o+e-(D)+a*(g*N))%a)*((N*J)^N))+(((n+e-(D*N)+a*(N^j))%d)*(a*d))+(((r+e-(D*j)+J)%d)*a)+((_+e-(D*g)+J)%d);end,[(113-0x6f)]=function(_,_,_)local _=A(G,l,l);l=l+C;e=(e+(D))%d;return((_+e-(D)+J)%a);end,[((0xf00/160)-0x15)]=function()local o,_=A(G,l,l+N);e=(e+(D*N))%d;l=l+N;return(((_+e-(D)+a*(N*g))%a)*d)+((o+e-(D*N)+d*(N^j))%a);end,[(84-0x50)]=function(l,_,e)if e then local _=(l/N^(_-o))%N^((e-C)-(_-o)+C);return _-_%o;else local _=N^(_-C);return(l%(_+_)>=_)and o or m;end;end,[((150-0x65)+-0x2c)]=function()local e=_[(99-0x62)]();local n=_[(99-0x62)]();local r=o;local l=(_[(97-0x5d)](n,C,y+g)*(N^(y*N)))+e;local e=_[(72+-0x44)](n,21,31);local _=((-o)^_[(384/0x60)](n,32));if(e==m)then if(l==L)then return _*m;else e=C;r=L;end;elseif(e==(a*(N^j))-C)then return(l==m)and(_*(C/L))or(_*(m/L));end;return E(_,e-((d*(g))-o))*(r+(l/(N^z)));end,[((10980/0xb4)-0x37)]=function(n,r,r)local r;if(not n)then n=_[(0x6b-106)]();if(n==m)then return'';end;end;r=Q(G,l,l+n-o);l=l+n;local _=''for l=C,#r do _=K(_,Y((A(Q(r,l,l))+e)%d))e=(e+D)%a end return _;end}local function D(...)return{...},V('#',...)end local function J()local n={};local x={};local e={};local r={n,x,nil,e};local l={}local w=((1860/0xc)-105)local e={[(172/0xac)]=(function(e)return not(#e==_[(124-0x7a)]())end),[(0x1ea/245)]=(function(e)return _[(63+-0x3a)]()end),[((-127+0xca)+-72)]=(function(e)return _[(80+-0x4a)]()end),[(776/0xc2)]=(function(e)local l=_[(-82+0x58)]()local e=''local _=1 for o=1,#l do _=(_+w)%d e=K(e,Y((A(l:sub(o,o))+_)%a))end return e end)};r[3]=_[((1984/0x3e)-0x1e)]();local d=_[(0x8/8)]()for o=1,d do local _=_[(-75+0x4d)]();local d;local _=e[_%(-0x2f+52)];l[o]=_ and _({});end;for x=1,_[(0x78/120)]()do local e=_[(0x27+(0x23+-72))]();if(_[(4/(0x68+-103))](e,o,C)==L)then local r=_[(74-0x46)](e,N,j);local d=_[(134-0x82)](e,g,N+g);local e={_[(-88+0x5b)](),_[(113-(0x97+-41))](),nil,nil};local a={[(0/0xf4)]=function()e[h]=_[(0x41-62)]();e[s]=_[(0x14+-17)]();end,[(114-0x71)]=function()e[k]=_[(41+-0x28)]();end,[(48/0x18)]=function()e[c]=_[(0x79+-120)]()-(N^y)end,[((-0x49+-48)+124)]=function()e[b]=_[(20-0x13)]()-(N^y)e[S]=_[(24-0x15)]();end};a[r]();if(_[(64/0x10)](d,C,o)==C)then e[U]=l[e[i]]end if(_[((-0x5a+224)-0x82)](d,N,N)==o)then e[O]=l[e[b]]end if(_[(0x26c/155)](d,j,j)==C)then e[u]=l[e[P]]end n[x]=e;end end;for _=C,_[(0x7b-122)]()do x[_-C]=J();end;return r;end;local function L(_,g,a)local l=_[N];local e=_[j];local d=_[o];return(function(...)local m=D local G=l;local J={...};local D=e;local Y={};local _=o _*=-1 local j=_;local y={};local l={};local e=o;local A=V('#',...)-C;local d=d;for _=0,A do if(_>=D)then Y[_-D]=J[_+C];else l[_]=J[_+o];end;end;local _=A-D+o local _;local D;while true do _=d[e];D=_[(0x51-80)];n=(10188720)while(10718/0xe9)>=D do n-= n n=(2187537)while(139-0x75)>=D do n-= n n=(2716600)while D<=(0x4b-65)do n-= n n=(6371056)while D<=(0x32c/203)do n-= n n=(1108485)while D<=(0xb4/180)do n-= n n=(3035800)while D>(0x0/19)do n-= n local _={l,_};_[o][_[N][U]]=_[N][P]+_[N][c];break end while 1765==(n)/((-74+0x702))do local _={l,_};_[C][_[N][U]]=_[o][_[N][s]]+_[C][_[N][c]];break end;break;end while(n)/((0x84d-1090))==1071 do n=(6648334)while D<=(0x77-117)do n-= n local e=_[t]local d,_=m(l[e](M(l,e+1,_[O])))j=_+e-1 local _=0;for e=e,j do _=_+o;l[e]=d[_];end;break;end while 1877==(n)/(((0x37d5-7171)-3580))do n=(3312118)while(41-0x26)<D do n-= n local _=_[r]l[_](l[_+C])break end while 2027==(n)/((3307-(0x21e6b/83)))do local e=_[U]l[e](M(l,e+C,_[O]))break end;break;end break;end break;end while(n)/(((0x196f-3288)+-0x2f))==2006 do n=(3423924)while D<=(1470/0xd2)do n-= n n=(4881911)while D<=(-70+0x4b)do n-= n local e=_[w]local d,_=m(l[e]())j=_+e-o local _=0;for e=e,j do _=_+C;l[e]=d[_];end;break;end while(n)/((0x4c063/245))==3841 do n=(426892)while D>((-0x66+231)-0x7b)do n-= n local _=_[i]l[_]=l[_](l[_+C])break end while 137==(n)/((0xa9a54/223))do local e=_[r]l[e]=l[e](M(l,e+o,_[h]))break end;break;end break;end while(n)/((0x827dc/(0x1d8-270)))==1294 do n=(3531264)while D<=((0x4+-116)+0x78)do n-= n local _=_[x]l[_]=l[_](M(l,_+o,j))break;end while(n)/((0xc19-1561))==2299 do n=(1541592)while D>(-0x75+126)do n-= n local r=G[_[c]];local n;local o={};n=W({},{__index=function(e,_)local _=o[_];return _[1][_[2]];end,__newindex=function(l,_,e)local _=o[_]_[1][_[2]]=e;end;});for n=1,_[S]do e=e+C;local _=d[e];if _[(0x34-51)]==28 then o[n-1]={l,_[k]};else o[n-1]={g,_[h]};end;y[#y+1]=o;end;l[_[w]]=L(r,n,a);break end while 3159==(n)/((0x15350/178))do local _=_[r]l[_]=l[_]()break end;break;end break;end break;end break;end while 1700==(n)/((-42+0x668))do n=(7429566)while(80/0x5)>=D do n-= n n=(5214254)while(62-0x31)>=D do n-= n n=(4456176)while D<=(117-0x6a)do n-= n l[_[i]]=L(G[_[b]],nil,a);break;end while(n)/((0x1fbf0/63))==2159 do n=(157722)while D>(53-0x29)do n-= n if(l[_[x]]==l[_[P]])then e=e+C;else e=_[k];end;break end while 1626==(n)/((0x104b/43))do local o=_[c];local e=l[o]for _=o+1,_[B]do e=e..l[_];end;l[_[t]]=e;break end;break;end break;end while 1354==(n)/((0xf83+-120))do n=(2327949)while(0xa10/(-40+0xe0))>=D do n-= n if(l[_[i]]==_[P])then e=e+C;else e=_[f];end;break;end while(n)/((179073/0x65))==1313 do n=(10371950)while(111-0x60)<D do n-= n local o=_[x];local d=l[o]local n=l[o+2];if(n>0)then if(d>l[o+1])then e=_[k];else l[o+3]=d;end elseif(d<l[o+1])then e=_[c];else l[o+3]=d;end break end while 2830==(n)/((-76+0xe9d))do local o=_[x];local n=l[o+2];local d=l[o]+n;l[o]=d;if(n>0)then if(d<=l[o+1])then e=_[c];l[o+3]=d;end elseif(d>=l[o+1])then e=_[f];l[o+3]=d;end break end;break;end break;end break;end while(n)/((-0x3e+3820))==1977 do n=(2803304)while D<=(55+-0x24)do n-= n n=(108680)while(2737/0xa1)>=D do n-= n l[_[i]]=a[_[O]];break;end while 836==(n)/((162+-0x20))do n=(14189568)while(3618/0xc9)<D do n-= n l[_[w]]=l[_[k]][_[S]];break end while(n)/((23808/0x6))==3576 do l[_[r]]=l[_[h]][l[_[u]]];break end;break;end break;end while 1772==(n)/((-0x2c+(3299-0x689)))do n=(2634615)while D<=(-0x65+121)do n-= n l[_[i]]=g[_[O]];break;end while(n)/((0xb49-1506))==1905 do n=(94392)while(137-0x74)<D do n-= n l[_[i]]=#l[_[b]];break end while 552==(n)/((-114+0x11d))do e=_[b];break end;break;end break;end break;end break;end break;end while(n)/((3404-0x6cf))==1317 do n=(1729485)while D<=((-32+0x171a)/0xad)do n-= n n=(7010352)while(112+-0x54)>=D do n-= n n=(5750520)while D<=(0x32/2)do n-= n n=(1964866)while(0x8c-(0x4e9c/172))>=D do n-= n l[_[r]]=(_[h]~=0);break;end while(n)/((273296/0xf8))==1783 do n=(1676280)while D>((0x158-228)+-92)do n-= n l[_[t]]=_[k];break end while 488==(n)/((0x2d492/54))do l[_[w]]=(_[b]~=0);e=e+C;break end;break;end break;end while 2076==(n)/((5665-0xb4f))do n=(3738267)while D<=(121+-0x5f)do n-= n for _=_[x],_[k]do l[_]=nil;end;break;end while 1157==(n)/((3297+-0x42))do n=(5403710)while D>((0x1440/36)+-0x75)do n-= n l[_[i]]=l[_[h]];break end while(n)/((0x6c7ce/(228+-0x42)))==1970 do l[_[i]]=l[_[c]]%_[P];break end;break;end break;end break;end while 3204==(n)/((330388/0x97))do n=(1290036)while D<=(0x53-52)do n-= n n=(615082)while D<=((339-0xb9)+-125)do n-= n if(l[_[x]]~=l[_[B]])then e=e+C;else e=_[b];end;break;end while 577==(n)/((1121+-0x37))do n=(148534)while D>(0x6f+-81)do n-= n do return l[_[i]]end break end while 46==(n)/((-0x3e+3291))do l[_[r]]={};break end;break;end break;end while 1276==(n)/((140529/0x8b))do n=(7595448)while D<=(-0x6b+139)do n-= n do return end;break;end while 3118==(n)/((367836/0x97))do n=(3478144)while D>(0x93-114)do n-= n local o=_[w];local e=l[_[k]];l[o+1]=e;l[o]=e[_[B]];break end while(n)/((0x7b8+-102))==1856 do local e=_[i];local o=l[_[k]];l[e+1]=o;l[e]=o[l[_[v]]];break end;break;end break;end break;end break;end while(n)/((515225/0xb9))==621 do n=(3029254)while D<=(0x89+-97)do n-= n n=(958662)while D<=(64+-0x1b)do n-= n n=(2370013)while D<=(0x70+-77)do n-= n a[_[f]]=l[_[x]];break;end while(n)/((467734/0xc2))==983 do n=(52532)while D>(136-0x64)do n-= n l[_[r]][l[_[h]]]=l[_[s]];break end while(n)/((679+-0x6c))==92 do local e=_[x];local o=l[e];for _=e+1,_[b]do p(o,l[_])end;break end;break;end break;end while 3897==(n)/(((6090/0x15)+-0x2c))do n=(12643884)while D<=(8968/0xec)do n-= n l[_[w]][_[O]]=l[_[S]];break;end while(n)/((8198-0x1041))==3132 do n=(6399510)while D>(5928/0x98)do n-= n l[_[i]][_[h]]=_[B];break end while 2690==(n)/((0x98f+-68))do l[_[U]][l[_[b]]]=_[B];break end;break;end break;end break;end while 1294==(n)/((-0x20+2373))do n=(215118)while((0xb9802/186)/95)>=D do n-= n n=(3309592)while D<=(156+-0x73)do n-= n g[_[k]]=l[_[t]];break;end while 3419==(n)/((90024/0x5d))do n=(2274756)while D>(0x77-77)do n-= n if l[_[r]]then e=e+o;else e=_[O];end;break end while 1254==(n)/(((31980820/0xd7)/0x52))do l[_[x]]=l[_[O]]-l[_[P]];break end;break;end break;end while 969==(n)/((510-0x120))do n=(2105523)while(165-0x79)>=D do n-= n if not l[_[t]]then e=e+C;else e=_[b];end;break;end while(n)/((0x74f+-112))==1197 do n=(6815680)while(5310/(0x5546/185))<D do n-= n local _={l,_};_[o][_[N][i]]=_[N][v]+_[N][f];break end while(n)/((0xc5e+-126))==2242 do local o=l[_[v]];if not o then e=e+C;else l[_[i]]=o;e=_[f];end;break end;break;end break;end break;end break;end break;end break;end while 3560==(n)/(((0xcc277/145)-0xb59))do n=(1528176)while(-0x7a+192)>=D do n-= n n=(6245096)while D<=(0x2bba/193)do n-= n n=(12011626)while(198-0x92)>=D do n-= n n=(182412)while D<=(0x2801/209)do n-= n n=(7028812)while(11938/0xfe)>=D do n-= n local _=_[t]l[_](l[_+C])break;end while(n)/(((-0x4f+75455)/28))==2611 do n=(1393198)while(8064/0xa8)<D do n-= n local e=_[r]l[e](M(l,e+C,_[c]))break end while 2479==(n)/((-54+0x268))do local e=_[w]local d,_=m(l[e](M(l,e+1,_[f])))j=_+e-1 local _=0;for e=e,j do _=_+o;l[e]=d[_];end;break end;break;end break;end while(n)/((6809-0xd67))==54 do n=(1672760)while D<=(144-0x5e)do n-= n local _={l,_};_[C][_[N][i]]=_[o][_[N][s]]+_[C][_[N][c]];break;end while 2356==(n)/((0x4290/24))do n=(652463)while((0xa8f2/250)+-122)<D do n-= n local n;l[_[w]]=_[f];e=e+o;_=d[e];l[_[r]]=_[h];e=e+o;_=d[e];l[_[x]]=_[h];e=e+o;_=d[e];n=_[U]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];if l[_[i]]then e=e+o;else e=_[h];end;break end while 581==(n)/((0x4da+-119))do local e=_[t]local d,_=m(l[e]())j=_+e-o local _=0;for e=e,j do _=_+C;l[e]=d[_];end;break end;break;end break;end break;end while 3091==(n)/(((32032/0x8)+-0x76))do n=(7430076)while D<=(-0x75+172)do n-= n n=(1972390)while(0x8d-88)>=D do n-= n local g;local D;local N;local s;local L,y;local n;l[_[x]]=a[_[O]];e=e+o;_=d[e];l[_[U]]=_[f];e=e+o;_=d[e];l[_[r]]=_[k];e=e+o;_=d[e];l[_[t]]=_[k];e=e+o;_=d[e];n=_[t]l[n]=l[n](M(l,n+o,_[f]))e=e+o;_=d[e];l[_[i]][l[_[h]]]=l[_[u]];e=e+o;_=d[e];l[_[U]]=a[_[f]];e=e+o;_=d[e];l[_[w]]=_[f];e=e+o;_=d[e];l[_[x]]=_[f];e=e+o;_=d[e];l[_[r]]=_[k];e=e+o;_=d[e];n=_[t]l[n]=l[n](M(l,n+o,_[b]))e=e+o;_=d[e];l[_[U]]=_[c];e=e+o;_=d[e];l[_[w]]=a[_[k]];e=e+o;_=d[e];l[_[U]]=a[_[h]];e=e+o;_=d[e];n=_[t]L,y=m(l[n]())j=y+n-o s=0;for _=n,j do s=s+C;l[_]=L[s];end;e=e+o;_=d[e];n=_[w]l[n]=l[n](M(l,n+o,j))e=e+o;_=d[e];l[_[U]]=_[h];e=e+o;_=d[e];N=_[b];D=l[N]for _=N+1,_[B]do D=D..l[_];end;l[_[U]]=D;e=e+o;_=d[e];l[_[x]][l[_[c]]]=l[_[P]];e=e+o;_=d[e];l[_[r]]=a[_[b]];e=e+o;_=d[e];l[_[U]]=_[k];e=e+o;_=d[e];l[_[x]]=_[k];e=e+o;_=d[e];l[_[U]]=_[b];e=e+o;_=d[e];n=_[r]l[n]=l[n](M(l,n+o,_[b]))e=e+o;_=d[e];l[_[w]][l[_[b]]]=_[S];e=e+o;_=d[e];l[_[w]]={};e=e+o;_=d[e];l[_[r]]=a[_[c]];e=e+o;_=d[e];l[_[i]]=_[O];e=e+o;_=d[e];l[_[w]]=_[c];e=e+o;_=d[e];l[_[x]]=_[f];e=e+o;_=d[e];n=_[w]l[n]=l[n](M(l,n+o,_[f]))e=e+o;_=d[e];l[_[w]]=a[_[c]];e=e+o;_=d[e];l[_[x]]=_[h];e=e+o;_=d[e];l[_[x]]=_[f];e=e+o;_=d[e];l[_[i]]=_[f];e=e+o;_=d[e];n=_[x]l[n]=l[n](M(l,n+o,_[h]))e=e+o;_=d[e];l[_[x]][l[_[h]]]=l[_[S]];e=e+o;_=d[e];l[_[t]]=a[_[c]];e=e+o;_=d[e];l[_[r]]=_[O];e=e+o;_=d[e];l[_[t]]=_[b];e=e+o;_=d[e];l[_[r]]=_[c];e=e+o;_=d[e];n=_[r]l[n]=l[n](M(l,n+o,_[O]))e=e+o;_=d[e];l[_[r]]=a[_[f]];e=e+o;_=d[e];l[_[w]]=_[c];e=e+o;_=d[e];l[_[w]]=_[h];e=e+o;_=d[e];l[_[r]]=_[h];e=e+o;_=d[e];n=_[i]l[n]=l[n](M(l,n+o,_[O]))e=e+o;_=d[e];l[_[w]]=a[_[k]];e=e+o;_=d[e];l[_[U]]=l[_[b]];e=e+o;_=d[e];n=_[t]l[n]=l[n](l[n+C])e=e+o;_=d[e];l[_[t]]=_[O];e=e+o;_=d[e];N=_[k];D=l[N]for _=N+1,_[S]do D=D..l[_];end;l[_[x]]=D;e=e+o;_=d[e];l[_[w]][l[_[f]]]=l[_[v]];e=e+o;_=d[e];l[_[U]]=a[_[b]];e=e+o;_=d[e];l[_[t]]=_[O];e=e+o;_=d[e];l[_[t]]=_[O];e=e+o;_=d[e];l[_[U]]=_[c];e=e+o;_=d[e];n=_[t]l[n]=l[n](M(l,n+o,_[k]))e=e+o;_=d[e];l[_[w]][l[_[k]]]=_[v];e=e+o;_=d[e];n=_[w];g=l[n];for _=n+1,_[k]do p(g,l[_])end;break;end while 665==(n)/(((36960/0xc)+-114))do n=(9190800)while(158-0x68)<D do n-= n local n;l[_[r]]=_[h];e=e+o;_=d[e];l[_[U]]=_[f];e=e+o;_=d[e];l[_[w]]=_[O];e=e+o;_=d[e];n=_[w]l[n]=l[n](M(l,n+o,_[f]))e=e+o;_=d[e];if not l[_[t]]then e=e+C;else e=_[k];end;break end while 2553==(n)/((0xe82+-114))do local C;local D;local n;l[_[w]]=a[_[f]];e=e+o;_=d[e];n=_[i];D=l[_[k]];l[n+1]=D;l[n]=D[_[B]];e=e+o;_=d[e];l[_[x]]=_[b];e=e+o;_=d[e];n=_[i]l[n]=l[n](M(l,n+o,_[h]))e=e+o;_=d[e];l[_[w]]={};e=e+o;_=d[e];l[_[t]]=a[_[c]];e=e+o;_=d[e];l[_[x]]=_[k];e=e+o;_=d[e];l[_[t]]=_[h];e=e+o;_=d[e];l[_[i]]=_[f];e=e+o;_=d[e];n=_[r]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];l[_[x]]={};e=e+o;_=d[e];l[_[w]]={};e=e+o;_=d[e];l[_[U]]=a[_[O]];e=e+o;_=d[e];l[_[r]]=_[h];e=e+o;_=d[e];l[_[i]]=_[O];e=e+o;_=d[e];l[_[r]]=_[k];e=e+o;_=d[e];n=_[r]l[n]=l[n](M(l,n+o,_[b]))e=e+o;_=d[e];l[_[t]]=a[_[k]];e=e+o;_=d[e];l[_[w]]=_[b];e=e+o;_=d[e];l[_[t]]=_[O];e=e+o;_=d[e];l[_[U]]=_[k];e=e+o;_=d[e];n=_[w]l[n]=l[n](M(l,n+o,_[k]))e=e+o;_=d[e];l[_[t]][l[_[h]]]=l[_[B]];e=e+o;_=d[e];l[_[r]]=a[_[h]];e=e+o;_=d[e];l[_[x]]=_[f];e=e+o;_=d[e];l[_[x]]=_[c];e=e+o;_=d[e];l[_[r]]=_[c];e=e+o;_=d[e];n=_[r]l[n]=l[n](M(l,n+o,_[O]))e=e+o;_=d[e];l[_[w]][l[_[b]]]=_[v];e=e+o;_=d[e];l[_[r]]=a[_[h]];e=e+o;_=d[e];l[_[x]]=_[h];e=e+o;_=d[e];l[_[w]]=_[b];e=e+o;_=d[e];l[_[x]]=_[b];e=e+o;_=d[e];n=_[U]l[n]=l[n](M(l,n+o,_[f]))e=e+o;_=d[e];l[_[r]]={};e=e+o;_=d[e];l[_[t]]={};e=e+o;_=d[e];l[_[x]]=a[_[h]];e=e+o;_=d[e];l[_[x]]=_[O];e=e+o;_=d[e];l[_[t]]=_[b];e=e+o;_=d[e];l[_[i]]=_[b];e=e+o;_=d[e];n=_[w]l[n]=l[n](M(l,n+o,_[b]))e=e+o;_=d[e];l[_[r]]=a[_[c]];e=e+o;_=d[e];l[_[w]]=_[f];e=e+o;_=d[e];l[_[x]]=_[h];e=e+o;_=d[e];l[_[U]]=_[c];e=e+o;_=d[e];n=_[x]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];l[_[r]][l[_[c]]]=l[_[v]];e=e+o;_=d[e];l[_[t]]=a[_[k]];e=e+o;_=d[e];l[_[t]]=_[h];e=e+o;_=d[e];l[_[r]]=_[k];e=e+o;_=d[e];l[_[x]]=_[b];e=e+o;_=d[e];n=_[t]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];l[_[i]]=_[O];e=e+o;_=d[e];l[_[r]]=a[_[c]];e=e+o;_=d[e];n=_[x];D=l[_[O]];l[n+1]=D;l[n]=D[_[u]];e=e+o;_=d[e];l[_[x]]=_[k];e=e+o;_=d[e];n=_[i]l[n]=l[n](M(l,n+o,_[f]))e=e+o;_=d[e];l[_[r]]=l[_[f]][_[S]];e=e+o;_=d[e];l[_[x]]=l[_[c]][_[B]];e=e+o;_=d[e];l[_[t]]=_[c];e=e+o;_=d[e];l[_[x]]=a[_[f]];e=e+o;_=d[e];n=_[i];D=l[_[c]];l[n+1]=D;l[n]=D[_[B]];e=e+o;_=d[e];l[_[r]]=_[h];e=e+o;_=d[e];n=_[w]l[n]=l[n](M(l,n+o,_[h]))e=e+o;_=d[e];l[_[r]]=l[_[O]][_[u]];e=e+o;_=d[e];l[_[r]]=l[_[b]][_[u]];e=e+o;_=d[e];l[_[i]]=_[b];e=e+o;_=d[e];D=_[c];C=l[D]for _=D+1,_[B]do C=C..l[_];end;l[_[U]]=C;e=e+o;_=d[e];l[_[r]][l[_[h]]]=l[_[S]];e=e+o;_=d[e];l[_[x]]=a[_[k]];e=e+o;_=d[e];l[_[U]]=_[b];e=e+o;_=d[e];l[_[x]]=_[f];e=e+o;_=d[e];l[_[w]]=_[k];e=e+o;_=d[e];n=_[i]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];l[_[r]][l[_[b]]]=_[P];e=e+o;_=d[e];l[_[U]]={};e=e+o;_=d[e];l[_[w]]=a[_[b]];e=e+o;_=d[e];l[_[i]]=_[k];e=e+o;_=d[e];l[_[r]]=_[b];e=e+o;_=d[e];l[_[w]]=_[c];break end;break;end break;end while 2319==(n)/((0x67410/132))do n=(6063900)while(0xcd-149)>=D do n-= n local D;local n;n=_[t];D=l[_[c]];l[n+1]=D;l[n]=D[_[s]];e=e+o;_=d[e];l[_[U]]=_[k];e=e+o;_=d[e];n=_[w]l[n]=l[n](M(l,n+o,_[h]))e=e+o;_=d[e];a[_[b]]=l[_[x]];e=e+o;_=d[e];l[_[x]]=a[_[c]];e=e+o;_=d[e];n=_[i];D=l[_[f]];l[n+1]=D;l[n]=D[_[P]];e=e+o;_=d[e];l[_[i]]=_[O];e=e+o;_=d[e];n=_[x]l[n]=l[n](M(l,n+o,_[k]))e=e+o;_=d[e];a[_[k]]=l[_[w]];e=e+o;_=d[e];l[_[i]]=a[_[c]];e=e+o;_=d[e];l[_[t]]=a[_[O]];e=e+o;_=d[e];l[_[i]]=_[b];e=e+o;_=d[e];l[_[x]]=_[f];e=e+o;_=d[e];l[_[w]]=_[b];e=e+o;_=d[e];n=_[U]l[n]=l[n](M(l,n+o,_[b]))e=e+o;_=d[e];l[_[U]]=l[_[b]][l[_[P]]];e=e+o;_=d[e];a[_[O]]=l[_[i]];e=e+o;_=d[e];l[_[i]]=a[_[O]];e=e+o;_=d[e];n=_[U];D=l[_[k]];l[n+1]=D;l[n]=D[_[P]];e=e+o;_=d[e];n=_[t]l[n]=l[n](l[n+C])e=e+o;_=d[e];a[_[h]]=l[_[x]];e=e+o;_=d[e];l[_[t]]=a[_[k]];e=e+o;_=d[e];n=_[x]l[n]=l[n]()e=e+o;_=d[e];a[_[b]]=l[_[i]];e=e+o;_=d[e];l[_[x]]={};e=e+o;_=d[e];a[_[O]]=l[_[w]];e=e+o;_=d[e];l[_[x]]=a[_[O]];e=e+o;_=d[e];n=_[i];D=l[_[f]];l[n+1]=D;l[n]=D[_[s]];e=e+o;_=d[e];l[_[r]]=_[f];e=e+o;_=d[e];n=_[i]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];l[_[t]]=l[_[O]][_[s]];e=e+o;_=d[e];a[_[O]]=l[_[t]];e=e+o;_=d[e];l[_[r]]=a[_[h]];e=e+o;_=d[e];l[_[U]]=l[_[b]][_[u]];e=e+o;_=d[e];a[_[O]]=l[_[r]];e=e+o;_=d[e];l[_[U]]=a[_[c]];e=e+o;_=d[e];l[_[x]]=l[_[O]][_[s]];e=e+o;_=d[e];a[_[f]]=l[_[i]];e=e+o;_=d[e];l[_[t]]={};e=e+o;_=d[e];l[_[i]]=a[_[h]];e=e+o;_=d[e];l[_[r]]=l[_[O]][_[u]];e=e+o;_=d[e];l[_[x]][_[k]]=l[_[P]];e=e+o;_=d[e];a[_[f]]=l[_[x]];e=e+o;_=d[e];l[_[t]]=a[_[O]];e=e+o;_=d[e];n=_[t];D=l[_[c]];l[n+1]=D;l[n]=D[_[u]];e=e+o;_=d[e];l[_[x]]=_[b];e=e+o;_=d[e];n=_[x]l[n]=l[n](M(l,n+o,_[O]))e=e+o;_=d[e];a[_[c]]=l[_[U]];e=e+o;_=d[e];l[_[r]]={};e=e+o;_=d[e];l[_[U]]=a[_[O]];e=e+o;_=d[e];l[_[r]]=l[_[c]][_[u]];e=e+o;_=d[e];l[_[U]][_[k]]=l[_[v]];e=e+o;_=d[e];l[_[w]]=a[_[b]];e=e+o;_=d[e];l[_[U]]=l[_[O]][_[P]];e=e+o;_=d[e];l[_[x]][_[h]]=l[_[s]];e=e+o;_=d[e];l[_[i]]=a[_[f]];e=e+o;_=d[e];l[_[r]]=l[_[b]][_[S]];e=e+o;_=d[e];l[_[i]][_[c]]=l[_[P]];e=e+o;_=d[e];l[_[t]]=a[_[O]];e=e+o;_=d[e];l[_[w]]=l[_[c]][_[P]];e=e+o;_=d[e];l[_[U]][_[c]]=l[_[u]];e=e+o;_=d[e];l[_[w]]=a[_[f]];e=e+o;_=d[e];l[_[r]]=l[_[b]][_[B]];e=e+o;_=d[e];l[_[t]][_[c]]=l[_[S]];e=e+o;_=d[e];a[_[h]]=l[_[r]];e=e+o;_=d[e];for _=_[U],_[c]do l[_]=nil;end;e=e+o;_=d[e];a[_[b]]=l[_[x]];e=e+o;_=d[e];for _=_[U],_[c]do l[_]=nil;end;e=e+o;_=d[e];a[_[O]]=l[_[t]];e=e+o;_=d[e];for _=_[U],_[h]do l[_]=nil;end;e=e+o;_=d[e];a[_[h]]=l[_[U]];e=e+o;_=d[e];for _=_[U],_[b]do l[_]=nil;end;e=e+o;_=d[e];a[_[k]]=l[_[r]];e=e+o;_=d[e];l[_[r]]={};e=e+o;_=d[e];l[_[x]]={};e=e+o;_=d[e];a[_[f]]=l[_[x]];e=e+o;_=d[e];a[_[h]]=l[_[w]];e=e+o;_=d[e];l[_[x]]=a[_[h]];e=e+o;_=d[e];n=_[t];D=l[_[b]];l[n+1]=D;l[n]=D[_[s]];e=e+o;_=d[e];l[_[x]]=_[h];break;end while 2050==(n)/((5933-0xb9f))do n=(2089907)while D>(0xfcf/71)do n-= n local r;local a;local n;l[_[x]]=_[k];e=e+o;_=d[e];l[_[U]]=_[f];e=e+o;_=d[e];l[_[x]]=#l[_[O]];e=e+o;_=d[e];l[_[U]]=_[h];e=e+o;_=d[e];n=_[U];a=l[n]r=l[n+2];if(r>0)then if(a>l[n+1])then e=_[f];else l[n+3]=a;end elseif(a<l[n+1])then e=_[f];else l[n+3]=a;end break end while 1871==(n)/(((0x3e+-96)+0x47f))do local c;local n;l[_[w]]={};e=e+o;_=d[e];l[_[r]][_[h]]=l[_[B]];e=e+o;_=d[e];l[_[x]]=a[_[b]];e=e+o;_=d[e];l[_[r]]=_[k];e=e+o;_=d[e];l[_[U]]=_[k];e=e+o;_=d[e];l[_[U]]=_[f];e=e+o;_=d[e];n=_[x]l[n]=l[n](M(l,n+o,_[k]))e=e+o;_=d[e];l[_[w]][_[O]]=l[_[v]];e=e+o;_=d[e];c=l[_[u]];if not c then e=e+C;else l[_[r]]=c;e=_[k];end;break end;break;end break;end break;end break;end while 2756==(n)/((2326+-0x3c))do n=(7901144)while(0x75+-53)>=D do n-= n n=(7278039)while(61/(-20+0x15))>=D do n-= n n=(1481244)while D<=(154-0x5f)do n-= n local n;l[_[w]]=_[h];e=e+o;_=d[e];l[_[i]]=_[k];e=e+o;_=d[e];l[_[t]]=_[b];e=e+o;_=d[e];n=_[x]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];if not l[_[t]]then e=e+C;else e=_[c];end;break;end while(n)/((721+-0x55))==2329 do n=(1524030)while(225-0xa5)<D do n-= n local n;l[_[r]]=_[b];e=e+o;_=d[e];l[_[w]]=_[h];e=e+o;_=d[e];l[_[U]]=_[b];e=e+o;_=d[e];n=_[i]l[n]=l[n](M(l,n+o,_[O]))e=e+o;_=d[e];if l[_[U]]then e=e+o;else e=_[b];end;break end while 2746==(n)/((-0x21+588))do local f;local n;l[_[U]]={};e=e+o;_=d[e];l[_[w]]=a[_[h]];e=e+o;_=d[e];l[_[r]]=_[O];e=e+o;_=d[e];l[_[x]]=_[c];e=e+o;_=d[e];l[_[r]]=_[O];e=e+o;_=d[e];n=_[U]l[n]=l[n](M(l,n+o,_[k]))e=e+o;_=d[e];l[_[U]]=a[_[b]];e=e+o;_=d[e];l[_[w]]=_[c];e=e+o;_=d[e];l[_[U]]=_[k];e=e+o;_=d[e];l[_[r]]=_[b];e=e+o;_=d[e];n=_[r]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];l[_[i]][l[_[h]]]=l[_[B]];e=e+o;_=d[e];n=_[w];f=l[_[O]];l[n+1]=f;l[n]=f[_[S]];e=e+o;_=d[e];l[_[x]]=l[_[O]];e=e+o;_=d[e];n=_[r]l[n]=l[n](M(l,n+o,_[b]))e=e+o;_=d[e];l[_[i]]=a[_[b]];e=e+o;_=d[e];if l[_[r]]then e=e+o;else e=_[h];end;break end;break;end break;end while 2473==(n)/((494424/0xa8))do n=(1188874)while D<=(149-0x57)do n-= n local n;l[_[i]]=_[h];e=e+o;_=d[e];l[_[r]]=_[c];e=e+o;_=d[e];l[_[t]]=_[b];e=e+o;_=d[e];n=_[i]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];if not l[_[i]]then e=e+C;else e=_[k];end;break;end while(n)/((0x663-862))==1538 do n=(5655856)while D>(220-0x9d)do n-= n local n;l[_[U]]=_[O];e=e+o;_=d[e];l[_[i]]=_[O];e=e+o;_=d[e];l[_[t]]=_[k];e=e+o;_=d[e];n=_[r]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];if l[_[r]]then e=e+o;else e=_[h];end;break end while(n)/(((9771-0x1320)-0x99b))==2341 do local D;local n;l[_[U]]=l[_[b]][_[B]];e=e+o;_=d[e];a[_[b]]=l[_[w]];e=e+o;_=d[e];l[_[r]]=a[_[h]];e=e+o;_=d[e];n=_[i];D=l[_[h]];l[n+1]=D;l[n]=D[_[u]];e=e+o;_=d[e];l[_[x]]=_[b];e=e+o;_=d[e];n=_[w]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];l[_[r]]=l[_[k]][_[S]];e=e+o;_=d[e];a[_[b]]=l[_[r]];e=e+o;_=d[e];l[_[r]]=a[_[b]];e=e+o;_=d[e];n=_[x];D=l[_[O]];l[n+1]=D;l[n]=D[_[v]];e=e+o;_=d[e];l[_[w]]=_[h];e=e+o;_=d[e];n=_[w]l[n]=l[n](M(l,n+o,_[O]))e=e+o;_=d[e];l[_[U]]=l[_[c]][_[S]];e=e+o;_=d[e];a[_[O]]=l[_[i]];e=e+o;_=d[e];l[_[x]]=a[_[f]];e=e+o;_=d[e];n=_[w];D=l[_[h]];l[n+1]=D;l[n]=D[_[S]];e=e+o;_=d[e];l[_[i]]=_[O];e=e+o;_=d[e];n=_[U]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];l[_[r]]=l[_[O]][_[P]];e=e+o;_=d[e];a[_[f]]=l[_[U]];e=e+o;_=d[e];l[_[w]]=a[_[k]];e=e+o;_=d[e];l[_[U]]=l[_[f]][_[u]];e=e+o;_=d[e];n=_[U]l[n]=l[n]()e=e+o;_=d[e];a[_[O]]=l[_[r]];e=e+o;_=d[e];l[_[i]]=a[_[c]];e=e+o;_=d[e];l[_[w]]=l[_[k]][_[P]];e=e+o;_=d[e];l[_[t]]=_[b];e=e+o;_=d[e];l[_[r]]=_[f];e=e+o;_=d[e];l[_[i]]=_[O];e=e+o;_=d[e];n=_[t]l[n]=l[n](M(l,n+o,_[O]))e=e+o;_=d[e];a[_[b]]=l[_[x]];e=e+o;_=d[e];l[_[r]]=a[_[f]];e=e+o;_=d[e];l[_[r]]=l[_[c]][_[u]];e=e+o;_=d[e];n=_[w]l[n]=l[n]()e=e+o;_=d[e];a[_[k]]=l[_[i]];e=e+o;_=d[e];l[_[i]]=a[_[k]];e=e+o;_=d[e];l[_[i]]=l[_[b]][_[P]];e=e+o;_=d[e];l[_[r]]=_[O];e=e+o;_=d[e];l[_[U]]=_[h];e=e+o;_=d[e];n=_[t]l[n]=l[n](M(l,n+o,_[O]))e=e+o;_=d[e];a[_[c]]=l[_[w]];e=e+o;_=d[e];l[_[t]]=a[_[h]];e=e+o;_=d[e];l[_[i]]=l[_[k]][_[B]];e=e+o;_=d[e];l[_[x]]=_[O];e=e+o;_=d[e];l[_[U]]=_[b];e=e+o;_=d[e];n=_[x]l[n]=l[n](M(l,n+o,_[h]))e=e+o;_=d[e];a[_[f]]=l[_[w]];e=e+o;_=d[e];l[_[U]]=a[_[b]];e=e+o;_=d[e];l[_[U]]=l[_[O]][_[P]];e=e+o;_=d[e];l[_[t]]=_[h];e=e+o;_=d[e];l[_[t]]=_[c];e=e+o;_=d[e];n=_[x]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];a[_[f]]=l[_[t]];e=e+o;_=d[e];l[_[i]]={};e=e+o;_=d[e];l[_[x]]=a[_[h]];e=e+o;_=d[e];l[_[U]]=_[k];e=e+o;_=d[e];l[_[i]]=_[k];e=e+o;_=d[e];l[_[r]]=_[b];e=e+o;_=d[e];n=_[t]l[n]=l[n](M(l,n+o,_[O]))e=e+o;_=d[e];l[_[x]]=a[_[O]];e=e+o;_=d[e];l[_[i]]=_[h];e=e+o;_=d[e];l[_[t]]=_[h];e=e+o;_=d[e];l[_[t]]=_[O];e=e+o;_=d[e];n=_[t]l[n]=l[n](M(l,n+o,_[f]))e=e+o;_=d[e];l[_[i]]=a[_[h]];e=e+o;_=d[e];l[_[r]]=_[h];e=e+o;_=d[e];l[_[U]]=_[f];e=e+o;_=d[e];l[_[w]]=_[h];e=e+o;_=d[e];n=_[i]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];l[_[w]]=a[_[f]];e=e+o;_=d[e];l[_[i]]=_[b];e=e+o;_=d[e];l[_[t]]=_[O];e=e+o;_=d[e];l[_[x]]=_[k];e=e+o;_=d[e];n=_[U]l[n]=l[n](M(l,n+o,_[O]))e=e+o;_=d[e];l[_[i]]=a[_[h]];e=e+o;_=d[e];l[_[x]]=_[O];e=e+o;_=d[e];l[_[U]]=_[c];e=e+o;_=d[e];l[_[w]]=_[b];e=e+o;_=d[e];n=_[r]l[n]=l[n](M(l,n+o,_[h]))e=e+o;_=d[e];l[_[t]]=a[_[O]];break end;break;end break;end break;end while 2116==(n)/((0xee7+-81))do n=(595206)while((0x1eb-303)-121)>=D do n-= n n=(3985344)while(-0x6e+175)>=D do n-= n local n;l[_[w]]=_[k];e=e+o;_=d[e];l[_[t]]=_[k];e=e+o;_=d[e];l[_[r]]=_[b];e=e+o;_=d[e];n=_[r]l[n]=l[n](M(l,n+o,_[h]))e=e+o;_=d[e];if not l[_[x]]then e=e+C;else e=_[O];end;break;end while(n)/((157080/0x8c))==3552 do n=(9777490)while D>((0x3926/77)-0x7c)do n-= n local C;local N,g;local D;local n;a[_[O]]=l[_[r]];e=e+o;_=d[e];l[_[r]]={};e=e+o;_=d[e];l[_[U]][_[O]]=_[B];e=e+o;_=d[e];l[_[t]][_[O]]=_[B];e=e+o;_=d[e];l[_[r]]=a[_[b]];e=e+o;_=d[e];l[_[i]]=l[_[k]][_[P]];e=e+o;_=d[e];l[_[i]]=_[c];e=e+o;_=d[e];l[_[r]]=_[O];e=e+o;_=d[e];l[_[U]]=_[h];e=e+o;_=d[e];n=_[x]l[n]=l[n](M(l,n+o,_[k]))e=e+o;_=d[e];l[_[x]][_[k]]=l[_[P]];e=e+o;_=d[e];l[_[t]]=a[_[O]];e=e+o;_=d[e];l[_[x]]=l[_[h]][_[S]];e=e+o;_=d[e];l[_[x]]=_[O];e=e+o;_=d[e];l[_[t]]=_[c];e=e+o;_=d[e];l[_[t]]=_[k];e=e+o;_=d[e];n=_[i]l[n]=l[n](M(l,n+o,_[k]))e=e+o;_=d[e];l[_[w]][_[c]]=l[_[S]];e=e+o;_=d[e];l[_[w]]=a[_[O]];e=e+o;_=d[e];l[_[r]]=l[_[f]][_[S]];e=e+o;_=d[e];l[_[i]]=_[f];e=e+o;_=d[e];l[_[t]]=_[h];e=e+o;_=d[e];l[_[i]]=_[k];e=e+o;_=d[e];n=_[U]l[n]=l[n](M(l,n+o,_[k]))e=e+o;_=d[e];l[_[w]][_[h]]=l[_[u]];e=e+o;_=d[e];l[_[x]]=a[_[b]];e=e+o;_=d[e];l[_[r]]=l[_[c]][_[P]];e=e+o;_=d[e];l[_[i]]=_[k];e=e+o;_=d[e];l[_[w]]=_[k];e=e+o;_=d[e];l[_[r]]=_[c];e=e+o;_=d[e];n=_[i]l[n]=l[n](M(l,n+o,_[k]))e=e+o;_=d[e];l[_[w]][_[b]]=l[_[u]];e=e+o;_=d[e];l[_[U]][_[b]]=_[s];e=e+o;_=d[e];l[_[w]][_[h]]=_[s];e=e+o;_=d[e];l[_[r]][_[c]]=_[u];e=e+o;_=d[e];l[_[i]][_[O]]=_[P];e=e+o;_=d[e];l[_[w]][_[c]]=_[P];e=e+o;_=d[e];l[_[i]][_[k]]=_[s];e=e+o;_=d[e];l[_[r]][_[h]]=_[s];e=e+o;_=d[e];l[_[t]][_[h]]=_[B];e=e+o;_=d[e];l[_[t]][_[f]]=_[P];e=e+o;_=d[e];l[_[t]][_[O]]=_[B];e=e+o;_=d[e];l[_[U]][_[h]]=_[B];e=e+o;_=d[e];l[_[U]]=a[_[c]];e=e+o;_=d[e];l[_[U]]=l[_[f]][_[S]];e=e+o;_=d[e];l[_[i]]=l[_[k]][_[P]];e=e+o;_=d[e];l[_[r]][_[O]]=l[_[v]];e=e+o;_=d[e];l[_[t]]=a[_[c]];e=e+o;_=d[e];l[_[r]]={};e=e+o;_=d[e];l[_[w]]={};e=e+o;_=d[e];l[_[r]][_[f]]=_[s];e=e+o;_=d[e];n=_[U]l[n]=l[n](M(l,n+o,_[b]))e=e+o;_=d[e];l[_[t]][_[b]]=l[_[S]];e=e+o;_=d[e];l[_[x]]={};e=e+o;_=d[e];l[_[x]][_[c]]=l[_[u]];e=e+o;_=d[e];a[_[b]]=l[_[t]];e=e+o;_=d[e];l[_[U]]={};e=e+o;_=d[e];a[_[f]]=l[_[x]];e=e+o;_=d[e];l[_[x]]=a[_[c]];e=e+o;_=d[e];l[_[w]]=l[_[f]][_[s]];e=e+o;_=d[e];a[_[O]]=l[_[i]];e=e+o;_=d[e];l[_[x]]=a[_[k]];e=e+o;_=d[e];n=_[r];D=l[_[f]];l[n+1]=D;l[n]=D[_[u]];e=e+o;_=d[e];l[_[r]]=a[_[f]];e=e+o;_=d[e];l[_[U]]=_[c];e=e+o;_=d[e];l[_[w]]=_[b];e=e+o;_=d[e];l[_[r]]=_[f];e=e+o;_=d[e];n=_[t]N,g=m(l[n](M(l,n+1,_[c])))j=g+n-1 C=0;for _=n,j do C=C+o;l[_]=N[C];end;e=e+o;_=d[e];n=_[r]l[n]=l[n](M(l,n+o,j))e=e+o;_=d[e];a[_[O]]=l[_[x]];e=e+o;_=d[e];l[_[U]]=a[_[h]];e=e+o;_=d[e];n=_[U];D=l[_[k]];l[n+1]=D;l[n]=D[_[v]];e=e+o;_=d[e];l[_[U]]=a[_[k]];e=e+o;_=d[e];l[_[r]]=_[b];e=e+o;_=d[e];l[_[x]]=_[k];e=e+o;_=d[e];l[_[i]]=_[k];e=e+o;_=d[e];n=_[r]l[n]=l[n](M(l,n+o,_[k]))e=e+o;_=d[e];n=_[U]l[n]=l[n](M(l,n+o,_[O]))e=e+o;_=d[e];a[_[f]]=l[_[U]];e=e+o;_=d[e];l[_[U]]={};break end while 2390==(n)/((4194+-0x67))do local n;l[_[x]]={};e=e+o;_=d[e];l[_[i]]=a[_[O]];e=e+o;_=d[e];l[_[i]]=_[f];e=e+o;_=d[e];l[_[t]]=_[c];e=e+o;_=d[e];l[_[i]]=_[c];e=e+o;_=d[e];n=_[r]l[n]=l[n](M(l,n+o,_[h]))e=e+o;_=d[e];l[_[i]][_[f]]=l[_[B]];e=e+o;_=d[e];l[_[U]][_[c]]=l[_[P]];e=e+o;_=d[e];l[_[U]]=a[_[O]];e=e+o;_=d[e];l[_[w]]=_[f];e=e+o;_=d[e];l[_[i]]=_[f];e=e+o;_=d[e];l[_[x]]=_[O];e=e+o;_=d[e];n=_[t]l[n]=l[n](M(l,n+o,_[b]))e=e+o;_=d[e];l[_[t]][_[h]]=l[_[s]];e=e+o;_=d[e];l[_[r]][_[O]]=l[_[v]];e=e+o;_=d[e];l[_[w]]=a[_[f]];e=e+o;_=d[e];l[_[r]]=l[_[h]];e=e+o;_=d[e];n=_[U]l[n](l[n+C])e=e+o;_=d[e];do return end;break end;break;end break;end while(n)/((321442/0xd1))==387 do n=(1228968)while D<=(-98+0xa6)do n-= n l[_[r]]=g[_[b]];e=e+o;_=d[e];l[_[U]]=#l[_[b]];e=e+o;_=d[e];g[_[h]]=l[_[t]];e=e+o;_=d[e];l[_[i]]=g[_[h]];e=e+o;_=d[e];l[_[r]]=#l[_[h]];e=e+o;_=d[e];g[_[c]]=l[_[t]];e=e+o;_=d[e];do return end;break;end while 606==(n)/((300144/0x94))do n=(6403410)while(0x1368/72)<D do n-= n local n;l[_[i]]=_[f];e=e+o;_=d[e];l[_[U]]=_[c];e=e+o;_=d[e];l[_[r]]=_[f];e=e+o;_=d[e];n=_[t]l[n]=l[n](M(l,n+o,_[k]))e=e+o;_=d[e];if not l[_[x]]then e=e+C;else e=_[b];end;break end while(n)/((0x13f3-2572))==2526 do local n;l[_[x]]=_[O];e=e+o;_=d[e];l[_[x]]=_[h];e=e+o;_=d[e];l[_[i]]=_[O];e=e+o;_=d[e];n=_[x]l[n]=l[n](M(l,n+o,_[f]))e=e+o;_=d[e];if l[_[r]]then e=e+o;else e=_[k];end;break end;break;end break;end break;end break;end break;end while 1264==(n)/((2441-0x4d0))do n=(390345)while(0xb7+-101)>=D do n-= n n=(12487780)while D<=(215-0x8b)do n-= n n=(102450)while(13943/(573/0x3))>=D do n-= n n=(488124)while(0x2ffb/173)>=D do n-= n local n;l[_[i]]=a[_[k]];e=e+o;_=d[e];l[_[i]]=_[O];e=e+o;_=d[e];l[_[w]]=_[O];e=e+o;_=d[e];l[_[w]]=_[h];e=e+o;_=d[e];n=_[r]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];l[_[U]][_[f]]=l[_[B]];e=e+o;_=d[e];l[_[U]][_[c]]=_[P];e=e+o;_=d[e];l[_[i]][_[b]]=_[S];e=e+o;_=d[e];l[_[t]][_[k]]=_[B];e=e+o;_=d[e];l[_[r]]=a[_[f]];e=e+o;_=d[e];l[_[w]]=l[_[c]][_[S]];e=e+o;_=d[e];l[_[r]]=l[_[O]][_[v]];e=e+o;_=d[e];l[_[x]][_[f]]=l[_[u]];e=e+o;_=d[e];l[_[t]][_[k]]=_[P];e=e+o;_=d[e];l[_[r]][_[b]]=_[P];e=e+o;_=d[e];l[_[i]][_[h]]=_[v];e=e+o;_=d[e];l[_[i]]={};e=e+o;_=d[e];l[_[w]]=a[_[O]];e=e+o;_=d[e];l[_[x]]=_[b];e=e+o;_=d[e];l[_[r]]=_[c];e=e+o;_=d[e];l[_[t]]=_[k];e=e+o;_=d[e];n=_[x]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];l[_[x]]=a[_[c]];e=e+o;_=d[e];l[_[w]]=_[c];e=e+o;_=d[e];l[_[w]]=_[k];e=e+o;_=d[e];l[_[r]]=_[k];e=e+o;_=d[e];n=_[w]l[n]=l[n](M(l,n+o,_[h]))e=e+o;_=d[e];l[_[t]]=a[_[f]];e=e+o;_=d[e];l[_[r]]=_[O];e=e+o;_=d[e];l[_[U]]=_[b];e=e+o;_=d[e];l[_[i]]=_[O];e=e+o;_=d[e];n=_[i]l[n]=l[n](M(l,n+o,_[h]))e=e+o;_=d[e];l[_[x]]=a[_[O]];e=e+o;_=d[e];l[_[t]]=_[O];e=e+o;_=d[e];l[_[U]]=_[k];e=e+o;_=d[e];l[_[i]]=_[c];e=e+o;_=d[e];n=_[r]l[n]=l[n](M(l,n+o,_[h]))e=e+o;_=d[e];l[_[w]]=a[_[h]];e=e+o;_=d[e];l[_[i]]=_[O];e=e+o;_=d[e];l[_[w]]=_[f];e=e+o;_=d[e];l[_[i]]=_[b];e=e+o;_=d[e];n=_[w]l[n]=l[n](M(l,n+o,_[h]))e=e+o;_=d[e];l[_[x]]=a[_[f]];e=e+o;_=d[e];l[_[t]]=_[f];e=e+o;_=d[e];l[_[w]]=_[h];e=e+o;_=d[e];l[_[x]]=_[c];e=e+o;_=d[e];n=_[x]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];l[_[t]]=a[_[b]];e=e+o;_=d[e];l[_[x]]=_[O];e=e+o;_=d[e];l[_[i]]=_[k];e=e+o;_=d[e];l[_[r]]=_[O];e=e+o;_=d[e];n=_[r]l[n]=l[n](M(l,n+o,_[O]))e=e+o;_=d[e];l[_[x]]=a[_[O]];e=e+o;_=d[e];l[_[i]]=_[O];e=e+o;_=d[e];l[_[U]]=_[f];e=e+o;_=d[e];l[_[r]]=_[O];e=e+o;_=d[e];n=_[r]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];l[_[r]]=a[_[h]];e=e+o;_=d[e];l[_[t]]=_[b];e=e+o;_=d[e];l[_[x]]=_[h];e=e+o;_=d[e];l[_[i]]=_[b];e=e+o;_=d[e];n=_[w]l[n]=l[n](M(l,n+o,_[O]))e=e+o;_=d[e];l[_[i]]=a[_[c]];e=e+o;_=d[e];l[_[x]]=_[O];e=e+o;_=d[e];l[_[w]]=_[O];e=e+o;_=d[e];l[_[x]]=_[k];e=e+o;_=d[e];n=_[w]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];l[_[x]]=a[_[c]];e=e+o;_=d[e];l[_[w]]=_[c];e=e+o;_=d[e];l[_[U]]=_[k];e=e+o;_=d[e];l[_[i]]=_[k];e=e+o;_=d[e];n=_[U]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];l[_[r]]=a[_[c]];e=e+o;_=d[e];l[_[t]]=_[h];e=e+o;_=d[e];l[_[x]]=_[k];e=e+o;_=d[e];l[_[i]]=_[c];e=e+o;_=d[e];n=_[w]l[n]=l[n](M(l,n+o,_[k]))e=e+o;_=d[e];l[_[r]]=a[_[b]];e=e+o;_=d[e];l[_[x]]=_[h];e=e+o;_=d[e];l[_[r]]=_[c];break;end while(n)/((3601-0x715))==273 do n=(213520)while(0x3e70/222)<D do n-= n local n;l[_[r]]=_[b];e=e+o;_=d[e];l[_[t]]=_[k];e=e+o;_=d[e];l[_[x]]=_[k];e=e+o;_=d[e];n=_[i]l[n]=l[n](M(l,n+o,_[k]))e=e+o;_=d[e];if not l[_[i]]then e=e+C;else e=_[c];end;break end while(n)/((0xa1b+-75))==85 do local D;local n;l[_[w]]=_[b];e=e+o;_=d[e];l[_[w]]=_[h];e=e+o;_=d[e];n=_[t]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];l[_[r]]=a[_[O]];e=e+o;_=d[e];l[_[w]]=_[c];e=e+o;_=d[e];l[_[r]]=_[b];e=e+o;_=d[e];l[_[i]]=_[b];e=e+o;_=d[e];n=_[U]l[n]=l[n](M(l,n+o,_[O]))e=e+o;_=d[e];l[_[r]]=a[_[f]];e=e+o;_=d[e];l[_[t]]=_[O];e=e+o;_=d[e];l[_[x]]=_[f];e=e+o;_=d[e];l[_[x]]=_[f];e=e+o;_=d[e];n=_[r]l[n]=l[n](M(l,n+o,_[O]))e=e+o;_=d[e];l[_[x]]=a[_[h]];e=e+o;_=d[e];l[_[r]]=_[c];e=e+o;_=d[e];l[_[U]]=_[b];e=e+o;_=d[e];l[_[r]]=_[O];e=e+o;_=d[e];n=_[x]l[n]=l[n](M(l,n+o,_[k]))e=e+o;_=d[e];l[_[r]]=a[_[h]];e=e+o;_=d[e];l[_[x]]=_[f];e=e+o;_=d[e];l[_[x]]=_[h];e=e+o;_=d[e];l[_[w]]=_[h];e=e+o;_=d[e];n=_[U]l[n]=l[n](M(l,n+o,_[h]))e=e+o;_=d[e];l[_[x]]=a[_[h]];e=e+o;_=d[e];l[_[x]]=_[c];e=e+o;_=d[e];l[_[t]]=_[f];e=e+o;_=d[e];l[_[w]]=_[c];e=e+o;_=d[e];n=_[t]l[n]=l[n](M(l,n+o,_[h]))e=e+o;_=d[e];l[_[r]]=a[_[b]];e=e+o;_=d[e];l[_[i]]=_[O];e=e+o;_=d[e];l[_[i]]=_[O];e=e+o;_=d[e];l[_[U]]=_[O];e=e+o;_=d[e];n=_[t]l[n]=l[n](M(l,n+o,_[k]))e=e+o;_=d[e];l[_[x]]=a[_[c]];e=e+o;_=d[e];l[_[t]]=_[c];e=e+o;_=d[e];l[_[i]]=_[h];e=e+o;_=d[e];l[_[U]]=_[c];e=e+o;_=d[e];n=_[x]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];l[_[U]]=a[_[c]];e=e+o;_=d[e];l[_[x]]=_[h];e=e+o;_=d[e];l[_[w]]=_[c];e=e+o;_=d[e];l[_[x]]=_[f];e=e+o;_=d[e];n=_[r]l[n]=l[n](M(l,n+o,_[k]))e=e+o;_=d[e];l[_[r]]=a[_[f]];e=e+o;_=d[e];l[_[i]]=_[k];e=e+o;_=d[e];l[_[r]]=_[O];e=e+o;_=d[e];l[_[r]]=_[O];e=e+o;_=d[e];n=_[w]l[n]=l[n](M(l,n+o,_[k]))e=e+o;_=d[e];l[_[i]]=a[_[c]];e=e+o;_=d[e];l[_[x]]=_[f];e=e+o;_=d[e];l[_[t]]=_[b];e=e+o;_=d[e];l[_[x]]=_[b];e=e+o;_=d[e];n=_[x]l[n]=l[n](M(l,n+o,_[O]))e=e+o;_=d[e];l[_[x]]=a[_[h]];e=e+o;_=d[e];l[_[i]]=_[f];e=e+o;_=d[e];l[_[U]]=_[c];e=e+o;_=d[e];l[_[t]]=_[b];e=e+o;_=d[e];n=_[x]l[n]=l[n](M(l,n+o,_[k]))e=e+o;_=d[e];l[_[x]]=a[_[k]];e=e+o;_=d[e];l[_[i]]=_[h];e=e+o;_=d[e];l[_[r]]=_[b];e=e+o;_=d[e];l[_[w]]=_[b];e=e+o;_=d[e];n=_[r]l[n]=l[n](M(l,n+o,_[f]))e=e+o;_=d[e];l[_[i]]=a[_[b]];e=e+o;_=d[e];l[_[i]]=_[O];e=e+o;_=d[e];l[_[x]]=_[c];e=e+o;_=d[e];l[_[U]]=_[b];e=e+o;_=d[e];n=_[w]l[n]=l[n](M(l,n+o,_[f]))e=e+o;_=d[e];l[_[i]]=a[_[c]];e=e+o;_=d[e];l[_[r]]=_[b];e=e+o;_=d[e];l[_[w]]=_[h];e=e+o;_=d[e];l[_[w]]=_[h];e=e+o;_=d[e];n=_[r]l[n]=l[n](M(l,n+o,_[f]))e=e+o;_=d[e];n=_[i];D=l[n];for _=n+1,_[O]do p(D,l[_])end;break end;break;end break;end while 150==(n)/((-0x13+702))do n=(1625116)while D<=(184+-0x6e)do n-= n local D;local n;l[_[x]]=a[_[c]];e=e+o;_=d[e];l[_[r]]=_[h];e=e+o;_=d[e];l[_[r]]=_[h];e=e+o;_=d[e];l[_[w]]=_[c];e=e+o;_=d[e];n=_[r]l[n]=l[n](M(l,n+o,_[k]))e=e+o;_=d[e];l[_[t]]={};e=e+o;_=d[e];l[_[i]]=a[_[h]];e=e+o;_=d[e];l[_[t]]=_[k];e=e+o;_=d[e];l[_[x]]=_[O];e=e+o;_=d[e];l[_[U]]=_[O];e=e+o;_=d[e];n=_[x]l[n]=l[n](M(l,n+o,_[k]))e=e+o;_=d[e];l[_[i]]=a[_[h]];e=e+o;_=d[e];l[_[U]]=l[_[b]][_[v]];e=e+o;_=d[e];n=_[r]l[n]=l[n]()e=e+o;_=d[e];l[_[r]][l[_[f]]]=l[_[B]];e=e+o;_=d[e];l[_[U]][l[_[k]]]=l[_[B]];e=e+o;_=d[e];n=_[x];D=l[n];for _=n+1,_[b]do p(D,l[_])end;break;end while 428==(n)/((3919+-0x7a))do n=(3164717)while(0x100-181)<D do n-= n local n;l[_[r]]=_[b];e=e+o;_=d[e];l[_[x]]=_[c];e=e+o;_=d[e];l[_[w]]=_[b];e=e+o;_=d[e];n=_[w]l[n]=l[n](M(l,n+o,_[k]))e=e+o;_=d[e];if not l[_[t]]then e=e+C;else e=_[c];end;break end while 2609==(n)/((0x520+-99))do local n;l[_[i]]=_[b];e=e+o;_=d[e];l[_[x]]=_[f];e=e+o;_=d[e];l[_[i]]=_[f];e=e+o;_=d[e];n=_[i]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];if l[_[r]]then e=e+o;else e=_[h];end;break end;break;end break;end break;end while 3977==(n)/((0x94b88/194))do n=(2068454)while D<=(-87+0xa6)do n-= n n=(287120)while(-0x5e+171)>=D do n-= n local n;l[_[x]]=_[f];e=e+o;_=d[e];l[_[r]]=_[O];e=e+o;_=d[e];l[_[i]]=_[h];e=e+o;_=d[e];n=_[w]l[n]=l[n](M(l,n+o,_[h]))e=e+o;_=d[e];if not l[_[w]]then e=e+C;else e=_[b];end;break;end while 1480==(n)/((-0x6d+303))do n=(4100844)while D>(-122+0xc8)do n-= n local U;local C,N;local D;local n;a[_[b]]=l[_[w]];e=e+o;_=d[e];l[_[x]]=a[_[O]];e=e+o;_=d[e];l[_[r]]=a[_[f]];e=e+o;_=d[e];n=_[x];D=l[_[h]];l[n+1]=D;l[n]=D[_[S]];e=e+o;_=d[e];l[_[i]]=a[_[k]];e=e+o;_=d[e];l[_[r]]=_[c];e=e+o;_=d[e];l[_[w]]=_[O];e=e+o;_=d[e];l[_[t]]=_[b];e=e+o;_=d[e];n=_[w]l[n]=l[n](M(l,n+o,_[b]))e=e+o;_=d[e];n=_[r]C,N=m(l[n](M(l,n+1,_[O])))j=N+n-1 U=0;for _=n,j do U=U+o;l[_]=C[U];end;break end while(n)/((0xfa3-2020))==2068 do local j;local c;local D;local n;l[_[w]]=a[_[f]];e=e+o;_=d[e];l[_[U]]=l[_[k]][_[B]];e=e+o;_=d[e];n=_[i];D=l[_[b]];l[n+1]=D;l[n]=D[_[S]];e=e+o;_=d[e];l[_[U]]=l[_[b]];e=e+o;_=d[e];l[_[w]]=l[_[f]];e=e+o;_=d[e];n=_[U]l[n]=l[n](M(l,n+o,_[O]))e=e+o;_=d[e];n=_[x];D=l[_[b]];l[n+1]=D;l[n]=D[_[s]];e=e+o;_=d[e];n=_[w]l[n]=l[n](l[n+C])e=e+o;_=d[e];c={l,_};c[C][c[N][w]]=c[o][c[N][S]]+c[C][c[N][f]];e=e+o;_=d[e];l[_[r]]=l[_[O]]%_[u];e=e+o;_=d[e];n=_[w]l[n]=l[n](l[n+C])e=e+o;_=d[e];D=_[f];j=l[D]for _=D+1,_[P]do j=j..l[_];end;l[_[t]]=j;e=e+o;_=d[e];c={l,_};c[C][c[N][r]]=c[o][c[N][S]]+c[C][c[N][h]];e=e+o;_=d[e];l[_[i]]=l[_[f]]%_[v];break end;break;end break;end while(n)/((3841-0x7ac))==1102 do n=(4435086)while D<=(11360/0x8e)do n-= n local n;local i;l[_[r]]=a[_[f]];e=e+o;_=d[e];l[_[w]]=_[b];e=e+o;_=d[e];l[_[x]]=_[k];e=e+o;_=d[e];i=_[c];n=l[i]for _=i+1,_[B]do n=n..l[_];end;l[_[w]]=n;e=e+o;_=d[e];if l[_[x]]then e=e+o;else e=_[k];end;break;end while(n)/((-34+0x82d))==2154 do n=(699480)while(0xef-158)<D do n-= n local x;local n;l[_[w]]=a[_[f]];e=e+o;_=d[e];l[_[w]]=a[_[b]];e=e+o;_=d[e];l[_[t]]=_[h];e=e+o;_=d[e];l[_[r]]=_[h];e=e+o;_=d[e];l[_[t]]=_[f];e=e+o;_=d[e];n=_[U]l[n]=l[n](M(l,n+o,_[f]))e=e+o;_=d[e];l[_[U]]=l[_[k]][l[_[u]]];e=e+o;_=d[e];n=_[w]l[n]=l[n](l[n+C])e=e+o;_=d[e];x=l[_[s]];if not x then e=e+C;else l[_[U]]=x;e=_[h];end;break end while(n)/((487-0x11e))==3480 do local k;local n;l[_[t]]=a[_[c]];e=e+o;_=d[e];l[_[x]]=a[_[O]];e=e+o;_=d[e];l[_[r]]=_[c];e=e+o;_=d[e];l[_[x]]=_[h];e=e+o;_=d[e];l[_[U]]=_[f];e=e+o;_=d[e];n=_[i]l[n]=l[n](M(l,n+o,_[b]))e=e+o;_=d[e];l[_[i]]=l[_[b]][l[_[S]]];e=e+o;_=d[e];n=_[w]l[n]=l[n](l[n+C])e=e+o;_=d[e];k=l[_[u]];if not k then e=e+C;else l[_[i]]=k;e=_[O];end;break end;break;end break;end break;end break;end while 2455==(n)/((0x15b-188))do n=(428652)while D<=(0x370/10)do n-= n n=(9141111)while D<=(222-0x89)do n-= n n=(12219363)while D<=(1411/0x11)do n-= n local n;l[_[U]]=a[_[f]];e=e+o;_=d[e];l[_[i]]=a[_[b]];e=e+o;_=d[e];l[_[w]]=_[c];e=e+o;_=d[e];l[_[i]]=_[f];e=e+o;_=d[e];l[_[w]]=_[f];e=e+o;_=d[e];n=_[t]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];l[_[t]]=l[_[O]][l[_[v]]];e=e+o;_=d[e];n=_[U]l[n]=l[n](l[n+C])e=e+o;_=d[e];l[_[t]]=l[_[f]];e=e+o;_=d[e];e=_[b];break;end while 3627==(n)/((0x1a69-3392))do n=(5143179)while D>(0xc5-113)do n-= n local n;l[_[U]]=_[O];e=e+o;_=d[e];n=_[r]l[n]=l[n](M(l,n+o,_[f]))e=e+o;_=d[e];l[_[r]]=a[_[c]];e=e+o;_=d[e];l[_[w]]=_[h];e=e+o;_=d[e];l[_[U]]=_[c];e=e+o;_=d[e];l[_[i]]=_[f];e=e+o;_=d[e];n=_[r]l[n]=l[n](M(l,n+o,_[b]))e=e+o;_=d[e];l[_[i]]=a[_[h]];e=e+o;_=d[e];l[_[x]]=_[k];e=e+o;_=d[e];l[_[i]]=_[f];break end while(n)/((0x64908/216))==2697 do a[_[k]]=l[_[r]];e=e+o;_=d[e];l[_[t]]={};e=e+o;_=d[e];l[_[U]]={};e=e+o;_=d[e];a[_[b]]=l[_[U]];e=e+o;_=d[e];l[_[r]]=a[_[c]];e=e+o;_=d[e];if(l[_[t]]==_[s])then e=e+C;else e=_[b];end;break end;break;end break;end while 2723==(n)/((0x1a4e-3377))do n=(2041207)while(15480/0xb4)>=D do n-= n local n;n=_[U]l[n]=l[n](M(l,n+o,_[b]))e=e+o;_=d[e];n=_[x]l[n](M(l,n+C,_[f]))e=e+o;_=d[e];l[_[U]]=a[_[k]];e=e+o;_=d[e];l[_[U]]=a[_[k]];e=e+o;_=d[e];l[_[U]]=_[b];e=e+o;_=d[e];l[_[t]]=_[c];e=e+o;_=d[e];l[_[U]]=_[h];e=e+o;_=d[e];n=_[r]l[n]=l[n](M(l,n+o,_[O]))e=e+o;_=d[e];n=_[w]l[n](l[n+C])e=e+o;_=d[e];l[_[x]]=a[_[O]];break;end while 2023==(n)/((103927/0x67))do n=(648403)while D>(2784/0x20)do n-= n a[_[k]]=l[_[w]];e=e+o;_=d[e];for _=_[i],_[b]do l[_]=nil;end;e=e+o;_=d[e];a[_[b]]=l[_[x]];e=e+o;_=d[e];for _=_[x],_[b]do l[_]=nil;end;e=e+o;_=d[e];a[_[f]]=l[_[r]];e=e+o;_=d[e];l[_[U]]=a[_[f]];e=e+o;_=d[e];l[_[t]]=_[f];e=e+o;_=d[e];l[_[U]]=l[_[k]][l[_[S]]];e=e+o;_=d[e];if not l[_[t]]then e=e+C;else e=_[c];end;break end while 211==(n)/((313446/0x66))do local i;local n;l[_[x]]=(_[b]~=0);e=e+o;_=d[e];l[_[x]]=l[_[h]];e=e+o;_=d[e];l[_[r]]=a[_[c]];e=e+o;_=d[e];n=_[U]l[n]=l[n](l[n+C])e=e+o;_=d[e];i=l[_[s]];if not i then e=e+C;else l[_[x]]=i;e=_[h];end;break end;break;end break;end break;end while 1134==(n)/((-64+0x1ba))do n=(329430)while(17745/0xc3)>=D do n-= n n=(536963)while D<=(216+-0x7f)do n-= n local r;local n;n=_[x];r=l[_[c]];l[n+1]=r;l[n]=r[_[S]];e=e+o;_=d[e];l[_[U]]=_[f];e=e+o;_=d[e];n=_[t]l[n]=l[n](M(l,n+o,_[b]))e=e+o;_=d[e];l[_[i]]=_[c];e=e+o;_=d[e];l[_[t]]=l[_[h]][l[_[S]]];e=e+o;_=d[e];l[_[w]]=_[k];e=e+o;_=d[e];n=_[t];r=l[_[h]];l[n+1]=r;l[n]=r[l[_[P]]];e=e+o;_=d[e];l[_[U]]=a[_[h]];e=e+o;_=d[e];l[_[x]]=_[O];e=e+o;_=d[e];l[_[i]]=_[c];break;end while 971==(n)/((-99+0x28c))do n=(484416)while D>((-0x21+272)-0x95)do n-= n local k;local n;l[_[r]]=a[_[h]];e=e+o;_=d[e];l[_[r]]=a[_[O]];e=e+o;_=d[e];l[_[U]]=_[b];e=e+o;_=d[e];l[_[r]]=_[f];e=e+o;_=d[e];l[_[t]]=_[b];e=e+o;_=d[e];n=_[x]l[n]=l[n](M(l,n+o,_[h]))e=e+o;_=d[e];l[_[w]]=l[_[h]][l[_[u]]];e=e+o;_=d[e];n=_[x]l[n]=l[n](l[n+C])e=e+o;_=d[e];k=l[_[u]];if not k then e=e+C;else l[_[i]]=k;e=_[c];end;break end while(n)/((6758-0xd42))==144 do local n;n=_[i]l[n]=l[n]()e=e+o;_=d[e];a[_[k]]=l[_[r]];e=e+o;_=d[e];l[_[U]]=a[_[h]];e=e+o;_=d[e];l[_[w]]=l[_[O]][_[P]];e=e+o;_=d[e];l[_[x]]=(_[f]~=0);e=e+o;_=d[e];a[_[b]]=l[_[i]];e=e+o;_=d[e];a[_[O]]=l[_[i]];break end;break;end break;end while 417==(n)/((0x13ac4/102))do n=(734904)while D<=(116+(-0xdc8/147))do n-= n local n;n=_[x]l[n]=l[n](M(l,n+o,_[k]))e=e+o;_=d[e];l[_[w]]=a[_[h]];e=e+o;_=d[e];l[_[r]]=_[f];e=e+o;_=d[e];l[_[w]]=_[b];e=e+o;_=d[e];l[_[i]]=_[c];e=e+o;_=d[e];n=_[w]l[n]=l[n](M(l,n+o,_[f]))e=e+o;_=d[e];l[_[x]]=a[_[h]];e=e+o;_=d[e];l[_[w]]=_[b];e=e+o;_=d[e];l[_[t]]=_[f];e=e+o;_=d[e];l[_[r]]=_[k];break;end while 236==(n)/((0x18cf-3237))do n=(14734678)while D>(12741/0x89)do n-= n local x;local n;l[_[U]]=_[h];e=e+o;_=d[e];n=_[U];x=l[_[c]];l[n+1]=x;l[n]=x[l[_[v]]];e=e+o;_=d[e];n=_[U]l[n](l[n+C])e=e+o;_=d[e];l[_[i]]=a[_[c]];e=e+o;_=d[e];l[_[r]]=_[b];e=e+o;_=d[e];n=_[w]l[n](l[n+C])e=e+o;_=d[e];e=_[c];break end while 3719==(n)/(((59533+-0x67)/15))do local r;local n;l[_[w]]=a[_[f]];e=e+o;_=d[e];l[_[x]]=_[b];e=e+o;_=d[e];l[_[t]]=_[b];e=e+o;_=d[e];l[_[x]]=_[k];e=e+o;_=d[e];n=_[t]l[n]=l[n](M(l,n+o,_[k]))e=e+o;_=d[e];n=_[i];r=l[n];for _=n+1,_[f]do p(r,l[_])end;break end;break;end break;end break;end break;end break;end break;end e+= C end;end);end;return L(J(),{},R())()end)_msec({[(0x5676/119)]='\115\116'..(function(_)return(_ and'(-92+0xc0)')or'\114\105'or'\120\58'end)(((130810/0xce)/127)==(822/0x89))..'\110g',[(0x6aa-(1019+-0x6a))]='\108\100'..(function(_)return(_ and'(296-0xc4)')or'\101\120'or'\119\111'end)((0x1f+-26)==(136-0x82))..'\112',[(542-0x12c)]=(function(_)return(_ and'(181+-0x51)')and'\98\121'or'\100\120'end)(((0x2bf-393)/0x3e)==(0x3a+-53))..'\116\101',[(0x1164a/199)]='\99'..(function(_)return(_ and'(13000/0x82)')and'\90\19\157'or'\104\97'end)((123-0x76)==(0x4c+-73))..'\114',[((0x36658-111452)/194)]='\116\97'..(function(_)return(_ and'((-0x7f0/127)+116)')and'\64\113'or'\98\108'end)((-46+0x34)==(106+-0x65))..'\101',[(57001/0x77)]=(function(_)return(_ and'(315-0xd7)')or'\115\117'or'\78\107'end)((-38+0x29)==(139+-0x6c))..'\98',[(-0x63+971)]='\99\111'..(function(_)return(_ and'((0xb27a-22890)/0xe4)')and'\110\99'or'\110\105\103\97'end)((0x9b+-124)==(-0x62+(516/0x4)))..'\97\116',[(-60+0x2d7)]=(function(_,e)return(_ and'(284-0xb8)')and'\48\159\158\188\10'or'\109\97'end)((103-0x62)==(0x1c-22))..'\116\104',[(322947/0xf3)]=(function(_,e)return((-42+0x2f)==(-64+(0x2b72/166))and'\48'..'\195'or _..((not'\20\95\69'and'\90'..'\180'or e)))or'\199\203\95'end),[((0x4223f/139)-1015)]='\105\110'..(function(_,e)return(_ and'(0xe5-129)')and'\90\115\138\115\15'or'\115\101'end)((430/0x56)==(93/0x3))..'\114\116',[(0x415+-30)]='\117\110'..(function(_,e)return(_ and'(23300/0xe9)')or'\112\97'or'\20\38\154'end)((0x2e-41)==(-28+0x3b))..'\99\107',[(2408-0x4e9)]='\115\101'..(function(_)return(_ and'(176+-0x4c)')and'\110\112\99\104'or'\108\101'end)(((20020/0xb6)/0x16)==(90-0x3b))..'\99\116',[(-25+0x526)]='\116\111\110'..(function(_,e)return(_ and'(0x5a3c/231)')and'\117\109\98'or'\100\97\120\122'end)((0x2d+-40)==(74-0x45))..'\101\114'},{[(124+-0x66)]=((getfenv))},((getfenv))()) end)()




local function GetNearestTarget()
    local PLAYER_HOLD = {}
    local DISTANCES = {}
    for i, v in pairs(game:GetService("Players"):GetPlayers()) do
        if v ~= Client and v.Character and v.Character:FindFirstChild(Aimbot.HitPart) and v.Stats.Health.Value > 0 then
            local AIM = v.Character["Head"] or v.Character["HumanoidRootPart"]
            local DISTANCE = (AIM.Position - Camera.CFrame.Position).magnitude
            local RAY = Ray.new(Camera.CFrame.Position, (Mouse.Hit.Position - Camera.CFrame.Position).unit * DISTANCE)
            local HIT,POS = game:GetService("Workspace"):FindPartOnRay(RAY, game:GetService("Workspace"))
            local DIFF = math.floor((POS - AIM.Position).magnitude)
            PLAYER_HOLD[v.Name .. i] = {}
            PLAYER_HOLD[v.Name .. i].dist = DISTANCE
            PLAYER_HOLD[v.Name .. i].Client = v
            PLAYER_HOLD[v.Name .. i].diff = DIFF
            table.insert(DISTANCES, DIFF)
        end
    end

    local L_DISTANCE = math.floor(math.min(unpack(DISTANCES)))
    if unpack(DISTANCES) == nil or (L_DISTANCE > Aimbot.AimRadius) then
        return nil
    end
    
    for i, v in pairs(PLAYER_HOLD) do
        if v.diff == L_DISTANCE then
            return v.Client
        end
    end
end

local function DrawDrop(drop, typp, name)
    
    local DropText = Drawing.new("Text")
    DropText.Visible = false
    DropText.Center = true
    DropText.Outline = true
    DropText.Font = 2
    DropText.Size = 13
    DropText.Color = Color3.new(1, 1, 1)
    DropText.Text = drop.Name or ""

    local DistText = Drawing.new("Text")
    DistText.Visible = false
    DistText.Center = true
    DistText.Outline = true
    DistText.Font = 2
    DistText.Size = 13
    DistText.Color = Color3.new(1, 1, 1)
    DistText.Text = "Dist"

    if typp == "Heli" then
        local function UPDATER()
            local c
            c = game:GetService("RunService").Heartbeat:Connect(function()
                pcall(function()
                    if not library and c then
                        c:Disconnect()
                        c = nil
                        
                        DropText:Destroy()
                        DistText:Destroy()
    
                        DropText = nil
                        DistText = nil
                    end
                    if drop.PrimaryPart and library.flags["HeliCrashEnabled"] then
                        
                        local dropvector, onscreen = Camera:WorldToViewportPoint(drop.PrimaryPart.Position)
        
                        if onscreen then
                            DropText.Position = Vector2.new(dropvector.X, dropvector.Y)
                            DropText.Visible = true
                            DropText.Color = library.flags["Helis Color"] or Color3.fromRGB(255, 255, 255)
    
                            DistText.Position = Vector2.new(dropvector.X, dropvector.Y + 14)
                            DistText.Visible = true
                            DistText.Text = math.floor((Camera.CFrame.Position - drop.PrimaryPart.Position).magnitude) .."Studs"
                            DistText.Color = library.flags["Helis Color"] or Color3.fromRGB(255, 255, 255)
                        else
                            DropText.Visible = false
                            DistText.Visible = false
                        end
        
                    else
        
                        DropText.Visible = false
                        DistText.Visible = false
                        
                        if c then
                            c:Disconnect()
                            c = nil
                        end
                    
                    end
                end)
            end)
        end
        coroutine.wrap(UPDATER)()
    elseif typp == "Loot" then
        local function UPDATER()
            local c
            c = game:GetService("RunService").Heartbeat:Connect(function()
                local s,e = pcall(function()
                    if not library and c then
                        c:Disconnect()
                        c = nil
                        
                        DropText:Destroy()
                        DistText:Destroy()
    
                        DropText = nil
                        DistText = nil
                    end

                    if drop.PrimaryPart and library.flags[name .. " Loot Enabled"] then

                        local Distance = (Camera.CFrame.p - drop.PrimaryPart.Position).Magnitude

                        if Distance > library.flags["Loot Max Distance"] then

                            DropText.Visible = false
                            DistText.Visible = false

                        else
                        
                            local dropvector, onscreen = Camera:WorldToViewportPoint(drop.PrimaryPart.Position)
            
                            if onscreen then
                                DropText.Position = Vector2.new(dropvector.X, dropvector.Y)
                                DropText.Visible = true
                                DropText.Color = library.flags[name .. " Loot Color"] or Color3.fromRGB(255, 255, 255)
        
                                DistText.Position = Vector2.new(dropvector.X, dropvector.Y + 14)
                                DistText.Visible = true
                                DistText.Text = math.floor((Camera.CFrame.Position - drop.PrimaryPart.Position).magnitude) .."Studs"
                                DistText.Color = library.flags[name .. " Loot Color"] or Color3.fromRGB(255, 255, 255)
                            else
                                DropText.Visible = false
                                DistText.Visible = false
                            end

                        end
        
                    else
        
                        DropText.Visible = false
                        DistText.Visible = false
                        
                        if c then
                            c:Disconnect()
                            c = nil
                        end
                    
                    end
                end)

                if not s then
                    warn(e)
                end
            end)
        end
        coroutine.wrap(UPDATER)()
    else
        local function UPDATER()
            local c
            c = game:GetService("RunService").Heartbeat:Connect(function()
                pcall(function()
                    if not library and c then
                        c:Disconnect()
                        c = nil
                        
                        DropText:Destroy()
                        DistText:Destroy()
    
                        DropText = nil
                        DistText = nil
                    end
                    if drop.PrimaryPart and library.flags["VehiclesEnabled"] then

                        local Distance = (Camera.CFrame.p - drop.PrimaryPart.Position).Magnitude

                        if Distance > library.flags["Vehicles Max Distance"] then

                            DropText.Visible = false
                            DistText.Visible = false

                        else
                        
                            local dropvector, onscreen = Camera:WorldToViewportPoint(drop.PrimaryPart.Position)
            
                            if onscreen then
                                DropText.Position = Vector2.new(dropvector.X, dropvector.Y)
                                DropText.Visible = true
                                DropText.Color = library.flags["Vehicles Color"] or Color3.fromRGB(255, 255, 255)
        
                                DistText.Position = Vector2.new(dropvector.X, dropvector.Y + 14)
                                DistText.Visible = true
                                DistText.Text = math.floor((Camera.CFrame.Position - drop.PrimaryPart.Position).magnitude) .."Studs"
                                DistText.Color = library.flags["Vehicles Color"] or Color3.fromRGB(255, 255, 255)
                            else
                                DropText.Visible = false
                                DistText.Visible = false
                            end

                        end
        
                    else
        
                        DropText.Visible = false
                        DistText.Visible = false
                        
                        if c then
                            c:Disconnect()
                            c = nil
                        end
                    
                    end
                end)
            end)
        end
        coroutine.wrap(UPDATER)()
    end
end

local Old_new
Old_new = hookmetamethod(game, "__newindex", function(t, i, v)
	if checkcaller() or not library then
		return Old_new(t, i, v)
	end

	if t == Camera then
		if i == "CFrame" then
            local s, e = pcall(function()
                if AimlockTarget and AimlockTarget.Character and AimlockTarget:FindFirstChild("Stats") and AimlockTarget.Character:FindFirstChild(Aimbot.HitPart) and AimlockTarget.Stats.Health.Value > 0 then
                    v = CFrame.new(v.Position, AimlockTarget.Character[Aimbot.HitPart].Position)
                end
            end)

            if not s then
                ErrorCapture(e)
            end
		end
	end

	return Old_new(t, i, v)
end)

local Old_index
Old_index = hookmetamethod(game, "__index", function(t, i)
	if checkcaller() or not library then
		return Old_index(t, i)
	end

	if t == Camera then
		if i == "CFrame" then
			local s, e = pcall(function()
                if AimlockTarget and AimlockTarget.Character and AimlockTarget:FindFirstChild("Stats") and AimlockTarget.Character:FindFirstChild(Aimbot.HitPart) and AimlockTarget.Stats.Health.Value > 0 then
                    return CFrame.new(Old_index(t, i).Position, AimlockTarget.Character[Aimbot.HitPart].Position)
                end
            end)

            if not s then
                ErrorCapture(e)
            end
		end
	end

	return Old_index(t, i)
end)

-- [Legit Tab UI] ------------------------------------------------------------------------------------------------------------------------------------------------------------
-- local LegitTab = library:AddTab("Legit"); 
-- local LegitColunm1 = LegitTab:AddColumn();
-- local LegitMain = LegitColunm1:AddSection("Aim Assist")

local xd = false

local function RunTriggerbot(model)
	local s, e = pcall(function()

        local part = game:GetService("Workspace").CurrentCamera

        local origin = part.CFrame.Position
        local direction = part.CFrame.LookVector * 1000
    
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
        raycastParams.IgnoreWater = true
        raycastParams.FilterDescendantsInstances = {part, Client.Character}
    
        local raycastResult = game:GetService("Workspace"):Raycast(origin, direction, raycastParams)
    
        if raycastResult and raycastResult.Instance then
            if not xd and AimlockTarget and AimlockTarget.Character and (raycastResult.Instance:IsDescendantOf(AimlockTarget.Character) or raycastResult.Instance:IsDescendantOf(AimlockTarget)) and AimlockTarget.Stats.Health.Value > 0 and AimlockTarget.Character.Stats.Health.Base.Value > 0 then
                coroutine.resume(coroutine.create(function()
                    xd = true
                    wait(library.flags["Trigger CoolDown"])
                    xd = false
                end))
                VirtualInputManager:SendMouseButtonEvent(Mouse.X, Mouse.Y, 0, true, game, 1)
                wait()
                VirtualInputManager:SendMouseButtonEvent(Mouse.X, Mouse.Y, 0, false, game, 1)
            end
        end
    end)

    if not s then
        ErrorCapture(e)
    end
end

-- LegitMain:AddSlider{text = "Aimbot FOV", flag = "AimbotFov", min = 0, max = 750, value = 105, suffix = "°"}
-- LegitMain:AddSlider{text = "Smoothing Factor", flag = "Smoothing", min = 0, max = 30, value = 3, suffix = "%"}
-- LegitMain:AddList({text = "Hit Box", flag = "AimbotHitbox", value = "Head", values = {"Head", "Torso"}});
-- LegitMain:AddList({text = "Aimbot Key", flag = "AimbotKey", value = "On Aim", values = {"On Aim", "On Shoot"}});
-- LegitMain:AddDivider("Draw Fov");
-- LegitMain:AddToggle{text = "Enabled", flag = "CircleEnabled"}:AddColor({flag = "CircleColor", color = Color3.new(1, 1, 1)});
-- LegitMain:AddSlider{text = "Num Sides", flag = "CircleNumSides", min = 3, max = 48, value = 48, suffix = "°"}

-- local LegitSecond = LegitColunm1:AddSection("Extend Hitbox")
-- LegitSecond:AddDivider("Main");
-- LegitSecond:AddToggle{text = "Enabled", flag = "HitboxEnabled"}
-- LegitSecond:AddList({text = "Hit Box", flag = "ExtendHitbox", value = "Head", values = {"Head", "Torso"}});
-- LegitSecond:AddSlider{text = "Extend Rate", flag = "ExtendRate", min = 0, max = 10, value = 10, suffix = "%"}

-- local LegitThird = LegitColunm1:AddSection("Trigger Bot")
-- LegitThird:AddDivider("Main");
-- LegitThird:AddToggle{text = "Enabled", flag = "TriggerEnabled"}:AddBind({flag = "TriggerBind", key = "One"});
-- LegitThird:AddSlider{text = "Trigger Speed", flag = "TriggerSpeed", min = 0, max = 1000, value = 10, suffix = "%"}

-- local LegitColunm2 = LegitTab:AddColumn();
-- local LegitForth = LegitColunm2:AddSection("Bullet Redirection")
-- LegitForth:AddDivider("Main");
-- LegitForth:AddToggle{text = "Enabled", flag = "SilentAimEnabled"}
-- LegitForth:AddSlider{text = "Silent Aim FOV", flag = "SilentAimFOV", min = 0, max = 750, value = 105, suffix = "°"}
-- LegitForth:AddSlider{text = "Hit Chances", flag = "HitChances", min = 0, max = 100, value = 100, suffix = "%"}
-- LegitForth:AddList({text = "Redirection Mode", flag = "RedirectionMode", value = "P Mode", values = {"P Mode", "Normal Mode"}});
-- LegitForth:AddList({text = "Hit Box", flag = "SilentAimHitbox", value = "Head", values = {"Head", "Torso"}});
-- LegitForth:AddDivider("Draw Fov");
-- LegitForth:AddToggle{text = "Enabled", flag = "Circle2Enabled"}:AddColor({flag = "Circle2Color", color = Color3.new(1, 1, 1)});
-- LegitForth:AddSlider{text = "Num Sides", flag = "Circle2NumSides", min = 3, max = 48, value = 48, suffix = "°"}
-- LegitForth:AddDivider("Checks");
-- LegitForth:AddToggle{text = "Enabled", flag = "VisibleCheck"}

-- local LegitFifth = LegitColunm2:AddSection("Recoil Control")
-- LegitFifth:AddDivider("Main");
-- LegitFifth:AddToggle{text = "Enabled", flag = "RecoilControlEnabled"}
-- LegitFifth:AddSlider{text = "Model Kick", flag = "ModelKick", min = 5, max = 100, value = 100, suffix = "%"}
-- LegitFifth:AddSlider{text = "Camera Kick", flag = "CameraKick", min = 5, max = 100, value = 100, suffix = "%"}

-- [Rage Tab UI] ------------------------------------------------------------------------------------------------------------------------------------------------------------
local RageTab = library:AddTab("Main"); 
local RageColunm1 = RageTab:AddColumn();
local RageMain = RageColunm1:AddSection("Main Rage")

RageMain:AddDivider("Aimbot");

RageMain:AddToggle{
    text = "Enabled",
    flag = "AimbotEnabled",
    callback = function(State)
        SNot(1, "Aimbot is " .. tostring(library.flags["AimbotEnabled"]))
        if not State then
            return
        end

        if library.flags["Aimbot Type"] == "Mouse2 to Aimbot" then

            library:AddConnection(inputService.InputBegan, "AimbotIB", function(Key)
                if library.flags["AimbotEnabled"] then
                    if not (inputService:GetFocusedTextBox()) then 
                        if Key.UserInputType == Enum.UserInputType.MouseButton2 then 
                            pcall(function()
                                MousePressed = true
                                local Target = GetNearestTarget()
                                if Target ~= nil then 
                                    AimlockTarget = Target
                                    SNot(3, "Target: " .. tostring(AimlockTarget))
                                    Aimbot.On = true
                                end
                            end)
                        end
                    end
                else
                    library.connections["AimbotIB"]:Disconnect()
                end
            end)
            
            library:AddConnection(inputService.InputEnded, "AimbotIE", function(Key)
                if library.flags["AimbotEnabled"] then
                    if not (inputService:GetFocusedTextBox()) then 
                        if Key.UserInputType == Enum.UserInputType.MouseButton2 then 
                            AimlockTarget = nil
                            MousePressed = false
                            Aimbot.On = flase
                        end
                    end
                else
                    library.connections["AimbotIE"]:Disconnect()
                end
            end)

            library:AddConnection(runService.RenderStepped, "Aimbot", function()
                if library and library.flags["AimbotEnabled"] then
                    pcall(function()
                        -- if not Aimbot.On then
                        --     local Target = GetNearestTarget()
                        --     if Target and not Aimbot.On and not AimlockTarget then
                        --         Aimbot.On = true
                        --         AimlockTarget = Target
                        --         SNot(3, "Target: " .. tostring(AimlockTarget))
                        --     end
                        -- end
                        if Aimbot.On and MousePressed and AimlockTarget and AimlockTarget.Character and AimlockTarget.Character.Humanoid and AimlockTarget.Character:FindFirstChild(Aimbot.HitPart) and AimlockTarget.Stats.Health.Value > 0 then
                            if Aimbot.PredictionVelocity == 100 then
                                Camera = CFrame.new(Camera.Position, AimlockTarget.Character[Aimbot.HitPart].Position + Vector3.new(0, Aimbot.Height, 0))
                            elseif not Aimbot.Random then
                                Camera = CFrame.new(Camera.Position, AimlockTarget.Character[Aimbot.HitPart].Position + Vector3.new(0, Aimbot.Height, 0) + AimlockTarget.Character[Aimbot.HitPart].Velocity/Aimbot.PredictionVelocity)
                            elseif not RandomCool then
                                r = Aimbot.Hits[math.random(1, #Aimbot.Hits)]
                                if AimlockTarget.Character:FindFirstChild(r) then
                                    RandomCool = true
                                    wait(0.5)
                                    RandomCool = false
                                end
                            else
                                Camera = CFrame.new(Camera.Position, AimlockTarget.Character[r].Position + Vector3.new(0, Aimbot.Height, 0) + AimlockTarget.Character[Aimbot.HitPart].Velocity/Aimbot.PredictionVelocity)
                            end
                        else
                            Aimbot.On = false
                            AimlockTarget = nil
                            Aimbot.On = false
                        end
                    end)
                else
                    library.connections["Aimbot"]:Disconnect()

                    Aimbot.On = false
                    AimlockTarget = nil
                    Aimbot.On = false

                    MousePressed = false
                end
            end)

        else

            library:AddConnection(runService.RenderStepped, "Aimbot", function()
                if library and library.flags["AimbotEnabled"] then
                    pcall(function()
                        if not Aimbot.On then
                            local Target = GetNearestTarget()
                            if Target and not Aimbot.On then
                                Aimbot.On = true
                                AimlockTarget = Target
                                SNot(3, "Target: " .. tostring(AimlockTarget))
                            end
                        end
                        if Aimbot.On and AimlockTarget and AimlockTarget.Character and AimlockTarget.Character.Humanoid and AimlockTarget.Character:FindFirstChild(Aimbot.HitPart) and AimlockTarget.Stats.Health.Value > 0 then
                            if Aimbot.PredictionVelocity == 100 then
                                Camera = CFrame.new(Camera.Position, AimlockTarget.Character[Aimbot.HitPart].Position + Vector3.new(0, Aimbot.Height, 0))
                            elseif not Aimbot.Random then
                                Camera = CFrame.new(Camera.Position, AimlockTarget.Character[Aimbot.HitPart].Position + Vector3.new(0, Aimbot.Height, 0) + AimlockTarget.Character[Aimbot.HitPart].Velocity/Aimbot.PredictionVelocity)
                            elseif not RandomCool then
                                r = Aimbot.Hits[math.random(1, #Aimbot.Hits)]
                                if AimlockTarget.Character:FindFirstChild(r) then
                                    RandomCool = true
                                    wait(0.5)
                                    RandomCool = false
                                end
                            else
                                Camera = CFrame.new(Camera.Position, AimlockTarget.Character[r].Position + Vector3.new(0, Aimbot.Height, 0) + AimlockTarget.Character[Aimbot.HitPart].Velocity/Aimbot.PredictionVelocity)
                            end
                        else
                            Aimbot.On = false
                            AimlockTarget = nil
                            Aimbot.On = false
                        end
                    end)
                else
                    library.connections["Aimbot"]:Disconnect()
    
                    Aimbot.On = false
                    AimlockTarget = nil
                    Aimbot.On = false
                end
            end)

        end
    end
}:AddBind{
    flag = "AimbotBind",
    key = "None",
	callback = function()
		library.options["AimbotEnabled"]:SetState(not library.flags["AimbotEnabled"])
	end
}

RageMain:AddList{
    text = "Hit Part",
    flag = "Aimbot Hit Part",
    value = "Head",
    values = {"Head", "UpperTorso", "LowerTorso", "LeftFoot", "LeftLowerLeg", "LeftUpperLeg", "RightFoot", "RightLowerLeg", "RightUpperLeg", "LeftHand", "LeftLowerArm", "LeftLowerArm", "RightHand", "RightLowerArm", "RightLowerArm", "RightUpperArm", "RootPart", "Unknown"},
    callback = function(Value)
        Aimbot.HitPart = Value
    end
}

RageMain:AddList{
    text = "Aimbot Type",
    flag = "Aimbot Type",
    value = "Mouse2 to Aimbot",
    values = {"Mouse2 to Aimbot", "Near Mouse to Aimbot"}
}

RageMain:AddToggle{
    text = "Trigger Bot",
    flag = "TriggerBotEnabled",
    callback = function(State)
        if not State then
            return
        end

        library:AddConnection(runService.Heartbeat, "Aimbot Trigger", function()
		if not library then library.connections["Aimbot Trigger"]:Disconnect() end
            if library.open then
                return
            end

            if not library.flags["AimbotEnabled"] then
                return
            end

            if library.flags["TriggerBotEnabled"] then
                if not AimlockTarget or xd then return end
                RunTriggerbot()
            else
                library.connections["Aimbot Trigger"]:Disconnect()
            end
        end)
    end
}

RageMain:AddSlider{
    text = "Trigger CoolDown",
    flag = "Trigger CoolDown",
    min = 0,
    max = 1,
    value = 0.15,
    float = 0.1
}

RageMain:AddDivider("Human Modifications");

RageMain:AddToggle{
    text = "No Clip",
    flag = "NoClipEnabled",
    callback = function(State)
        SNot(nil, "No Clip is " .. tostring(library.flags["NoClipEnabled"]))
        if not State then
            return
        end

        library:AddConnection(runService.Heartbeat, "NoClip", function()
            -- if library and library.flags["NoClipEnabled"] then
            --     if game:GetService("Players").LocalPlayer.Character then
            --         for _, selfChar in pairs(game:GetService("Players").LocalPlayer.Character:GetDescendants()) do
            --             if selfChar:IsA("BasePart") and selfChar.CanCollide == true and selfChar.Name then
            --                 selfChar.CanCollide = false
            --             end
            --         end
            --     end
            -- else
            --    library.connections["NoClip"]:Disconnect()
            -- end

            if library and library.flags["NoClipEnabled"] then
                local Char = Players[Client].Character
                Char = Char and FFCoC(Char, "Humanoid")
                if Char then
                    for _, child in pairs(Char.Parent:GetDescendants()) do
                        if child:IsA("BasePart") or child:IsA("Part") or child:IsA("MeshPart") and child.CanCollide == true then
                            child.CanCollide = false
                        end
                    end
                end
            else
                library.connections["NoClipEnabled"]:Disconnect()

                local Char = Players[Client].Character
                Char = Char and FFCoC(Char, "Humanoid")
                if Char then
                    for _, child in pairs(Char.Parent:GetDescendants()) do
                        if child:IsA("BasePart") or child:IsA("Part") or child:IsA("MeshPart") then
                            child.CanCollide = true
                        end
                    end
                end
            end
        end)
    end
}:AddBind{
    flag = "NoClipBind",
    key = "None",
	callback = function()
		library.options["NoClipEnabled"]:SetState(not library.flags["NoClipEnabled"])
	end
}

RageMain:AddToggle{
    text = "TP Walk",
    flag = "TPWalkEnabled",
    callback = function(State)
        SNot(nil, "TP Walk is " .. tostring(library.flags["TPWalkEnabled"]))
        if not State then
            return
        end

        library:AddConnection(runService.Heartbeat, "TPWalk", function()
            if library and library.flags["TPWalkEnabled"] then
                if game:GetService("Players").LocalPlayer.Character and game:GetService("Players").LocalPlayer.Character.Humanoid and game:GetService("Players").LocalPlayer.Character.Humanoid.Parent then
                    if game:GetService("Players").LocalPlayer.Character.Humanoid.MoveDirection.Magnitude > 0 then
                        game:GetService("Players").LocalPlayer.Character:TranslateBy(game:GetService("Players").LocalPlayer.Character.Humanoid.MoveDirection * library.flags["TPSpeed"] / 10)
                    end
                end
            else
                library.connections["TPWalkEnabled"]:Disconnect()
            end
        end)

        -- library:AddConnection(runService.RenderStepped, "TPBypass", function()
        --     if library.flags["TPWalkEnabled"] then
        --         for _, v in pairs(getconnections(game:GetService("UserInputService").WindowFocused)) do
        --             v:Disable()
        --         end
            
        --         for _, v in pairs(getconnections(game:GetService("UserInputService").WindowFocusReleased)) do
        --             v:Disable()
        --         end
        --     else
        --         library.connections["TPBypass"]:Disconnect()
        --     end
        -- end)
    end
}:AddBind{
    flag = "TPWalkBind",
    key = "None",
	callback = function()
		library.options["TPWalkEnabled"]:SetState(not library.flags["TPWalkEnabled"])
	end
}

RageMain:AddSlider{
    text = "TP Speed",
    flag = "TPSpeed",
    min = 0.05,
    max = 25,
    value = 0.1,
    float = 0.1
}

RageMain:AddToggle{
    text = "Infinite Jump",
    flag = "InfiniteJumpEnabled",
    callback = function()
        SNot(nil, "Infinite Jump is " .. tostring(library.flags["InfiniteJumpEnabled"]))
    end
}:AddBind{
    flag = "InfiniteJumpBind",
    key = "None",
	callback = function()
		library.options["InfiniteJumpEnabled"]:SetState(not library.flags["InfiniteJumpEnabled"])
	end
}

local RageThird = RageColunm1:AddSection("Weapon Modifications")

RageThird:AddToggle{
    text = "No Recoil",
    callback = function(State)
        if not State then
            return
        end
        SNot(nil, "No Recoil is true")

        pcall(function()

            for i, v in pairs(getgc(true)) do
                if type(v) == "table" and rawget(v, "SpreadBase") then
                    setreadonly(v, false)
                    v.SpreadBase = 0
                    v.SpreadAddFPSZoom = 0 -- 0.125
                    v.SpreadAddFPSHip = 0 -- 4.42
                    v.SpreadAddTPSZoom = 0 -- 4.42
                    v.SpreadAddTPSHip = 0 -- 4.42
                    v.PivotPoint = Vector3.new(0,0,0)
                    v.KickUpForce = 0 -- 0.5
                    v.KickUpSpeed = 0 -- 1.8
                    v.KickUpBounce = 0 -- 1
                    v.KickUpCameraInfluence = 0 -- 1.3
                    v.KickUpGunInfluence = 0 -- 0.5
                    v.RaiseForce = 0
                    v.RaiseSpeed = 0 -- 10
                    v.RaiseBounce = 0 -- 1
                    v.RaiseInfluence = 0 -- 1
                    v.ShiftForce = 0 -- 0.67
                    v.ShiftSpeed = 0 -- 2.65
                    v.ShiftBounce = 0 -- 1
                    v.ShiftCameraInfluence = 0 -- 0.4
                    v.ShiftGunInfluence = 0 -- 0.5
                    v.SlideForce = 0 -- 3.88
                    v.SlideSpeed = 0 -- 3.52
                    v.SlideBounce = 0 -- 1
                    v.SlideInfluence = 0 -- 2.2
                    v.ShiftRoll = 0 -- 10
                    v.RollRightBias = 0 -- 1
                    v.RollLeftBias = 0 -- -1
                end
            end
        end)
    end
}

RageThird:AddToggle{
    text = "Fast Fire Rate",
    callback = function(State)
        if not State then
            return
        end
        SNot(nil, "Fast Fire Rate is true")

        pcall(function()
            local str = 'FireRate'
        
            for i, v in pairs(getgc(true)) do
                if type(v) == 'table' and rawget(v, str) then
                    setreadonly(v, false)
                    v[str] = 1000
                end
            end
        end)
    end
}

local RageColunm2 = RageTab:AddColumn();

local RageFourth = RageColunm2:AddSection("Real Misc")

RageFourth:AddToggle{
    text = "Freeze Zombies",
    flag = "FreezeRay",
    callback = function(State)
        SNot(nil, "Freeze Peasants is " .. tostring(library.flags["FreezeRay"]))
        if not State then
            return
        end

        library:AddConnection(runService.Heartbeat, "Freeze Loop", function()
            pcall(function()
                if library and library.flags["FreezeRay"] then
                    for _, obj in next, workspace.Zombies.Mobs:GetChildren() do
                        if obj:FindFirstChild("HumanoidRootPart") then
                            obj.HumanoidRootPart.Anchored = true
                        end
                    end
                   task.wait()
                else
                    library.connections["Freeze Loop"]:Disconnect()
    
                    for _, obj in next, workspace.Zombies.Mobs:GetChildren() do
                        if obj:FindFirstChild("HumanoidRootPart") then
                            obj.HumanoidRootPart.Anchored = false
                        end
                    end
                   task.wait()
                end
            end)
        end)
    end
}:AddBind{
    flag = "FreezeBind",
    key = "None",
	callback = function()
		library.options["FreezeRay"]:SetState(not library.flags["FreezeRay"])
	end
}

local RageFifth = RageColunm2:AddSection("Movement")

RageFifth:AddToggle{
    text = "Scaffold",
    flag = "Scaffold Enabled",
    callback = function(State)
        SNot(nil, "Scaffold is " .. tostring(library.flags["Scaffold Enabled"]))
        if not State then
            return
        end

        library:AddConnection(runService.Heartbeat, "Scaffold Loop", function()
            pcall(function()
                if library and library.flags["Scaffold Enabled"] then
                    local work = game:GetService("Workspace")
                    _G.st = nil
                    
                    if not _G.st then
                        coroutine.resume(coroutine.create(function()
                            local s = Instance.new("Part", work)
                            s.Transparency = 0.5
                            s.Anchored = true
                            s.Position = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position + Vector3.new(0, library.flags["Scaffold Height"], 0)
                            wait(5)
                            s:Destroy()
                        end))
                    end
                else
                    library.connections["Scaffold Loop"]:Disconnect()
                    _G.st = 1
                end
            end)
        end)
    end
}:AddBind{
    flag = "ScaffoldBind",
    key = "None",
	callback = function()
		library.options["Scaffold Enabled"]:SetState(not library.flags["Scaffold Enabled"])
	end
}

RageFifth:AddSlider{
    text = "Scaffold Height",
    flag = "Scaffold Height",
    min = -8,
    max = -3,
    value = -3,
    float = 0.1
}

--Get functions
local function GetHitboxFromChar(Character, BodyPart)
	BodyPart = BodyPart or "Head"
	if not Character then
		return
	end
	return FFC(Character, BodyPart) or FFC(Character, "UpperTorso")
end

local RayParams = RaycastParams.new()
RayParams.FilterType = Enum.RaycastFilterType.Blacklist
RayParams.IgnoreWater = true
local function RayCheck(ClientChar, To, Distance)
	local Ignores = {
		Camera,
		ClientChar
	}
	RayParams.FilterDescendantsInstances = Ignores
	return game:GetService("Workspace"):Raycast(Camera.CFrame.p, (To - Camera.CFrame.p).Unit * Distance, RayParams)
end

local Sub = Vector3.new(- 0.1, - 0.1, - 0.1)
local function GetCorners(Object, Esp)
	local CF = Object.CFrame
	local Size = (Object.Size / 2)
	Size = Esp and Size or Size - Sub
	return {
		Vector3.new(CF.X + Size.X, CF.Y + Size.Y, CF.Z + Size.Z);
		Vector3.new(CF.X - Size.X, CF.Y + Size.Y, CF.Z + Size.Z);

		Vector3.new(CF.X - Size.X, CF.Y - Size.Y, CF.Z - Size.Z);
		Vector3.new(CF.X + Size.X, CF.Y - Size.Y, CF.Z - Size.Z);

		Vector3.new(CF.X - Size.X, CF.Y + Size.Y, CF.Z - Size.Z);
		Vector3.new(CF.X + Size.X, CF.Y + Size.Y, CF.Z - Size.Z);

		Vector3.new(CF.X - Size.X, CF.Y - Size.Y, CF.Z + Size.Z);
		Vector3.new(CF.X + Size.X, CF.Y - Size.Y, CF.Z + Size.Z);
	}
end

--Player data
local ESPObjects = {}

local function Track(Player)
	-- too lazy to add a proper check, discontinued anyway so
	if not (Player.ClassName == "Player" or Player.ClassName == "Folder") then
		return
	end

	for i, v in next, ESPObjects do
		if not v.Active then
			v.Active = true
			ESPObjects[Player] = v
			break
		end
	end
	if not ESPObjects[Player] then
		ESPObjects[Player] = {
			ChamsOutline = library:Create("Folder", {
				Parent = library.base
			}),
			Chams = library:Create("Folder", {
				Parent = library.base
			}),
			ChamsStep = 0,
			BoxOutline = library:Create("Square", {
				Thickness = 1
			}),
			BoxInline = library:Create("Square", {
				Thickness = 1
			}),
			Box = library:Create("Square", {
				Thickness = 1
			}),
			LookAt = library:Create("Line", {
				Thickness = 1
			}),
			NameText = library:Create("Text", {
				Size = 15,
				Font = 3,
				Center = true,
				Outline = true
			}),
			ToolText = library:Create("Text", {
				Size = 15,
				Font = 3,
				Center = true,
				Outline = true
			}),
			InventoryText = library:Create("Text", {
				Size = 15,
				Font = 3,
				Center = true,
				Outline = true
			}),
			DistanceText = library:Create("Text", {
				Size = 15,
				Font = 3,
				Center = true,
				Outline = true
			}),
			BarOutline = library:Create("Square", {
				Filled = true
			}),
			Bar = library:Create("Square", {
				Filled = true
			}),
			HealthText = library:Create("Text", {
				Color = Color3.new(1, 1, 1),
				Size = 14,
				Font = 3,
				Center = true,
				Outline = true
			}),
			DirectionLine = library:Create("Line", {
				Thickness = 1
			}),
			DirectionDot = library:Create("Square", {
				Size = Vector2.new(7, 7),
				Filled = true
			}),
			--RadarHeight = library:Create("TextLabel", {BackgroundTransparency = 1, Text = "T", TextColor3 = Color3.new(), Font = Enum.Font.SciFi, TextSize = 13}),
			RadarBlip = library:Create("Circle", {
				Radius = 4,
				Filled = true
			}),
			OOVArrow = library:Create"Triangle",
			Active = true,

			Invis = function()
				ESPObjects[Player].Visible = false
				ESPObjects[Player].BoxOutline.Visible = false
				ESPObjects[Player].BoxInline.Visible = false
				ESPObjects[Player].Box.Visible = false
				ESPObjects[Player].BarOutline.Visible = false
				ESPObjects[Player].Bar.Visible = false
				ESPObjects[Player].HealthText.Visible = false
				ESPObjects[Player].LookAt.Visible = false
				ESPObjects[Player].NameText.Visible = false
				ESPObjects[Player].ToolText.Visible = false
				ESPObjects[Player].InventoryText.Visible = false
				ESPObjects[Player].DistanceText.Visible = false
				ESPObjects[Player].DirectionLine.Visible = false
				ESPObjects[Player].DirectionDot.Visible = false
			end,

			InvisChams = function()
				ESPObjects[Player].ChamsVisible = false
				for _, Cham in next, ESPObjects[Player].Chams:GetChildren() do
					Cham.Transparency = 1
				end
			end,

			InvisChamsOutline = function()
				ESPObjects[Player].ChamsOutlineVisible = false
				for _, Cham in next, ESPObjects[Player].ChamsOutline:GetChildren() do
					Cham.Transparency = 1
				end
			end,

			InvisRadar = function()
				ESPObjects[Player].RadarVisible = false
				ESPObjects[Player].RadarBlip.Visible = false
			end
		}
	end

	local Character
	local MaxHealth
	Players[Player] = setmetatable({
		Priority = false,
		Whitelist = false,
		LastPosition = V3Empty
	}, {
		__index = function(self, index)
			if index == "Character" then
				if Player.ClassName == "Model" then
					Character = Player
				else
					Character = Player.Character or FFC(game:GetService("Workspace"), Player.Name)
				end
				if Character then
					return Character
				end
			else
				if not Character then
					return (index == "Health" or index == "MaxHealth" and 0)
				end
				if index == "Health" then
					local Health
					local Humanoid = FFCoC(Character, "Humanoid")
						if Humanoid then
							Health, MaxHealth = Humanoid.Health, Humanoid.MaxHealth
						end
					return Health and (Health > 0 and Health) or 0
				elseif index == "MaxHealth" then
					return MaxHealth or 0
				elseif index == "Enemy" then
					if Player.ClassName == "Model" then
						return true
					else
						if Client.Team then
                            return Client.Team ~= Player.Team
                        else
                            return true
                        end
					end
				end
			end
		end
	})
end

local function AddTracker(Tracking)
	for _, Player in next, Tracking:GetChildren() do
		Track(Player)
	end

	library:AddConnection(Tracking.ChildAdded, "Child Added", function(Player)
        if not library then library.connections["Child Added"]:Disconnect() end
		wait(1)
		Track(Player)
	end)

	library:AddConnection(Tracking.ChildRemoved, "Child Removed", function(Player)
        if not library then library.connections["Child Removed"]:Disconnect() end
		if Players[Player] then
			Players[Player] = nil
			if ESPObjects[Player] then
				ESPObjects[Player].Active = false
				ESPObjects[Player].OOVArrow.Visible = false
				ESPObjects[Player].Invis()
				ESPObjects[Player].InvisChams()
				ESPObjects[Player].InvisChamsOutline()
				ESPObjects[Player].InvisRadar()
			end
		end
	end)
end

--UI
--local RadarWindow = library:Create("Circle", {NumSides = 64, Radius = 100, Filled = true, Color = Color3.fromRGB(30, 30, 30)})
local Draw = library:Create("Circle", {
	NumSides = 64,
	Thickness = 1
})

local CrosshairTop = library:Create("Square", {
	Filled = true
})
local CrosshairLeft = library:Create("Square", {
	Filled = true
})
local CrosshairRight = library:Create("Square", {
	Filled = true
})
local CrosshairBottom = library:Create("Square", {
	Filled = true
})

--Esp module

local VisualsTab = library:AddTab"Visuals"
local VisualsColumn = VisualsTab:AddColumn()
local VisualsColumn1 = VisualsTab:AddColumn()

local HealthBarAddon = Vector2.new(3)
local PlayerEspSection = VisualsColumn:AddSection"ESP"
local OldStep = 0
PlayerEspSection:AddToggle({
	text = "Enabled",
	flag = "Esp Enabled",
	callback = function(State)
		if not State then
			--RadarWindow.Visible = false
			if library.connections["Player ESP"] then
				library.connections["Player ESP"]:Disconnect()
				for _, v in next, ESPObjects do
					v.OOVArrow.Visible = false
					v.Invis()
					v.InvisChams()
					v.InvisChamsOutline()
				end
			end
			return
		end

		--RadarWindow.Visible = library.flags["Radar Enabled"]
		library:AddConnection(runService.RenderStepped, "Player ESP", function(Step)
            if not library and library.connections["Player ESP"] then library.connections["Player ESP"]:Disconnect() end
			OldStep = OldStep + Step
			if OldStep < 0.016 then
				return
			end
			OldStep = 0
			for Player, Data in next, Players do
                if Player == Client then
                    continue
                end
                local Objects = ESPObjects[Player]
                local Character = Data.Character
                local Show
                local Team = Data.Enemy
                if Data.Whitelist then
                    Show = library.flags["Esp Show Whitelisted"]
                else
                    Show = Data.Priority or Team
                end
                if Show and Character then
                    local Health = Character.Stats.Health.Base.Value
                    if Health > 0.1 then
                        Team = Team and "Enemy" or "Team"
                        local Pos, Size = GBB(Character)
                        local RootPart = FFC(Character, "HumanoidRootPart")
                        if RootPart and (Pos.Position - RootPart.Position).Magnitude > 5 then
                            Pos = RootPart.CFrame
                        end
                        local Distance = (Camera.CFrame.p - Pos.Position).Magnitude
                        if Distance < library.flags["Esp Max Distance"] then
                            local ScreenPosition, OnScreen = WTVP(Camera, Pos.Position)
                            local ClientChar = Players[Client].Character
                            local Ignores = {
                                Camera,
                                ClientChar
                            }
                            -- if library.flags["Visible Check"] then
                            --     local Hit = RayCheck(ClientChar, Pos.Position, Distance)
                            --     Hit = Hit and Hit.Instance and FFA(Hit.Instance, Character.Name)
                            --     Hit = Hit and Hit == Character
                            -- end
                            local Occluded = Hit and " " or " Occluded "
                            local Visible = true
                            -- if library.flags[Team .. " Visible Only"] then
                            --     Visible = Hit ~= nil
                            -- end
                            local Color = (library.flags["Highlight Target"] and library.Aimbot.Player == Player and library.flags["Aimbot Highlight Color"])
                            Color = Color or (Data.Priority and library.flags["Player Priority Color"] or Data.Whitelist and library.flags["Player Whitelist Color"])
                            Color = Color

                            --
                            -- if library.flags["Radar Enabled"] and Distance < RadarWindow.Radius then
                            --     Objects.RadarBlip.Visible = true
                            --     local RelativePos = Camera.CFrame:Inverse() * Pos.Position
                            --     local Middle = Camera.ViewportSize / 2
                            --     local Degrees = math.deg(math.atan2(- RelativePos.Y, RelativePos.X)) * math.pi / 180
                            --     local EndPos = Middle + (Vector2.new(math.cos(Degrees), math.sin(Degrees)) * Distance)
                            --     Objects.RadarBlip.Position = EndPos
                            --     Objects.RadarBlip.Color = Color or Color3.new(1, 1, 1)
                            --     if not Objects.Visible then
                            --         continue
                            --     end
                            -- else
                            --     Objects.RadarBlip.Visible = false
                            -- end
                            --]]
                            if Visible then
                                local Transparency = (Data.Priority) and 1 or 1 - (Distance / library.flags["Esp Max Distance"])
                                if OnScreen then
                                    Objects.Visible = true
                                    Objects.OOVArrow.Visible = false

                                    --local xMin, yMin = 9e9, 9e9
                                    --local xMax, yMax = 0, 0
                                    local BoxColor = Color or library.flags[Team .. Occluded .. "Box Color"]
                                    local TextColor = Color or library.flags[Team .. Occluded .. "Info Color"]
                                    local ToolColor = Color or library.flags[Team .. Occluded .. "Tool Color"]
                                    local InventoryColor = Color or library.flags[Team .. Occluded .. "Inventory Color"]
                                    local LookColor = Color or library.flags[Team .. Occluded .. "Look Color"]
                                    local ChamsColor = Color or library.flags[Team .. Occluded .. "Chams Color"]
                                    local ChamsOutlineColor = Color or library.flags[Team .. Occluded .. "Chams Outline Color"]
                                    local DirectionColor = Color or library.flags[Team .. Occluded .. "Direction Color"]

                                    --Chams
                                    if library.flags[Team .. " Chams Enabled"] and Distance < 600 then
                                        Objects.ChamsVisible = true
                                        Objects.Chams.Parent = library.base
                                        Objects.ChamsStep = Objects.ChamsStep + Step
                                        if Objects.ChamsStep > 0.2 then
                                            Objects.ChamsStep = 0
                                            for _, PartName in next, UseBodyParts do
                                                local Part = FFC(Character, PartName, true)
                                                if Part then
                                                    local Cham = FFC(Objects.Chams, PartName) or (function()
                                                        return library:Create("BoxHandleAdornment", {
                                                            Name = PartName,
                                                            AlwaysOnTop = true,
                                                            ZIndex = 2,
                                                            Parent = Objects.Chams
                                                        })
                                                    end)()
                                                    Cham.Size = Part.Size
                                                    Cham.Adornee = Part
                                                    Cham.Transparency = library.flags[Team .. " Chams Transparency"]
                                                    Cham.Color3 = ChamsColor
                                                    if library.flags[Team .. " Chams Outline"] then
                                                        Objects.ChamsOutlineVisible = true
                                                        Objects.ChamsOutline.Parent = library.base
                                                        Cham = FFC(Objects.ChamsOutline, PartName) or (function()
                                                            return library:Create("BoxHandleAdornment", {
                                                                Name = PartName,
                                                                AlwaysOnTop = true,
                                                                ZIndex = 1,
                                                                Parent = Objects.ChamsOutline
                                                            })
                                                        end)()
                                                        Cham.Size = Part.Size * 1.2
                                                        Cham.Adornee = Part
                                                        Cham.Transparency = library.flags[Team .. " Chams Transparency"]
                                                        Cham.Color3 = ChamsOutlineColor
                                                    else
                                                        if Objects.ChamsOutlineVisible then
                                                            Objects.InvisChamsOutline()
                                                        end
                                                    end
                                                else
                                                    local Cham = FFC(Objects.Chams, PartName)
                                                    if Cham then
                                                        Cham.Visible = false
                                                    end
                                                    Cham = FFC(Objects.ChamsOutline, PartName)
                                                    if Cham then
                                                        Cham.Visible = true
                                                    end
                                                end
                                            end
                                        end
                                    else
                                        if Objects.ChamsVisible then
                                            Objects.InvisChams()
                                            Objects.InvisChamsOutline()
                                        end
                                    end

                                    --ESP
                                    local Height = (Camera.CFrame - Camera.CFrame.p) * Vector3.new(0, (math.clamp(Size.Y, 1, 10) + 0.5) / 2, 0)
                                    Height = math.abs(WTSP(Camera, Pos.Position + Height).Y - WTSP(Camera, Pos.Position - Height).Y)
                                    --local ViewportSize = Camera.ViewportSize
                                    --local Size = ((ViewportSize.X + ViewportSize.Y) / Distance) * (1 - (Camera.FieldOfView / 200))
                                    Size = library.round(Vector2.new(Height / 2, Height))
                                    local Position = library.round(Vector2.new(ScreenPosition.X, ScreenPosition.Y) - (Size / 2))
                                    if library.flags[Team .. " Box Enabled"] then
                                        Objects.Box.Visible = true
                                        Objects.Box.Color = BoxColor
                                        Objects.Box.Size = Size
                                        Objects.Box.Position = Position
                                        Objects.Box.Transparency = Transparency
                                        Objects.Box.Filled = false
                                        Objects.BoxOutline.Visible = true
                                        Objects.BoxOutline.Size = Size + V222
                                        Objects.BoxOutline.Position = Position - V211
                                        Objects.BoxOutline.Transparency = Transparency
                                        Objects.BoxOutline.Filled = false
                                        Objects.BoxInline.Visible = true
                                        Objects.BoxInline.Size = Size - V222
                                        Objects.BoxInline.Position = Position + V211
                                        Objects.BoxInline.Transparency = Transparency
                                        Objects.BoxInline.Filled = false
                                    else
                                        Objects.Box.Visible = false
                                        Objects.BoxOutline.Visible = false
                                        Objects.BoxInline.Visible = false
                                    end
                                    if library.flags[Team .. " Health Enabled"] then
                                        local MaxHealth = 100 + Character.Stats.Health.Bonus.Value -- Data.MaxHealth
                                        local HealthPerc = Health / MaxHealth
                                        local Position = Position - HealthBarAddon
                                        local Size = Vector2.new(1, Size.Y)
                                        Objects.BarOutline.Visible = true
                                        Objects.BarOutline.Position = Position - V211
                                        Objects.BarOutline.Size = Size + V222
                                        Objects.BarOutline.Transparency = Transparency
                                        Objects.Bar.Visible = true
                                        Objects.Bar.Color = Color3.new(1 - HealthPerc, HealthPerc, 0.2)
                                        Objects.Bar.Position = Position + Vector2.new(0, Size.Y)
                                        Objects.Bar.Size = Vector2.new(1, - Size.Y * HealthPerc)
                                        Objects.Bar.Transparency = Transparency
                                        Objects.HealthText.Visible = HealthPerc < 0.99
                                        Objects.HealthText.Position = Objects.Bar.Position + Objects.Bar.Size - Vector2.new(0, 7)
                                        Objects.HealthText.Text = tostring(library.round(Health)) or ""
                                        Objects.HealthText.Transparency = Transparency
                                    else
                                        Objects.BarOutline.Visible = false
                                        Objects.Bar.Visible = false
                                        Objects.HealthText.Visible = false
                                    end
                                    if library.flags[Team .. " Info"] then
                                        Objects.NameText.Visible = true
                                        Objects.NameText.Text = Player.Name
                                        Objects.NameText.Position = Position + Vector2.new(Size.X / 2, - Objects.NameText.TextBounds.Y - 1)
                                        Objects.NameText.Color = TextColor
                                        Objects.NameText.Transparency = Transparency
                                        Objects.DistanceText.Visible = true
                                        Objects.DistanceText.Text = "[" .. library.round(Distance) .. "m]"
                                        Objects.DistanceText.Position = Position + Vector2.new(Size.X / 2, Size.Y + 2)
                                        Objects.DistanceText.Color = TextColor
                                        Objects.DistanceText.Transparency = Transparency
                                    else
                                        Objects.NameText.Visible = false
                                        Objects.DistanceText.Visible = false
                                    end
                                    if library.flags[Team .. " Tool"] then
                                        Objects.ToolText.Visible = true
                                        if Character.Equipped:FindFirstChildOfClass("Model") then
                                            Objects.ToolText.Text = "[" .. Character.Equipped:FindFirstChildOfClass("Model").Name .. "]"
                                        else
                                            Objects.ToolText.Visible = false
                                        end
                                        Objects.ToolText.Position = Position + Vector2.new(Size.X / 16, Size.Y + 16)
                                        Objects.ToolText.Color = ToolColor
                                        Objects.ToolText.Transparency = Transparency
                                    else
                                        Objects.ToolText.Visible = false
                                    end
                                    -- local function getPlayerFromCharacter(character)
                                    --     for _, player in pairs(game:GetService("Players"):GetPlayers()) do
                                    --         if player.Character == character then
                                    --             return player
                                    --         end
                                    --     end
                                    -- end
                                    -- local function getToolFromPlayer(player)
                                    --     local t = {}
                                    --     for _, Tool in next, player.Backpack:GetChildren() do
                                    --         if Tool:IsA("Tool") then
                                    --             table.insert(t, Tool.Name)
                                    --         end
                                    --     end
                                    --     if t[1] and not t[2] then
                                    --         return t[1]
                                    --     end
                                    --     if t[2] and not t[3] then
                                    --         return t[1] .. ", " .. t[2]
                                    --     end
                                    --     if t[3] and not t[4] then
                                    --         return t[1] .. ", " .. t[2] .. ", " .. t[3]
                                    --     end
                                    --     if t[4] and not t[5] then
                                    --         return t[1] .. ", " .. t[2] .. ", " .. t[3] .. ", " .. t[4]
                                    --     end
                                    --     if t[5] and not t[6] then
                                    --         return t[1] .. ", " .. t[2] .. ", " .. t[3] .. ", " .. t[4] .. ", " .. t[5]
                                    --     end
                                    --     if t[6] and not t[7] then
                                    --         return t[1] .. ", " .. t[2] .. ", " .. t[3] .. ", " .. t[4] .. ", " .. t[5] .. ", " .. t[6]
                                    --     end
                                    --     if t[7] and not t[8] then
                                    --         return t[1] .. ", " .. t[2] .. ", " .. t[3] .. ", " .. t[4] .. ", " .. t[5] .. ", " .. t[6] .. ", " .. t[7]
                                    --     end
                                    --     if t[8] and not t[9] then
                                    --         return t[1] .. ", " .. t[2] .. ", " .. t[3] .. ", " .. t[4] .. ", " .. t[5] .. ", " .. t[6] .. ", " .. t[7] .. ", " .. t[8]
                                    --     end
                                    --     if t[9] and not t[10] then
                                    --         return t[1] .. ", " .. t[2] .. ", " .. t[3] .. ", " .. t[4] .. ", " .. t[5] .. ", " .. t[6] .. ", " .. t[7] .. ", " .. t[8] .. ", " .. t[9]
                                    --     end
                                    --     if t[10] and not t[11] then
                                    --         return t[1] .. ", " .. t[2] .. ", " .. t[3] .. ", " .. t[4] .. ", " .. t[5] .. ", " .. t[7] .. ", " .. t[7] .. ", " .. t[8] .. ", " .. t[9] .. ", " .. t[10]
                                    --     end
                                    -- end
                                    -- local function GetInventory(player)
                                    --     if player:FindFirstChild("Stats") and player.Stats.Primary.Value ~= nil or "" and player.Stats.Secondary.Value ~= nil or "" then
                                    --         return player.Stats.Primary.Value and player.Stats.Secondary.Value
                                    --     end
                                    -- end
                                    -- if library.flags[Team .. " Inventory"] then
                                    --     Objects.InventoryText.Visible = true
                                    --     if getPlayerFromCharacter(Character).Backpack:FindFirstChildOfClass("Tool") then
                                    --         Objects.InventoryText.Text = "[" .. getToolFromPlayer(getPlayerFromCharacter(Character)) .. "]"
                                    --     else
                                    --         Objects.InventoryText.Visible = false
                                    --     end
                                    --     Objects.InventoryText.Position = Position + Vector2.new(Size.X / 30, Size.Y + 30)
                                    --     Objects.InventoryText.Color = InventoryColor
                                    --     Objects.InventoryText.Transparency = Transparency
                                    -- else
                                    --     Objects.InventoryText.Visible = false
                                    -- end
                                    if library.flags[Team .. " Look Enabled"] then
                                        HeadPosition = GetHitboxFromChar(Character, "Head")
                                        if HeadPosition then
                                            Objects.LookAt.Visible = true
                                            HeadPosition1 = WTVP(Camera, HeadPosition.Position)
                                            local To = WTVP(Camera, HeadPosition.Position + (HeadPosition.CFrame.LookVector * 8))
                                            Objects.LookAt.From = Vector2.new(HeadPosition1.X, HeadPosition1.Y)
                                            Objects.LookAt.To = Vector2.new(To.X, To.Y)
                                            Objects.LookAt.Color = LookColor
                                            Objects.LookAt.Transparency = Transparency
                                        else
                                            Objects.LookAt.Visible = false
                                        end
                                    else
                                        Objects.LookAt.Visible = false
                                    end
                                    if library.flags[Team .. " Direction Enabled"] then
                                        Objects.DirectionLine.Visible = true
                                        Position = Position + (Size / 2)
                                        local PositionOffset2d = V2Empty
                                        local Diff = (Pos.Position - Data.LastPosition)
                                        if Diff.Magnitude > 0.01 then
                                            PositionOffset2d = library.round(Vector2.new(WTSP(Camera, Pos.Position + (Diff.Unit * 4)).X, Position.Y) - Position)
                                        end
                                        Objects.DirectionLine.From = Position
                                        Objects.DirectionLine.To = Position + PositionOffset2d
                                        Objects.DirectionLine.Color = DirectionColor
                                        Objects.DirectionLine.Transparency = Transparency
                                        if Distance < 600 then
                                            Objects.DirectionDot.Visible = true
                                            Objects.DirectionDot.Position = Objects.DirectionLine.To - V233
                                            Objects.DirectionDot.Color = DirectionColor
                                            Objects.DirectionDot.Transparency = Transparency
                                        else
                                            Objects.DirectionDot.Visible = false
                                        end
                                    else
                                        Objects.DirectionLine.Visible = false
                                        Objects.DirectionDot.Visible = false
                                    end
                                    Data.LastPosition = Pos.Position
                                    continue
                                end
                                if library.flags[Team .. " OOV Arrows"] then
                                    Objects.OOVArrow.Visible = true
                                    Objects.OOVArrow.Color = Color or library.flags[Team .. Occluded .. "OOV Arrows Color"]
                                    local RelativePos = Camera.CFrame:Inverse() * Pos.Position
                                    local Middle = Camera.ViewportSize / 2
                                    local Degrees = math.deg(math.atan2(- RelativePos.Y, RelativePos.X)) * math.pi / 180
                                    local EndPos = Middle + (Vector2.new(math.cos(Degrees), math.sin(Degrees)) * library.flags[Team .. " Out Of View Scale"])
                                    Objects.OOVArrow.PointB = EndPos + (- (Middle - EndPos).Unit * 15)
                                    Objects.OOVArrow.PointA = EndPos
                                    Objects.OOVArrow.PointC = EndPos
                                    Objects.OOVArrow.Transparency = Transparency
                                    if not Objects.Visible then
                                        continue
                                    end
                                end
                            end
                        end
                    end
                end
                Objects.OOVArrow.Visible = false
                if Objects.Visible then
                    Objects.Invis()
                    Objects.InvisChams()
                    Objects.InvisChamsOutline()
                    Objects.InvisRadar()
                end
            end
		end)
	end
}):AddBind({
	callback = function()
		library.options["Esp Enabled"]:SetState(not library.flags["Esp Enabled"])
	end
})
PlayerEspSection:AddSlider({
	text = "Max Distance",
	textpos = 2,
	flag = "Esp Max Distance",
	value = 10000,
	min = 0,
	max = 10000
})
PlayerEspSection:AddToggle({
	text = "Show Teammate Players",
	flag = "Esp Show Whitelisted"
})

--PlayerEspSection:AddDivider"Radar"
--PlayerEspSection:AddToggle({text = "Enabled", flag = "Radar Enabled", callback = function(State)
--	RadarWindow.Visible = State and library.flags["Esp Enabled"]
--end})
local VisualsWorld = VisualsColumn:AddSection"Lighting"
VisualsWorld:AddToggle({
	text = "Clock Time",
    flag = "Clock Time Enabled"
}):AddSlider({
	flag = "Clock Time Amount",
	min = 0,
	max = 24,
	float = 0.1,
	value = LightingSpoof.ClockTime,
})
VisualsWorld:AddToggle({
	text = "Brightness",
    flag = "Brightness Enabled"
}):AddSlider({
	flag = "Brightness Amount",
	min = 0,
	max = 100,
	float = 0.1,
	value = LightingSpoof.Brightness
})
VisualsWorld:AddToggle({
	text = "Ambient",
	flag = "Ambient Lighting"
}):AddColor({
	flag = "Outdoor Ambient",
	color = LightingSpoof.OutdoorAmbient
}):AddColor({
	flag = "Indoor Ambient",
	color = LightingSpoof.Ambient
})
VisualsWorld:AddToggle({
	text = "Color Shift",
    flag = "Color Shift Enabled"
}):AddColor({
	flag = "Color Shift Top",
	color = LightingSpoof.ColorShift_Top
})

local VisualsMiscSection = VisualsColumn:AddSection"Miscellaneous"

-- VisualsMiscSection:AddToggle({
-- 	text = "FOV Changer",
--     flag = "FOV Changer Enabled",
-- 	-- callback = function(State)
-- 	-- 	library.options["Dynamic Custom FOV"].main.Visible = State
-- 	-- end
-- }):AddSlider({
-- 	flag = "FOV Amount",
-- 	min = 0,
-- 	max = 120
-- })
-- VisualsMiscSection:AddToggle({
-- 	text = "Dynamic",
-- 	flag = "Dynamic Custom FOV"
-- })
-- VisualsMiscSection:AddToggle({
-- 	text = "Zoom",
-- 	flag = "FOV Zoom Enabled"
-- }):AddSlider({
-- 	flag = "FOV Zoom Amount",
-- 	min = 5,
-- 	max = 50
-- }):AddBind({
-- 	flag = "FOV Zoom Key",
-- 	mode = "hold"
-- })

VisualsMiscSection:AddDivider"Crosshair"
VisualsMiscSection:AddToggle({
	text = "Enabled",
	flag = "Crosshair Enabled",
	callback = function(State)
		library.options["Crosshair T-Shape"].main.Visible = State
		library.options["Crosshair Size"].main.Visible = State
		library.options["Crosshair Gap"].main.Visible = State
		library.options["Crosshair Thickness"].main.Visible = State
		CrosshairTop.Visible = State and not library.flags["Crosshair T-Shape"]
		CrosshairLeft.Visible = State
		CrosshairRight.Visible = State
		CrosshairBottom.Visible = State
	end
}):AddColor({
	callback = function(Color)
		CrosshairTop.Color = Color
		CrosshairLeft.Color = Color
		CrosshairRight.Color = Color
		CrosshairBottom.Color = Color
	end,
	trans = 1,
	calltrans = function(Transparency)
		CrosshairTop.Transparency = Transparency
		CrosshairLeft.Transparency = Transparency
		CrosshairRight.Transparency = Transparency
		CrosshairBottom.Transparency = Transparency
	end
})
VisualsMiscSection:AddToggle({
	text = "T-Shape",
	flag = "Crosshair T-Shape",
	callback = function(State)
		CrosshairTop.Visible = library.flags["Crosshair Enabled"] and not State
	end
})
VisualsMiscSection:AddSlider({
	text = "Size",
	textpos = 2,
	flag = "Crosshair Size",
	min = 1,
	max = 500,
	callback = function(Value)
		local Thickness = library.flags["Crosshair Thickness"]
		CrosshairTop.Size = Vector2.new(Thickness, - Value)
		CrosshairLeft.Size = Vector2.new(- Value, Thickness)
		CrosshairRight.Size = Vector2.new(Value, Thickness)
		CrosshairBottom.Size = Vector2.new(Thickness, Value)
	end
})
VisualsMiscSection:AddSlider({
	text = "Gap",
	textpos = 2,
	flag = "Crosshair Gap",
	min = 0,
	max = 20,
	float = 0.5
})
VisualsMiscSection:AddSlider({
	text = "Thickness",
	textpos = 2,
	flag = "Crosshair Thickness",
	min = 1,
	max = 20,
	float = 0.5,
	callback = function(Value)
		local Size = library.flags["Crosshair Size"]
		CrosshairTop.Size = Vector2.new(Value, - Size)
		CrosshairLeft.Size = Vector2.new(- Size, Value)
		CrosshairRight.Size = Vector2.new(Size, Value)
		CrosshairBottom.Size = Vector2.new(Value, Size)
	end
})

local PlayerEspEnemySection = VisualsColumn1:AddSection"Enemies"
-- PlayerEspEnemySection:AddToggle({
-- 	text = "Visible Only",
-- 	flag = "Enemy Visible Only"
-- })

-- PlayerEspEnemySection:AddToggle({
-- 	text = "Visible Check",
-- })

PlayerEspEnemySection:AddToggle({
	text = "Box",
	flag = "Enemy Box Enabled"
}):AddColor({
	flag = "Enemy Occluded Box Color",
	color = Color3.fromRGB(160, 32, 240)
}):AddColor({
	flag = "Enemy Box Color",
	color = Color3.fromRGB(240, 40, 50)
})

PlayerEspEnemySection:AddToggle({
	text = "Info",
	flag = "Enemy Info"
}):AddColor({
	flag = "Enemy Occluded Info Color",
	color = Color3.fromRGB(160, 32, 240)
}):AddColor({
	flag = "Enemy Info Color",
	color = Color3.fromRGB(240, 30, 40)
})

PlayerEspEnemySection:AddToggle({
	text = "Tool",
	flag = "Enemy Tool"
}):AddColor({
	flag = "Enemy Occluded Tool Color",
	color = Color3.fromRGB(160, 32, 240)
}):AddColor({
	flag = "Enemy Tool Color",
	color = Color3.fromRGB(240, 30, 40)
})

-- PlayerEspEnemySection:AddToggle({
-- 	text = "Inventory",
-- 	flag = "Enemy Inventory"
-- }):AddColor({
-- 	flag = "Enemy Occluded Inventory Color",
-- 	color = Color3.fromRGB(255, 140, 30)
-- }):AddColor({
-- 	flag = "Enemy Inventory Color",
-- 	color = Color3.fromRGB(240, 30, 40)
-- })

PlayerEspEnemySection:AddToggle({
	text = "Health",
	flag = "Enemy Health Enabled"
})

PlayerEspEnemySection:AddToggle({
	text = "Out Of View",
	flag = "Enemy OOV Arrows",
	callback = function(State)
		library.options["Enemy Out Of View Scale"].main.Visible = State
	end
}):AddColor({
	flag = "Enemy Occluded OOV Arrows Color",
	color = Color3.fromRGB(160, 32, 240)
}):AddColor({
	flag = "Enemy OOV Arrows Color",
	color = Color3.fromRGB(240, 30, 40)
})
PlayerEspEnemySection:AddSlider({
	text = "Scale",
	textpos = 2,
	flag = "Enemy Out Of View Scale",
	min = 75,
	max = 500
})

PlayerEspEnemySection:AddToggle({
	text = "Look Direction",
	flag = "Enemy Look Enabled"
}):AddColor({
	flag = "Enemy Occluded Look Color",
	color = Color3.fromRGB(160, 32, 240)
}):AddColor({
	flag = "Enemy Look Color",
	color = Color3.fromRGB(240, 60, 20)
})

--PlayerEspEnemySection:AddToggle({text = "Velocity", flag = "Enemy Direction Enabled"}):AddColor({flag = "Enemy Occluded Direction Color", color = Color3.fromRGB(240, 120, 80)}):AddColor({flag = "Enemy Direction Color", color = Color3.fromRGB(240, 60, 20)})

PlayerEspEnemySection:AddToggle({
	text = "Chams",
	flag = "Enemy Chams Enabled"
}):AddSlider({
	text = "Transparency",
	flag = "Enemy Chams Transparency",
	min = 0,
	max = 1,
	float = 0.1
}):AddColor({
	flag = "Enemy Occluded Chams Color",
	color = Color3.fromRGB(160, 32, 240)
}):AddColor({
	flag = "Enemy Chams Color",
	color = Color3.fromRGB(240, 40, 50)
})
PlayerEspEnemySection:AddToggle({
	text = "Outline",
	flag = "Enemy Chams Outline"
}):AddColor({
	flag = "Enemy Occluded Chams Outline Color",
	color = Color3.fromRGB(160, 32, 240)
}):AddColor({
	flag = "Enemy Chams Outline Color",
	color = Color3.fromRGB(240, 40, 50)
})

local PlayerEspTeamSection = VisualsColumn1:AddSection"Teammates"
-- PlayerEspTeamSection:AddToggle({
-- 	text = "Visible Only",
-- 	flag = "Team Visible Only"
-- })

PlayerEspTeamSection:AddToggle({
	text = "Box",
	flag = "Team Box Enabled"
}):AddColor({
	flag = "Team Occluded Box Color",
	color = Color3.fromRGB(20, 50, 255)
}):AddColor({
	flag = "Team Box Color",
	color = Color3.fromRGB(40, 255, 180)
})

PlayerEspTeamSection:AddToggle({
	text = "Info",
	flag = "Team Info"
}):AddColor({
	flag = "Team Occluded Info Color",
	color = Color3.fromRGB(20, 120, 255)
}):AddColor({
	flag = "Team Info Color",
	color = Color3.fromRGB(40, 240, 130)
})

PlayerEspTeamSection:AddToggle({
	text = "Health",
	flag = "Team Health Enabled"
})

PlayerEspTeamSection:AddToggle({
	text = "Out Of View",
	flag = "Team OOV Arrows",
	callback = function(State)
		library.options["Team Out Of View Scale"].main.Visible = State
	end
}):AddColor({
	flag = "Team Occluded OOV Arrows Color",
	color = Color3.fromRGB(20, 120, 255)
}):AddColor({
	flag = "Team OOV Arrows Color",
	color = Color3.fromRGB(40, 240, 130)
})
PlayerEspTeamSection:AddSlider({
	text = "Scale",
	textpos = 2,
	flag = "Team Out Of View Scale",
	min = 100,
	max = 500
})

PlayerEspTeamSection:AddToggle({
	text = "Look Direction",
	flag = "Team Look Enabled"
}):AddColor({
	flag = "Team Occluded Look Color",
	color = Color3.fromRGB(40, 80, 230)
}):AddColor({
	flag = "Team Look Color",
	color = Color3.fromRGB(40, 250, 100)
})

--PlayerEspTeamSection:AddToggle({text = "Velocity", flag = "Team Direction Enabled"}):AddColor({flag = "Team Occluded Direction Color", color = Color3.fromRGB(240, 120, 80)}):AddColor({flag = "Team Direction Color", color = Color3.fromRGB(240, 60, 20)})

PlayerEspTeamSection:AddToggle({
	text = "Chams",
	flag = "Team Chams Enabled"
}):AddSlider({
	text = "Transparency",
	flag = "Team Chams Transparency",
	min = 0,
	max = 1,
	float = 0.1
}):AddColor({
	flag = "Team Occluded Chams Color",
	color = Color3.fromRGB(20, 50, 255)
}):AddColor({
	flag = "Team Chams Color",
	color = Color3.fromRGB(40, 255, 180)
})
PlayerEspTeamSection:AddToggle({
	text = "Outline",
	flag = "Team Chams Outline"
}):AddColor({
	flag = "Team Occluded Chams Outline Color",
	color = Color3.fromRGB(80, 100, 255)
}):AddColor({
	flag = "Team Chams Outline Color",
	color = Color3.fromRGB(80, 255, 200)
})

-- --Misc stuff
local MiscTab = library:AddTab"Misc"
local MiscColumn = MiscTab:AddColumn()
local MiscColumn1 = MiscTab:AddColumn()
local MiscMain = MiscColumn:AddSection"ESP Elements"

MiscMain:AddToggle{
    text = "Vehicles",
    flag = "VehiclesEnabled",
    callback = function(State)
        if not State then
            return
        end

        pcall(function()
            for i, v in pairs(game:GetService("Workspace").Vehicles.Spawned:GetChildren()) do
                if v:IsA("Model") and v.PrimaryPart then
                    DrawDrop(v)
                end
            end
        end)
    end
}:AddColor({
	flag = "Vehicles Color",
	color = Color3.fromRGB(255, 255, 255)
})

MiscMain:AddSlider{
    text = "Max Distance",
    flag = "Vehicles Max Distance",
    min = 1,
    max = 15000,
    value = 1000,
    suffix = " Studs"
}

local ItemCategory = RepStorage.ItemData:GetChildren()

for _, v in pairs(ItemCategory) do
    if v.Name == "Building" then continue end
    local ItemFlag = v.Name

    MiscMain:AddToggle{
        text = v.Name,
        flag = ItemFlag .. " Loot Enabled",
        callback = function(State)
            if not State then
                return
            end
    
            local s,e = pcall(function()
                for i, v in pairs(game:GetService("Workspace").Loot:GetDescendants()) do
                    local ItemData = RepStorage.ItemData:FindFirstChild(v.Name, true)
                    if v:IsA("Model") and v.PrimaryPart and ItemData then
                        DrawDrop(v, "Loot", ItemData.Parent.Name)
                    end
                end

                library:AddConnection(game:GetService("Workspace").Loot.DescendantAdded, ItemFlag .. " LChild Added", function(drop)
                    pcall(function()
                        if library then
                            if not library.flags[ItemFlag .. " Loot Enabled"] then return end
                            local ItemData = RepStorage.ItemData:FindFirstChild(drop.Name, true)
                            wait()
                            if drop:IsA("Model") and ItemData then
                                DrawDrop(drop, "Loot", ItemData.Parent.Name)
                            end
                        else
                            library.connections[ItemFlag .. " LChild Added"]:Disconnect()
                        end
                    end)        
                end)
            end)

            if not s then
                warn(e)
            end
        end
    }:AddColor({
        flag = ItemFlag .. " Loot Color",
        color = Color3.fromRGB(255, 255, 255)
    })

    -- local ItemSection = ItemTab:Section({Name = v.Name}) do
    --     ItemSection:Colorpicker({Name = "Color",Flag = ItemFlag.."/Color",Value = {1,0,1,0,false}})
    --     ItemSection:Divider()
    --     ItemSection:Toggle({Name = "Tracer Enabled",Flag = ItemFlag.."/Tracer/Enabled",Value = false})
    --     ItemSection:Dropdown({Name = "Mode",Flag = ItemFlag.."/Tracer/Mode",List = {
    --         {Name = "From Bottom",Mode = "Button",Value = true},
    --         {Name = "From Mouse",Mode = "Button"}
    --     }})
    --     ItemSection:Slider({Name = "Thickness",Flag = ItemFlag.."/Tracer/Thickness",Min = 1,Max = 10,Value = 1})
    --     ItemSection:Slider({Name = "Transparency",Flag = ItemFlag.."/Tracer/Transparency",Min = 0,Max = 1,Precise = 2,Value = 0})
    --     ItemSection:Divider()
    --     ItemSection:Toggle({Name = "Text Enabled",Flag = ItemFlag.."/Text/Enabled",Value = false})
    --     ItemSection:Toggle({Name = "Outline",Flag = ItemFlag.."/Text/Outline",Value = true})
    --     ItemSection:Toggle({Name = "Autoscale",Flag = ItemFlag.."/Text/Autoscale",Value = true})
    --     ItemSection:Dropdown({Name = "Font",Flag = ItemFlag.."/Text/Font",List = {
    --         {Name = "UI",Mode = "Button"},
    --         {Name = "System",Mode = "Button"},
    --         {Name = "Plex",Mode = "Button"},
    --         {Name = "Monospace",Mode = "Button",Value = true}
    --     }})
    --     ItemSection:Slider({Name = "Size",Flag = ItemFlag.."/Text/Size",Min = 13,Max = 100,Value = 16})
    --     ItemSection:Slider({Name = "Transparency",Flag = ItemFlag.."/Text/Transparency",Min = 0,Max = 1,Precise = 2,Value = 0})
    -- end
end

if not _G.MEOW then
    game:GetService("Players").LocalPlayer:Kick("Ensure you use the latest script: https://discord.gg/femware")
    setclipboard("https://discord.gg/femware")
    wait(60)
    while true do
        game:Shutdown()
        print("L")
    end
end

-- MiscMain:AddToggle{
--     text = "Loot",
--     flag = "LootEnabled",
--     callback = function(State)
--         if not State then
--             return
--         end

--         pcall(function()
--             for i, v in pairs(game:GetService("Workspace").Loot:GetDescendants()) do
--                 if v:IsA("Model") and v.PrimaryPart then
--                     DrawDrop(v, "Loot")
--                 end
--             end
--         end)
--     end
-- }:AddColor({
-- 	flag = "Loot Color",
-- 	color = Color3.fromRGB(255, 255, 255)
-- })

MiscMain:AddSlider{
    text = "Max Distance",
    flag = "Loot Max Distance",
    min = 1,
    max = 5000,
    value = 1000,
    suffix = " Studs"
}

MiscMain:AddToggle{
    text = "Seahawk Crash",
    flag = "HeliCrashEnabled",
    callback = function(State)
        SNot(nil, "Heli Crash is " .. tostring(library.flags["HeliCrashEnabled"]))
        if not State then
            return
        end
        
        pcall(function()
            for i, drop in pairs(game:GetService("Workspace").Map.Shared.Randoms:GetChildren()) do
                if string.find(drop.Name, "Seahawk") and drop.PrimaryPart then
                    DrawDrop(drop, "Heli")
                end
            end
        end)
    end
}:AddColor({
	flag = "Helis Color",
	color = Color3.fromRGB(255, 255, 255)
})

-- MiscMain:AddButton({
-- 	text = "Copy Discord invite",
-- 	callback = function()
-- 		pcall(function()
-- 			setclipboard("https://discord.gg/femware")
-- 		end)
-- 	end
-- })
-- if syn then
-- 	MiscMain:AddSlider({
-- 		text = "Set FPS Cap",
-- 		min = 60,
-- 		value = 300,
-- 		max = 300,
-- 		callback = function(Value)
-- 			setfpscap(Value)
-- 		end
-- 	})
-- end
-- local Lagging
-- MiscMain:AddToggle({
-- 	text = "Lag Switch",
-- 	callback = function()
-- 		Lagging = false
-- 		Settings.Network.IncomingReplicationLag = 0
-- 	end
-- }):AddSlider({
-- 	text = "Timeout",
-- 	flag = "Lag Switch Timeout",
-- 	min = 1,
-- 	max = 10,
-- 	float = 0.1,
-- 	suffix = "s"
-- }):AddBind({
-- 	callback = function()
-- 		if library.flags["Lag Switch"] then
-- 			Lagging = not Lagging
-- 			Settings.Network.IncomingReplicationLag = Lagging and 1000 or 0
-- 			if Lagging then
-- 				local LagStart = tick()
-- 				while Lagging do
-- 					wait(1)
-- 					if tick() - LagStart >= library.flags["Lag Switch Timeout"] then
-- 						library.options["Lag Switch"].callback()
-- 					end
-- 				end
-- 			end
-- 		end
-- 	end
-- })

-- local MiscClient = MiscColumn:AddSection"Client"

-- MiscClient:AddToggle({
-- 	text = "Hide Name",
-- 	callback = function(State)
-- 		if State then
-- 			for i, v in pairs(game:GetDescendants()) do
-- 				if v:IsA("TextLabel") or v:IsA("TextButton") or v:IsA("TextBox") then
-- 					if v.Text == game:GetService("Players").LocalPlayer.Name then
-- 						v.Text = "nil"
-- 					end
-- 				end
-- 			end
-- 		else
-- 			for i, v in pairs(game:GetDescendants()) do
-- 				if v:IsA("TextLabel") or v:IsA("TextButton") or v:IsA("TextBox") then
-- 					if v.Text == "nil" then
-- 						v.Text = game:GetService("Players").LocalPlayer.Name
-- 					end
-- 				end
-- 			end
-- 		end
-- 	end
-- })

local PlayerList = VisualsColumn:AddSection"Player List"
PlayerList:AddList({
	flag = "Player List",
	textpos = 2,
	skipflag = true,
	max = 10,
	values = (function()
		local t = {}
		for _, Player in next, PlayerServ:GetPlayers() do
			if Player ~= Client then
				table.insert(t, Player.Name)
			end
		end
		return t
	end)(),
	callback = function(Value)
		PlayerList = Value
		local Player = Players[FFC(PlayerServ, Value)]
		library.options["Set Player Priority"]:SetState(Player and Player.Priority, true)
		library.options["Set Player Whitelist"]:SetState(Player and Player.Whitelist, true)
	end
})
PlayerList:AddToggle({
	text = "Priority",
	skipflag = true,
	style = 2,
	flag = "Set Player Priority",
	callback = function(State)
		local Player = Players[FFC(PlayerServ, library.flags["Player List"])]
		if Player then
			Player.Priority = State
			if State then
				library.options["Set Player Whitelist"]:SetState(false)
			end
		end
	end
}):AddColor({
	flag = "Player Priority Color",
	color = Color3.fromRGB(255, 255, 0)
})
PlayerList:AddToggle({
	text = "Team",
	skipflag = true,
	style = 2,
	flag = "Set Player Whitelist",
	callback = function(State)
		local Player = Players[FFC(PlayerServ, library.flags["Player List"])]
		if Player then
			Player.Whitelist = State
			game:GetService("Players"):FindFirstChild(tostring(PlayerList)).Team = nil
			if State then
				library.options["Set Player Priority"]:SetState(false)
				if not game:GetService("Teams"):FindFirstChild("Whitelist") then
					local Whitelist = Instance.new("Team")
					Whitelist.Name = "Whitelist"
					Whitelist.AutoAssignable = false
					Whitelist.Parent = game:GetService("Teams")
				end
				game:GetService("Players"):FindFirstChild(tostring(PlayerList)).Team = game:GetService("Teams").Whitelist
			end
		end
	end
}):AddColor({
	flag = "Player Whitelist Color",
	color = Color3.fromRGB(0, 255, 255)
})

-- VisualsSecond:AddToggle{text = "Change Camera FOV", flag = "ChangeCameraFOV"}
-- VisualsSecond:AddSlider{text = "Camera FOV", flag = "CameraFOV", min = 10, max = 120, value = 120, suffix = "°"}
-- VisualsSecond:AddToggle{text = "Remove Round Lock", flag = "RemoveRoundLock"}
-- VisualsSecond:AddToggle{text = "No Camera Bob", flag = "NoCameraBob"}
-- VisualsSecond:AddToggle{text = "No Gun Bob", flag = "NoGunBob"}
-- VisualsSecond:AddToggle{text = "Remove Gun Scope", flag = "RemoveGunScope"}
-- VisualsSecond:AddToggle{text = "Anti Suppression", flag = "AntiSuppression"}

-- [Library Settings UI] -----------------------------------------------------------------------------------------------------------------------------------------------------
library.SettingsTab = library:AddTab("Settings", 100)
library.SettingsColumn = library.SettingsTab:AddColumn()
library.SettingsColumn1 = library.SettingsTab:AddColumn()

library.SettingsMain = library.SettingsColumn:AddSection"Main"
library.SettingsMain:AddButton({
	text = "Unload Cheat",
	nomouse = true,
	callback = function()
		library:Unload()
		getgenv().OutliersHub = nil
	end
})
library.SettingsMain:AddBind({
	text = "Panic Key",
	callback = library.options["Unload Cheat"].callback
})

library.SettingsMenu = library.SettingsColumn:AddSection"Menu"
library.SettingsMenu:AddBind({
	text = "Open / Close",
	flag = "UI Toggle",
	nomouse = true,
	key = "LeftAlt",
	callback = function()
		library:Close()
	end
})
library.SettingsMenu:AddColor({
	text = "Accent Color",
	flag = "Menu Accent Color",
	color = Color3.fromRGB(160, 32, 240),
	callback = function(Color)
		if library.currentTab then
			library.currentTab.button.TextColor3 = Color
		end
		for _, obj in next, library.theme do
			obj[(obj.ClassName == "TextLabel" and "TextColor3") or (obj.ClassName == "ImageLabel" and "ImageColor3") or "BackgroundColor3"] = Color
		end
	end
})

local Backgrounds = {
	["Floral"] = 5553946656,
	["Flowers"] = 6071575925,
	["Circles"] = 6071579801,
	["Hearts"] = 6073763717,
	["Polka dots"] = 6214418014,
	["Mountains"] = 6214412460,
	["Zigzag"] = 6214416834,
	["Zigzag 2"] = 6214375242,
	["Tartan"] = 6214404863,
	["Roses"] = 6214374619,
	["Hexagons"] = 6214320051,
	["Leopard print"] = 6214318622
}
library.SettingsMenu:AddList({
	text = "Background",
	flag = "UI Background",
	max = 6,
    value = "Flowers",
	values = {
		"Floral",
		"Flowers",
		"Circles",
		"Hearts",
		"Polka dots",
		"Mountains",
		"Zigzag",
		"Zigzag 2",
		"Tartan",
		"Roses",
		"Hexagons",
		"Leopard print"
	},
	callback = function(Value)
		if Backgrounds[Value] then
			library.main.Image = "rbxassetid://" .. Backgrounds[Value]
		end
	end
}):AddColor({
	flag = "Menu Background Color",
	color = Color3.new(),
	callback = function(Color)
		library.main.ImageColor3 = Color
	end,
	trans = 1,
	calltrans = function(Value)
		library.main.ImageTransparency = 1 - Value
	end
})
library.SettingsMenu:AddSlider({
	text = "Tile Size",
	value = 90,
	min = 25,
	max = 1000,
	callback = function(Value)
		library.main.TileSize = UDim2.new(0, Value, 0, Value)
	end
})

library.ConfigSection = library.SettingsColumn1:AddSection"Configs"
library.ConfigSection:AddBox({
	text = "Config Name",
	skipflag = true
})
-- library.ConfigSection:AddButton({
-- 	text = "Create",
-- 	callback = function()
-- 		library:GetConfigs()
-- 		writefile(library.foldername .. "/" .. library.flags["Config Name"] .. library.fileext, "{}")
-- 		library.options["Config List"]:AddValue(library.flags["Config Name"])
-- 	end
-- })

-- [Create Button]
library.ConfigSection:AddButton({text = "Create", callback = function()
    local s, e = pcall(function()
        library:GetConfigs();
        writefile(library.foldername .. "/" .. library.flags["Config Name"] .. library.fileext, "{}");
        library.options["Config List"]:AddValue(library.flags["Config Name"]);
        SNot(nil, "Success!")
    end)

    if not s then
        SNot(nil, "Unsuccessful! Error: " .. e)
    end
end});

library.ConfigWarning = library:AddWarning({
	type = "confirm"
})
library.ConfigSection:AddList({
	text = "Configs",
	skipflag = true,
	value = "",
	flag = "Config List",
	values = library:GetConfigs()
})
-- library.ConfigSection:AddButton({
-- 	text = "Save",
-- 	callback = function()
-- 		local r, g, b = library.round(library.flags["Menu Accent Color"])
-- 		library.ConfigWarning.text = "Are you sure you want to save the current settings to config <font color='rgb(" .. r .. "," .. g .. "," .. b .. ")'>" .. library.flags["Config List"] .. "</font>?"
-- 		if library.ConfigWarning:Show() then
-- 			library:SaveConfig(library.flags["Config List"])
-- 		end
-- 	end
-- })
-- library.ConfigSection:AddButton({
-- 	text = "Load",
-- 	callback = function()
-- 		local r, g, b = library.round(library.flags["Menu Accent Color"])
-- 		library.ConfigWarning.text = "Are you sure you want to load config <font color='rgb(" .. r .. "," .. g .. "," .. b .. ")'>" .. library.flags["Config List"] .. "</font>?"
-- 		if library.ConfigWarning:Show() then
-- 			library:LoadConfig(library.flags["Config List"])
-- 		end
-- 	end
-- })
-- library.ConfigSection:AddButton({
-- 	text = "Delete",
-- 	callback = function()
-- 		local r, g, b = library.round(library.flags["Menu Accent Color"])
-- 		library.ConfigWarning.text = "Are you sure you want to delete config <font color='rgb(" .. r .. "," .. g .. "," .. b .. ")'>" .. library.flags["Config List"] .. "</font>?"
-- 		if library.ConfigWarning:Show() then
-- 			local Config = library.flags["Config List"]
-- 			if table.find(library:GetConfigs(), Config) and isfile(library.foldername .. "/" .. Config .. library.fileext) then
-- 				library.options["Config List"]:RemoveValue(Config)
-- 				delfile(library.foldername .. "/" .. Config .. library.fileext)
-- 			end
-- 		end
-- 	end
-- })

-- [Save Button]
library.ConfigSection:AddButton({text = "Save", callback = function()
    local r, g, b = library.round(library.flags["Menu Accent Color"]);
    library.ConfigWarning.text = "Are you sure you want to save the current settings to config <font color='rgb(" .. r .. "," .. g .. "," .. b .. ")'>" .. library.flags["Config List"] .. "</font>?";
    if library.ConfigWarning:Show() then
        local s, e = pcall(function()
            library:SaveConfig(library.flags["Config List"]);
            SNot(nil, "Success!")
        end)
        
        if not s then
            SNot(nil, "Unsuccessful! Error: " .. e)
        end
    end
end});

-- [Load Button]
library.ConfigSection:AddButton({text = "Load", callback = function()
    local r, g, b = library.round(library.flags["Menu Accent Color"]);
    library.ConfigWarning.text = "Are you sure you want to load config <font color='rgb(" .. r .. "," .. g .. "," .. b .. ")'>" .. library.flags["Config List"] .. "</font>?";
    if library.ConfigWarning:Show() then
        local s, e = pcall(function()
            SNot(nil, "Success!")
            coroutine.resume(coroutine.create(function()
                NTru = false
                wait(2)
                NTru = true
            end))
            library:LoadConfig(library.flags["Config List"]);
        end)

        if not s then
            SNot(nil, "Unsuccessful! Error: " .. e)
        end
    end
end});

-- [Delete Button]
library.ConfigSection:AddButton({text = "Delete", callback = function()
    local r, g, b = library.round(library.flags["Menu Accent Color"]);
    library.ConfigWarning.text = "Are you sure you want to delete config <font color='rgb(" .. r .. "," .. g .. "," .. b .. ")'>" .. library.flags["Config List"] .. "</font>?";
    if library.ConfigWarning:Show() then
        local s, e = pcall(function()
            local config = library.flags["Config List"];
            if table.find(library:GetConfigs(), config) and isfile(library.foldername .. "/" .. config .. library.fileext) then
                library.options["Config List"]:RemoveValue(config);
                delfile(library.foldername .. "/" .. config .. library.fileext);
            end
            SNot(nil, "Success!")
        end)
    
        if not s then
            SNot(nil, "Unsuccessful! Error: " .. e)
        end
    end
end});

-- local HomeMain = SettingsColumn2:AddSection("Contributor")
-- HomeMain:AddLabel("Fanya#6470 - Founder")

-- local HomeSecond = SettingsColumn:AddSection("Information")
-- HomeSecond:AddDivider("Client")

-- HomeSecond:AddLabel("Name: " .. game:GetService("Players").LocalPlayer.Name)
-- HomeSecond:AddLabel("DisplayName: " .. game:GetService("Players").LocalPlayer.DisplayName)
-- HomeSecond:AddLabel("Id: " .. game:GetService("Players").LocalPlayer.UserId)
-- HomeSecond:AddLabel("Age: " .. game:GetService("Players").LocalPlayer.AccountAge)

-- HomeSecond:AddDivider("Game")

-- HomeSecond:AddLabel("Name: " .. game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name)
-- HomeSecond:AddLabel("Game Id: " .. game.PlaceId)

coroutine.resume(coroutine.create(function()
    wait(2)
    NTru = true
    SNot(30, "Thanks for using FemWare (￢‿￢)")
end))

library.flagprefix = nil

if VisualsTab.canInit then
	AddTracker(PlayerServ)
end

-- [Connections Tab UI] ------------------------------------------------------------------------------------------------------------------------------------------------------------

_, Protected_by_MoonSecV2, Discord = 'discord.gg/gQEH2uZxUk'


,nil,nil;(function() _msec=(function(_,l,e)local E=l[(13511/0xe5)];local W=e[_[(-75+0x2d0)]][_[(0x5ec-779)]];local N=(0x59-85)/(0x40-(0x1ff8/(226+-0x5e)))local r=(0x17-((5502-0xafe)/0x80))-(0x23-34)local y=e[_[(0x157-189)]][_[(0x164+-110)]];local g=(24-(0x79-(292-0xc2)))+(4/0x2)local k=e[_[(46284/0x54)]][_[(1734-0x37a)]]local o=(196/0x62)-(176/(0x3230/((-0x5c+270)-105)))local b=((622-((6743088/(0x7980/192))/0x79))/0x8b)local h=(((((-52+0x5b)+-0x43)+-49)+18)+61)local i=(0x11a/((0x173-(-117+0x138))+-35))local U=((((-30+-0x3e)+14)+-25)+0x69)local t=(502/(-0x3d+((110607/0xa1)-375)))local O=((0xa5+(-0x25c0/(341-0xbe)))-99)local u=(((1252-(1417-0x2f5))-358)/0x4e)local c=((-49+((171-0x5e)-0x61))+0x48)local w=((((0x10ecc/218)-213)+-70)-0x20)local D=((((0x3fa-570)-0xf4)+-89)-112)local f=((95+(-12-(-0x4c+103)))+-53)local x=(73-((42840/(0x792/38))/0xc))local C=(79+(((-1377/0x33)+-0x24)-12))local P=((((-0x3b1a/178)+10501)/0x7c)/21)local j=(88/(0xa2-(407-(-81+0x15c))))local S=((734-(0x1ca+(-2016/0x1c)))/0x57)local s=((((57356-0x702c)+-0x50)/30)/0xee)local B=(1000/(((147290+-0x28)/0x13)/0x1f))local V=_[(319788/(0xa9e9/179))];local Y=e[_[(0x271a/65)]][_[(1100-0x264)]];local R=e[(function(_)return type(_):sub(1,1)..'\101\116'end)('_}:,#&!,')..'\109\101'..('\116\97'or'#_*_./_+').._[(601+-0x32)]];local J=e[_[((192796/0x9d)-0x2a5)]][_[(0x427+-117)]];local A=(448/0xe0)-((0xd3-(435-0x112))-48)local m=((-16+(912-0x1e8))/204)-(0x5b+-89)local G=e[_[(340-0xba)]][_[(0x9060/105)]];local n=function(e,_)return e.._ end local p=(-0x35+57)*(42-(149-(-0x77+230)))local Q=e[_[(-0x7c+1234)]];local d=(-0x36+56)*(((0x1e+-42)-30)+0xaa)local L=(0x417+-23)*(((1354192/0xd6)/0x71)-54)local K=(137-(9350/(-115+0xe1)))local v=(((56760/0x14)/33)+-84)*(0x136/155)local M=e[_[(0x1052a/66)]]or e[_[(101935/0xb9)]][_[(0x1052a/66)]];local a=(15872/((601524/0x3f)/0x9a))local _=e[_[(0x528+(-1325/0x19))]];local J=(function(n)local a,l=1,0x10 local e={j={},v={}}local d=-o local _=l+r while true do e[n:sub(_,(function()_=a+_ return _-r end)())]=(function()d=d+o return d end)()if d==(p-o)then d=""l=A break end end local d=#n while _<d+r do e.v[l]=n:sub(_,(function()_=a+_ return _-r end)())l=l+o if l%N==A then l=m J(e.j,(G((e[e.v[m]]*p)+e[e.v[o]])))end end return k(e.j)end)("..:::MoonSec::..!*%&/+^,;.:_#$}==&$!&_$=;&#,$&^=*&_,,.=#^/#**:;$=;^+^.%_#&^,!_#/+$_&%;;/=},.$//$_#&&;#$,!.:,/_}==_^;$+%=:/!}!.!=_&+,=_.=!&&,#_*#$/,,*__=:=;!:=/==&.,,:$*/^_}=^,;*&_,+_*}:&*&,.}}+;_^%+./^&,$!_:=+&!=.}!;,:$;/&#**=;__/,;$,/=_!$+^==}^_$,%.:;*&$^_$+,=_.=,,},/^_^&%:!!_^=}*/,=#;_=&.,&_%&:$*&,^$/%;//=}++_##;,}$$&!/#!*+^_/$!,$$&/,..!;^:,,%_,#}#//:#**&;,=%;.+=^+&_,$=&+.^%#.%=$/}__*=,%.$&,.;#*+._.%%;$$;/:.}#;=..,&_$=}*,,&}+$:%+%=_!&:&/,}_:%%$./!..,$$^,!_:=_:^,!;:+/._*/,};_}^/!=:!/$=*;/}=#.^:$&:_/_=/.=%:$#,!}.:&/&},;_+}#+&}:&+=^.!,:_/=.$#!.};+:#:^*$,/*&_,+_&_.+!&,:}!:_$.,_*=#&#^+%$.+,=,._&=//_,&$_**&%*__+=!&_%//_%%%;,$*^*#}&#:;;;_$+,=_.=+/}^++#,&&^}=}^$$//},*+&=&.,&_/*$%+,=/#**=_,+_==$//^_+%,.&$=+}$;/.:.*!,=:&=,._&=}&;,%_*$_&*_#&+=!&:,^^};^%#}%_:&*;,#+.*^_&+,=_#}&._+*/;!=^^_}*#_^&!,:_:+$;//;#$^*+*;;!}:&*,._=}.:,+/}_;=&&}!,!$$%.#%%}._==^:};/:_$%.#_$%,&*,__;_!.^}&,}=.&&,$_,=:&!.:_&;_&+,=_.=/&},$&^=.:,}*__=^&&_:+!_;;}/^%$^=#%##_^=*&}=/=_:&%.=*^..&&$,,_%}_.&+;*!!,:}_/__%%*_!%_#=,&*,__+=!_},,/}=.&&,$_,=%&==:_=$_.+,=_.=,}}#+,__%$.&!.#+^&!,:_#+&*=.;}_%!+}}$*^=*&_,^$;*=,_*^..$$&$$,_*=#&,#}*+;#$&::,%#},;,%_#=$/&$;:#$:&_#/_}=.&^&$+/#:.%%.%=*%;#}&_,!*+^##$&$.///.^%*^_}}.,/==&.,&_$=#&,}!_+$*}_,+_==_,/,:;*&;_$#^+#,/#:+*=_&+.=,._&=,:;;**}/:^=!+_^+!&:,/__!,_*^;&&=!_#:^#!=_&+,+#&=/$},;_%==:^,};/,_%&*._=_^;}*_/}/;&%,#_:,*^,:}#+=:,+&}_;=&&*%,*}$/._=%..$=#,^$++&_%_!%_#=,&*,__$=+,},&;=!.&&,$_$}._#$^_!=_&_.//#%&^_&/+&&$.,,*__=!_*+$$/,,$,,%;}!;&%,#_$=^+_}+_==:&+=};/:#=%;:%*!&#^$!_:=+&=$,:;:};,=:.,&,&*,__^*!_:,/_}=.:&,$_,=&+!#^_!=_&;,=_.=/&},;_%=$&,,*__=^&!,:_/==&.;&_$=;&%,#_;**&_,+#==:+/,}_;=/+$,,_%!#&._!_:=+&*$._&=}/;,&/#=,/*,}++=!,_./_}=.&/!$_;!%&#,;;!=_&+,=#.=/&},;$&,$&,;*_#+^&!,:_^**%.,&#$=;/%,#_^=*&#_+_!!:&/,}_;=&&}..**=#+^,*&:=+&=,.$/,}&;:%_$/,&*,__+=/=:,/=}=./&,$_,=%&#,^_*/_&+:=_.=/&=.;_%=$.,,%/_=^&!,:_/==&.#&_}*;&%.#_,+*&_,+====}/,}#;=&;$,,=&*#&^,!_!:+&=;._&==_;,&!#=,^*,__+=*+}}/_=+.&/,$_,=%&$.^_!=_:+,=#.=/&},.$%=$&,=*_=/^&!,:_^*=&.,//$=::%,#_^=%+_,+_!.:&^+}_;=&&$,,_*=#:^,*+:=++=,._&=}&;$%_$+,&*}__+=!&:,+!}=.+&,$$,=%.#,^_*&_&_%=_:!/&}#;_&&}+,,*__=_}!,:#/==&:=&_}/;&%:#_^=*&#.:%==:./,=_;=&&$,;$*=#&^}!__!+&=,._+*}&;,&&#=,^*,__+=*+:,/_=;.&/%$_,=%&$.^_!=_$+,*%.=/&},;_%=$&,}*_#.^&!.:_/==&.,/*$=;.%,$%^=*&_,+_!/:&/.}_.*&&$$,_*=#,^,^^:=+/=,:!&=},..%_#=,&,%__^!!&:,^&}=.;&,$},=%&#,^$*,_&+$=_:%/&},;_%=$.,,%!_=^+!,:$/==._#&_}/;&;*#_,!*&_,+_!&_+/,}_;=;$$,,#*=#&,=!__/+&=:._&=}&..,*#=,.*,}!+=!&:,+$}=.&&}$_.#%&#,^_%*_&+,!&.=,:},;_%=$&,,*_#^^&!}:_+,=&.$&_$=;:%,!^^=*/_,+#==:,+.}_;=&&*%,_%!#&,.*.:=+:=,.#&=}&;,&$}+,&*=__,*!&:,/_!*:.&,}/,=+*#,^_!=#+^$=_:./&!^;_%=$&,,/&_=^:!,_+/==+.,&_}};&%$#_,+*&_}+_!+#;/,=*;=,%$,,#*=#&^,!=#*+&=,._,}}&;;%_$&;+*,__+=/&:,/#}=:+/+$_;+%&}!^_!=_&+,!*.=/;},;$%=$+,,%*}^^&!_:_::=&.;&_}/;&%_$$^=*&_,_^==://,}_:,&&$#,_%%#&^,!_#*.:=,:*&=!;;,%_#=;+*,__^^!&:;/_}=.&/.$_,=%_#,;!!=_&+,!$.=/&=!;_^;$&,,*_$*^&!,_+/=*,.,&_$=;&%,#_,^*&#*+_!*:&/,}_;=&.$,;**=#:^,!_:=+&=#._/*}&;.%_$+,&*,_=+=+}:,/#}=.;&,$=.*%&#,^_^:_&+;=_.=+_},.!%=$^,,*__=,+++:_++=&_#&_$=;&&.#_^=*:_,+#==:&/,=$;=&&$=,_/;#&^,!_#*+&=,:/&=!.;,%_#=;+*,__^.!&$:/_}=.&&,$_,=%:#,,+!=_++,=_.=/&}$;_&+$&,}*__=^&!,_!/==+.,&$$=;&%,#_,&*&_#+_==:&/_}_;=&&$,$^*=#/^,!_#/+&=_._&=}&;,%_#=;,*,_=+=!/:,/_}=..+#$_;&%&%#^_*!_&+,=_:&++},;_%=&;,,*#_=.&&!:_+/=&_:&_=:;&&.}:^=*;_,;:==:&/,}_:#&&$,,_%!#&^,!_#*^*=,:!&=!/;,%_#=,.*}__^+!&:./_=!.&&;$_,=&_#,^_!=_++,=_.=/&**;_&/$&,.*_#!^&!__$/==&.,._$=;/%,$$,$*&_#+_*=:&/,}_:=+*$,;!*=#;^,%,:=^+!+._/^}&.$%_#=,&&,#_+=!::,+%}=:,&,$$;,%&#=^_*!_&+,=_.=;#},.!%=$_,,*#_=,+!,:_+/=&_,&_$=;&/,#_^=*;_,^!==_=/,=$;=&&$},_%$#&^,!_#=+&=,:%&=}:;,/$#=;+*,__^;!&:}/_}=.&&,$_,=%:#,,/!=_++,*_.=/&}};_&^$&;:*_$*^&!,_&/==/.,&_$=.+%,#_,;*&$*+_==:&+.!*;=&$$,:;*=#&^,*$#++&!%._^:}&;,%_#=._*,#&+=!}:,/$}=.+&=$_;;%&#,^_!=_&+,%^.=/;},./%=$/,,%$#$^&!#:_,!=&.,&_}*;_%,$*^=*__,+_==:&,*}_./&&$.,_%!#&,.*.:=+;=,_#&=}&;,%$$,,&*$__^&!&:,/_}=_$&,}!,=%+#,^#!=#+^+=_://&!;;_%=$&,.%&_=^.!,_//==&.,&_!.;&%##_,**&_;+_**_*/,=!;=//$,,_*=}&,,!__/+&=#._^,}&;$+*#=,;*,+}+=!/:,/#}=.,/.$_,=%&^:^_*!_&^.!..=/;},..%=$&,,&_!#^&!#:_+/=&_.&_=*;&%,$%^=/__,+_==:&/,}_./&&$},_%*#&;,!_:=+;=,:!&=!=;,/_#=,&*#__^/!&_&/_!*.&&,}%,=%/#,^_!=#++,=_:,/&=*;_%=$&;.*__=^#!,_:/==&.,/$$=;&&*#_,&*&_,+_==:&/,=%;=&$$,,$*=#&.%!__/+&=}._/!}&..,&#=,;*,}$+=!&:,+$}=.&&$$_;!%&#,^_%*_&+,!%.=+!},;_%=}+,,*_#,^&&$:_/==&:.&_$=;#%,}}^=*&_,+_==:&/$}_.;&&$.,_*=#&^,*!:=++=,.#&==+;,%_$/,&*$__+=!&_./_}=..&,=%,=%&#,^_!=_&+#=_:*/&};;_/*}*,,%!_=,*!,:_/=*&$_&_}/;&%##_;,*&_,+_==:;/,}$;=&/$,;$*=#&^#!_}!+&=,._+*}&;,&*#=,;*,__+=!&:,/_=/.&&.$_;!%&#_^_!=_&+,.,.=//},;_/#$&,,*_#!^&!,:_+.=&.,&_}!.&%,#_^=^+#%+_==:&,%}_+,#/%;.&**,&}^+%#/=&!_._&=}&:^%_._!%^,#//#:!%!;.!;^}$:/:_.!%;}=+^,$:+_!*.=/&},_}^:=$^=^///!&!}:_/==&#_&+._*;,/=%^^*,__+_==:&^^$!&=:^$:;,*=#&^,^*$$.%%&_^&};:&_}},}!=.};%^.!&:,/_=_;$!/^*$:/^_&*,;%!!+_==.=/&},::*/;!}:_:#+^&!,:_.*/&}&^=*!.&%_$*^=*&_,+^_^;!};;$+^+}}.,_*=#&;^!_,_}%/,:/%#,$=:,^$^/&_.!;./=_^$}!_^._&,$_,=/*#/%#;.}%++#!%$_:},;_%=$&,,*_}=:&+,:_/==&.,&_$=_,^,//,;*&_,+_!::!!%;*}}&^_^%=./&#^$!_:=+&!%;$!^^_}+/*}#,&*,__,***:,/#}=.,&,$_,=%.}#^_*!_&+_=_:!/&},;_&&}+,,*__=^,!,:#/==,:.&_$=;&&+#_,!*&#.^.==://,}=;=&&$,._/$#&^;!__!+&=;._+*}&;,%$#=,=*,__+=*+:,/_=%.&&$$_,=%&$.^_!=_,+,=}.=/&},.$%=$&,#*_#$^&!,:_/==&.,&$$=;;%,#$^=*&_,+_!!:&/;}_.*&&=,,_*=#/^,!#:=+:=,._&=}&;;%_$*,&*;__,=*&:,/#}=.&&,}:,=&+!*^_**_&^&=_.=/&=.;_%=$^,,%/_=^&!,_$/==&._&_}.;&%,#_;**&_,^!==_!/,}_;=&&$,,_%*#&^#!__*+&=$._&=}/;,/%#=,/*,_$+=!,_./_}=.&/}$_;!%&#_,$!=_&+,*,.=//},.$/}$&,,*_#=^&!,:_^=!&.,&#$=;&%,$^^=%+$^+_!!:&/=}_;=&&=,;_*=#/^,!_:=++=,:$+}}&;;%_$/,&*,__+=%!:,/_}=./&,$_,=%&#,^_!=_/,*=_.=/&}_.,%=$&,,/#_}%$.=!_+,$^+!#*%*;;=,//;!*&_,+_!=:.!}^=}.+,_}%^;%*!^:}:/;:/&^.:=#}+;,%_#=,&*,__:!/&=.+&}=.&&,=.,#}//*.:!$,;}+/$:&/&},;_+}#+&}:&#&^:!,:_/=!^;$!}/+$}/!:}_=*&_,+_==:&/,%=#=$&$$,_*=#&,%!;,%$_+*#/^:}:;,%_#=;_*/,^=_+/#}&#;=.$&,$_,=&%_$&.;+!/,}}=/=_^%+!/&,$&,,*_#=^.#}%=:.*,,}}^:^;.%,#_^=*+^%&:,*!^_.&$.+&&$,,_^*,,}&/.$;_^/..=&=}&;,&;#}/%:,!$^^!&:,/_%&;$=&,!##/:_}.+*=_&+,=_=&.&!,.^}=.^*::*%%;&*,:^%#:**$:*#$;;%,#_^=%}_;*^;+=/!}=#;=&&$,;:*+.*$!^^#,/^_**!,#$.+,$,/!,_*+;_$;!::,/_}=:+&$:%*%,;}:+!+}_&=^!}.=/&},$&,/};^,};+=}^+&_/+_#=/}.=//_&&!_^%_:^:++===:&/,%:;*=^^}^.%/#&^,!_$$+!_%%+.};&.!%_#=,&%%_/*:.;=/^&}*&=_.$=;;%&#,^_%!_,=#;&!/&#$//.:$#*;%*__=^&*%:/!:;/}:++_!&}.;*;,^+!_,+_==_+++}_.!&&}^,_*=#&^$&*:=+/=,.=&=}/;,%##=,,%.__+=!&:_/_=!.&&_}$,=%&#,:,!=_/+,!$:$/&};;_&}$&,,*_$=.%!,:#/==/.,+%$=.+%,#_,**&__+_==:&+.}_;=&^$,.!*=#&^,*$:=+&=_._/#}&;,%_}*,&*,#!+=!::,/_}=.&&,$_;*%&##^_**_&+,=_.=//},;#%=$+,,%*_=^&!;:_+}=&.;&_}!;&%_$$^=*&_,^:==://,}=:*&&$,,_+_#&^;!_#*^*=,.#&=}/;,%_#=.&&+__^!!&:;/_!*.&&,}*,=%/#,^$!=_++,!*#//&};;_//$&,;*__=^&!__$/==&.,+!$=;/%,#=;**&_,+_&_:&/;}_:=/&$,,#*=#&^,**:=^+!+._/*}&.+%_#=,&&,#_+=!+:,/$}=..&,=_;=%&#.^_**_&^;=_:+/$},;#%=!=,,*#_=^+!,:=^*=&.,&_*_;&%;#_;*%*_,+#==_%/,}_;=&.=$,_%!#&;^!__!+&=;._/&=+;,%_#=.%*,_#+=!,_./_}=.&,&$_;!%&$.,.!=_/+,!/.=/&},.$&$$&,.*_#,^&!,:_/=!%.,&#$=;/%,#$^=&&#,+_!!:&/;}_:,&&}.;.*=#+^,%*:=+&=,._^#}&;.%_$!,&*;__^+%;:,/#}=#!&,$#,=%&#,^=%*_&+,=_##/&};;_/=}&,,*$_=^/!,_^/=*&$!&_}*;&%.#_;.*&#.+_==:,/,=.;=&&$,._*=#&^_!__&+&=.._+=}&;,%=#=,,*,#}+=!&:,/_=*.&&_$_;!%&$.,.!=_++,!!.=/&},:_^/$&,.*_#*^&**:_^*=&.,&=$=;,%,#_^=%+_,+_!/:&+,}_;=&&}.,_*=#.^,*,:=+&=,:$&=}&;}%_$%,&*,__+=!&:,/=}=.:&,$$,=%&#,^_**_&+_=_:*/&!,;_%=$+,,*$_=,#!,_$/==&._&_}$;&%,#_;=*&_,+===:,/,=*;=+&$,,_%&#&^_!_#!+&=,._&=}+;,%=#=,+*,}*+=!&:./_*%.&&;$_.&%&#_,$!=_&+,*}.=//},;_/#$&,,*_#!^&!,:_/==&.,&_$=;/%,#_^=^+_#+_==:&,=}}+%#/&,,=*=#&^,*$_$+&=,._/!}&;,%_#=;/*,_#+=!&:,/_}=.&^*$_,=%&#.^_*!_&+,*;.=/&},;#%=$&,,*__=^&!,:_/==&.,&_}!;&%,#_^=&!_,+_==://,}_;=&&$,,_*=#&,&!_:=+&,!:;&=}&;,&/#/&*,$*^;%}=+&_}&#.}**,$^_%&#,^_!=_&*,/#$=&*}};_%=$&:_*+,_=;+/$%/^}*.=&_$=;&/+#*&*.=!^,#}%+$}^=,;=&&$,$!*:.#=:+::=#;/^#^%&;*$$=%$&,&*,__;}=+^}$&/*..&,$_,=##!^,%^$^*,:/$:^/&},;_/:$/&%_+*.,$}./_+,=&.,&_=$;!};/+.}**,#}.}$:$/,}_;=&}$!&}:}*&+$}$+:#;&/;./.}&;,%_$}^.}+&*_!%:._=_^%$*^%}/,=%&#,;:!=,=}++:#/%%.*!!/!$&,,*_$*._!,:_/==^.,&_$=:&%,#_^=*&_,+_!!:&+.}_;=&+$,;**=#&^,%_:=+&=.._/*}&.%%_}*,&*,_=+=!=:,/_}=.&&,$_;*%&#_^_**_&,,=_.=/+},;$%=$,,,&__=^&!.:_+*=&.=&_==;&%,#$^=*+_,^+==_+/,}_.%&&}!,_*=#&,.!_:=+,=,:!&=}&;,&$#=,&*#__^^!&:,/_!*.&&,}*,=%+#,^_!=_&+,=_:%/&}$;_&*$&,.%&_=^,!,:_/==&.,&_!:;&%,#_,&*&_;+_==#!/,}_;=&/$,,_*=#/^,!_:=+/=;._&=}&$.&!#=,&*,=&+&_}&^:&=/.&&,$_.*&*#,^#!=_/+,=_.=/.}};_&*$&,,*_#!^&!;:_/=!_.,&_$=;&%,#_^=*&}*+_!!:&/.}_.!&&$,.;*=#&^,!#:=+&=,.#&=}&;,%_=%,&*,__:=!&:,/_}=.&&,}&_=,/$}^_!=_&#;!*^!.%}$&^,*#.!,/_^::;=*//;,#=*$^/:;=;&#;,#=;#_$+_==:&;.}!!=.,$#&},*#,^,!_:=^=}$^$$^+:;,%_#=,&*,__.$/&:_+&}=.&&,},;%$}^*._&^:!!}.::}/&},;_;/=%+/_/!$,+#$&:^_=&/+:+!}^^#/*$,,*&_,+_*$:!!;^+_}&*.#!.}^#;^,!_:=;*=/+^#./%;_%=#=,&*,$*+*#:%=*%=+.&&,$_=^^+}=+^//!!=+=_.=/&},;_%=%;_,}%#:^&!,:_,:=&+=##&!._*.,_}}+:##;+!$:&/,}_:},*}+,%.:^;}++;$&+!#:&#_^=_/$&_#=,&*,!$:^&^_&%/##+;$/+;}%^&};;%=};_**%/.=/&},;_%=$&_/+_+=^.!,:_/=}&./=_;%/$!&//,&*&_,+_*:,_*^,,}*&,$,,_*=!%+.#}/^##=$._&=}&/;/}#;.!}};%=$!&:,/_}=.&_,*=_=}:##^_!=_&,&=+^$$%&;+*&=$&,,*_*/.&!^,,}*+:#&}}.**},=!+^#$&/%^=+*::/,}_;=/}#$/.;+*};}}}/=+.=,._&=%;*;}%$*!$+*:,+=!&:,/_}=+&;$*_;*%&#,^_!=_&.,/#$=&*}=;_%=$&;&%*;_},^,#.&#:;._/^$=;&%,}&,%$^/,:;%^.:$}+#$:/..};**=#&^,*&+::.:,/*%*&&;,%_#=,&*,__:./&.+/=}=.&&,}#,&}#+;}/*._&+,=_:_&$_/**;:=^^&#,&%_!&%_%/==&.,^=$.&=_#*;.^!::/^,==:&/,/!,$=%/&.^$}}:+_#}*}^=_}$}&=}&;,&$$$,&*,__;*!&:,/_=+_;&,$_,=+_#,^#!=_&+,==_*/&},;_^,$&,;*_$*,*!,:_/=*+.,&_$=:&+^#_^=*&_,+_!;:&+.}_;=&/$,;&*=#&^,*$:=+&=.._/^}&;,%_}*,&*,_}+=*/:,/_}=:+&,$_;&%&}%^_!=_&+,=_.=//},;=%=$+,,*__=^&!,:_/==&.;&_}+;&%,#_^=%*_,+#==://,}=:*&&$,,_%$#&^;!_:=,!=,._&=}/;,%_#=;+%+__+=!&_./_}=.&+,*,,=%&#,^_!=#_+,!$.=/&}.;_&,$&,,*_$*^&!,:}/=!%.,&_$=.+%,#_,&*&_:+_==:&+.}_;=&;$,;_*=#&^,!_:=+&=.._//}&;.%_#=,&*,_}+=!&:,/=}=:+&,$_;&%&#=^_!=_&^.=_.=/;},:%%=$&,,%$_=^&!$:_^$=&.,&_=*;&%,$%^=&%_,+_==:&/,}_.&&&$},_%*#&,,!_:=+^=,_*&=},;,%_#=,&*___+=!&:,/_!=.&&,$=,=%,#,,+!=#++,=_://&}=;_%=$&;.*__=^.!,_./==&.,/$$=;&%}#_;;*&_,+_**:&/,=&;=/;$,,_*=#&^,!__/+&==._/*}&;,%_#=,,*,_=+=!;:,+_}=.&&:$_;&%&#_^_%*_&+,==.=/_},;_%=}+,,*_#/^&!.:_/==&:.&_$=;.%,$=^=*&_,^$==:&/}}_:.&&$,,_*=#&^,!=:=+:=,.$&==&;,%_$%,&&,__^&!&$,/_}=.^&,=,,=%;#,^_!=_&+,=_:%/&};;_/*$&,,*__=,^!,:_/=!+.,&_}!;&%;#_^=*&_,+_==:&/,}$;=&/$,,_*=#&^,!_:=+&=,._+=}&;,%_#=,&*,$;+=!.:,/_}=.&,.$_;!%&#,^_*&#++,=_.=;+},;#%=}+;+*__=^&!$:_/==&.,/#$=;/%,#_^=*&_,+_%.:&/,}_.*&&$;,_%&$+^,!_:=.+=,.#&==+.+%_#=,&&.__+=!&#,,.}=.&&,$_,=&!#,,$!=_&+;=_:,/&},;_/*$&,,*$_=;^!,:_/=!+.,&_}%;&&%#_^=*&#.+_==:,/,=,;=&&$,,_*=#&^;!__&+&=.._&=}&;,%_#=,&*,_#+=%&:,/_}=.&&,$_:!%&#,^_!=_&+,=$.=//},;_/#$&,,*_#!^&!,:_/==&.,&_}!;/%,#_^=^+_#+_==:&,=$=/:#%%=;&*=#&^,!_#&+&=;._&=}&;,%_}*;**,_$+=!/:,/_}=..&}$_;%%&#,^_*!_&+.=_.=+_},;_%=$/,,*__=^&*=:_/==&.,&_$=;&%,=+^=*+_,+$==://,}_:_&&$;,_%*#&^,!_:=,!=,._&=}/;,%_#=,/*,__+=!&:_/_}=.&_!}+,=%&#,.#*&,.$$+&#&&/:&!$^$/#;&*__=^&&;:=!;;%}%+&#.&.::*.;&}&__^,==:&/,*:;+!*+$$^/%_/%%,#=^^.$+.=//}&;,%_=_^.$&+&_%*&:,/_}=:+/+$_,=%&#;^_!=_&+$%*.=/&},.,%=$/,,*#_=^,*.:_/==&:&&_}!;&&.$.^=*&_,+$==:&/,=*_/&&$,,_%^#&^;!_:=+&=_:$&=}&;,&%#=,/*,_=,*!&:,/_=_.&&;$_.*&*#,^_!=_^+,=_.=/.!$;_%=$&;&*_#!^&!;:_+&!+.,&_$=;=%,##^=%+#++_==:&/_}_;=&&=,;_*=#&^,!_:=+^=,._+!}&;;%_$!,&*,__+=!.:,/_}=.+&,$$,=%&}:^_!=_&+,=_.=/&},:;%=$&,,*#_=^&!,:_/==&.,&}},;&%,#_.:*^_,+_==$}/$:,.%&&$,,_*=;;^,!_:=+&=,._:=%&/}&,#=,&*,$!^._=&/.!!:;+}!+.#;&=.;^=*+_&+,=_$:/;_&*,;.}=:!*__=^&!,:_/=}&$^!%}&;&%,#_..*$;+}&.=:,/,}_;=+}$!&^_/}/^,!_:=^+!+._/%}&;_%_#=,&*,#:+=!^:,/}}=./&,}*:/%&#:^_*^_&+;=_.=/&}_.$%=$&,,%%_=^/!,_$+$=&.:&_}&;&%,#_^=%%_,+}==:^/,}#;=&&=&,_%%#&^.!_:=+&!._*&=}^;,&*#=,&*,#$:*!&:_/_=*.&&,$_.*%&#,,!!=_.+,=_.=/&},;_&+$&,,*__=^&*.:_/==:.,/*$=;&%,#=^=*&_#+_*#:&/;}_;=/_$,;/*=#,^,!_:=^+&;._/.}&;#%_#=,&&,__+=!$:,++}=._&,=_,=%&$%^_!=_&+;=_.=/&},.;%=$_,,*__=^&!,:_+$=&.=&_$=;&%,#_^=*}_,^.==:+/,!_;=&&}%,_%:#&^}!_:=+&=,:^&=}+;,%$#=,&*,__^:!&_%/_=%.&+,$_,=%}#,,^!=_^+,=_.=/&=*;_&*$&,.*__=^&!,:=/==#.,/+$=;&%,#_,;*&_:+_!*:&^,}_;=&^$,;/*=#^^,!=__+&=#._/#}&;;%_}*;**,#!+=!,:,/_}=.&+,$_;/%&#;^_*&_&+,*,.=/,},;$%=$&,,*_$#^&!,:_+!=&.,&_$=;&%,#_,**+_,+_==/&/#}_;=&&!=^=$:+%_=&/:=+&=,._&=}&;,%_}$,&*,__,**.:,/$}=.+&,$_,=&+$$^_*%_&+.=_.=/&=...%=$,,,*#_=^&!,_*+^=&.#&_$=;&%;#_,&*&_,,&==:&/,}$;=&&$,,_&,#&^,!_:=+&=,._&==_;,%_#=,^*,__+=!&_=/_}=.&&;$_,=%&#,.+!=_,+,=$.=//},.*&.$&,,*_$.^&!;:_+!=&._/$$=;&%,}+^=*/_,^*!.:&/,}_:.&&$;,_%!#&^_*$:=+&=,_+&=}/;,&*};,&*;__^=!&:;/_}=.&&_}$,=%&#,,_!=_/+,==_*/&},;_/.$&,;*__=;,!,:=/==+.,&}$=;&/_#_,/*&_:+_!*:&/$!/;=&,$,.!*=#/^,*!:=+,!.._&=}&.#%_$!,&*_#$+=!&:,^+}=./&,$_:&%&#_^_**_&+:=_.=^,},.!%=$^,,*$_=^.**:_+&=&_*&_}!;&%##_,&%+_,+_==_$/,}#;=&,}.,_*=#&;%!__!+&=,_!&=},;,%_#=,&*,__,&!&:_/_=!.&&,$_,=&=#,^=!=_++,=_.=/&!/;_%=$&,;*__=^&!;:_/==&.,&_$=;&%,$%^=*&_,+_%=:&/,}_.!&&$,,_*=#&^,!_:=+&=,._&=}&;,%_#=,&*,__+=!&:,/_}=.&&,$},=%&#,^_!=_&+,=_.=/&},;_%=$&,,*__=^+!,:_/==&.,&_$=;&%;#_^=*&_,+_==:&/,=;;=&&$,^.%,#&^,!_#$+!_;*+^}}*/#_.*=,&*,__+=!&:,;:%=&&//$_,=%&$!^!#$*._%*};_}=+:$;&::$*.__#;^&!,:_^}=&^&#.&}:;!^,+}/_&_:+_==:&+#$$+.$%}&,_*=#&:}%}$;+}}^^&://:=%,,=$;*.!_=+=!&:,,:}*+:_=$=;+%&#,^_+}=/$;%%.;!!:}.%%=$&,,/=_.*=.#=;,^}:&,/+$=;&%,$:^+}*%$:#%^.,=,+}#$&,$},_*=#&;*=$,,$:+%_$&!::.*%_#=,&%%_/%%.%=,/*$*&}:#*;::%.#,^_!=#}+!_^&/./!!.$%=$&,,%$=:^&!,:_+;=&.,&_==;&%,#_^=*&_,+}==_+/,}_.*&&$},_*=#&;,!_:=++=,.$&=}$;,&$#=,&*___^&!&:,/_}=.&&,$$,=%,#,^$!=$&+,=_:*/&}.;_&/$&.,*__=^+!,:$/=!!.,+_$=;&%.#_,**&#%+_*=:&/,}$;=&+$,;,*=$+^,!__%+&=;._&=}&..%_#=,,*,#*+=!&:,+$}=.&&#$_;,%&#,^_%*_&+,!*.=/+},;_%=$&,,*_#%^&!$:_+*=&../&$=;,%,#_^=*&_,+_%::&/,}_.&&&$;,_*=}!^,!_:=+/=,._&=}/;,%_#=,/*;__+=!&.++!}=.&&,*&,&$}+^#&*/_&+,=__*+*},;#%=$/,,*__=^.!}:_+*=&.,&_}!;&%;#_^=%__,+_==:&/,}_;=&&!*,_%!#&^.!__!+&=,_;&=}&;,%##=,&*,_#+=!&:,/_*:.&&,$_*}&*#,^_!=$%,=$$+/^^*};+}%/,:}*%^}$%!*.,/==&.,&_$=;&/$!_,&*__,+_==#*//:#!.^%$+/!:$^&^$!_:=+&:%&;%.;&#!*}=:,.*,__+=#%$}&=}#&&}=+/;+%&#,^_:^},=&./,.&*:$;=%=$&,,^%}$^%#$$^++=&.,&_%$*,:&##!=^+!.^&==:&/,=,.%}},*:_/^_!*}+$_++&=,._$%}^!#/;&+,#^;#_+=!&:,.%/;};,}=*_./*}#,:=!_%&}$;,_!$:+%_&&$&,,*_$!+,$!&#+&=,.,&_$=..*..%=,*,_#+_==:&,+};/:_$&^:/*=#&^,!_:=+&==$_;=}&;,%_#=,&.,!:.=!,:}/_}=.&^_$+&__;*/.%!^%_^&=_.=/&%}.^%;.^!^^_./%%_%*=;$=.},&_$=;&%,#_^=+*=,/,==:&/,}_;=&&}=__!$#,^,!_:=.%}.+}$^$*.%%_#=,&%=_}%%.&=/,%}^%::;%^.+/}$%^_!=_&;%=_^,$/&;:&%*;&=^^%$//=!,:_/==&.,__&^#&:!$*^=*&_,*:_,.$+%;,*+;&$,,_*=#&^,!_}+.&_#._&=}&;,%_/=_}+,!$^,!&:,/_=_..!&+=$=/*_/%!$^_;+,=_.=+=}*+._}%/}=%%_=^&!,=$++.,}/%&,=_.*&#_^=*&_,+_&==+;,^/.&&&$,,_&__.&.:%,+^!=,._&=%:$+^:=+&:}_:;%+#+/;$&^!:_=}}%,=%&#,;^!+;*_$+^#^%^**:%%=$&,,;#$,/;;#=.+/:*!_+__*}%&%;$=%/,:*!*+:_!*%^;#+*=!%;**=#&^,}%&+#$,&:=/:!};$%_#=,&+%#!%_;=!*^,*:..&,$_,=,:%^:!};*,/!/$:&/&},;_+$#$&=:%#%,&!,:_/=/+=+.#&!_;,,*::$/;}.;**$#}^*!+:%::$,,_*=#&^,!_=:.&.,:+&=}&;,&,#./!.$*^;%}=+&_}&#.,&_$_,=%&}%/&$}&=:$=_.=/&=...%=$&,,%#_=^&!,_*,+=&.,&_}&;&%;#_,!*&__^$==:&/,}=;=&/$,,=&*#&^,!_=:+&=;._+*=*;,%_#=;/*,__+=%&$./_}=.&&,$_;$%&$.^_!=_/+,=}.=/&},.$%=$&,.*_#:^&!,:_^*=&.,&}$=;$%,#_^=%+_,+_!&:&/.}_;=&&$,,_*=#/^,!=:=++=,._&=}&;,%_#=,&*;__^+!&:,/_}=:%&,$#,=%&#,^=%*_&+,=_:}/&};;_&&}+,,*__=,&!,:#/==&_/&_$=;&%;#_^=*&#.^.==:&/,*!;=&&$,._+}#&^,!_:=+&*}._&=}&;,%##=,&*,__+=%&:,/_=!.&&;$_;#%&$.^_!=_++,=}.=/&},.$%=$&,:*_$$^&!,:_^*=&.,&=$=;_%,#_^=%+_,+_!/:&+=}_;=&&$,,_*=#+^,*!:=++=,._&=}&;,%_$*,&*.__^+!&:,/_}=};&,$#,=%&#,^=%*_&+,=_=//&};;_/*}*,,*__=;}!,:_/=*&$&&_$=;&%,#_.**&#.+_==:+/,}};=&&$,;$*=#&^:!_$,+&=,._+*}&;,%=#=;#*,__+=*+:,/_=/.&/_$_,=%&#,^_!=_++,!!.=/+},;_%=$&,:*__=^&!_:_^*=&.,&=$=;^%,#_^=%+_,+_!/:&^;}_;=&&}.,_*=#.^,*!:=+&=,:$&=}&;}%_}.,&*,__+=!&:,/=}=.:&,$$,=&&#,^_*%_&,/=_:&/&},;_%=$,,,*__=^&!,#_/==&._&_}&;&&/#_;**&_,^!==:^/,}_;=/+$,,_%+#&^;!_:=+&!.._&=}:;,&*#=,&*,#$+=!&:=/_==.&&,$_,=%&#,,!!=__+,=$.=/&},;_&&$&,_*_#/^&*,:_/==^.,+_$=;,%,$$^=*&__+_!%:&/,}_:*&&$,;!*=}^^,!_:=^+=,._/+}&:_%_#=,&%.__+=!::,^:}=.&&,$_,=%&#_^_*^_&+.=_:=/&},;}%=$=,,*=_=.&!,:_+%=&_&&_=%;&%,#_^=*&_,+}==://,=$;=&&$,,_&/#&^,!_#*+&=,.#&==%;,%_#=,&*,__+=!&:./_=!.&&,$_,=%&#,^_!=_&+,*_.=/&},;_%=$&;$*_#+^&!,:_/=/;.,&#$=;&%,#=;**&_,+_+/:&/;}_:*/*$,,_*=##^,!_:=+&&:._/!}&;,%_#=,&%.__+=!+:,/}}=.&&,}$,=%&#:^_*^_&+,=__*/&},;=%=$,,,*__=,+!,:_+/=&#!&_$=;&%,#_^=*+_,^!==:+/,}_;=&&$,,_%*#&^;!__&+&=,._&=&;;,%##=;+%+__+=!&_;/_}=.&+,!.,=%&#,^_!=#:+,!$.=/&};;_&%$&,,*_$*^&!,:$/=!+.,&_$=.+%,#_,%*&$$+_==:&+.}_;=&,$,.^*=#&^,!_:=+&=;._/&}&;.%_#=,&*,__+=!&:,/#}=_&&,$_,=%&#,^_&._&+,=_.=/&},;$%=$/,,*_$#^&!,:_+!=&.,&_$=;&%,#_^=*=_,+_===++!}_;=&&=^,_}_+*#^&!;}=$^#}$/.}&;,%_$:^#$:/::==.;.=^^/$!&_$=,=%&#,.:!*,:$=,/:&/&},;_//$&&&_*&;,!!,:_/==#;#=./+$}/:_,*_;^!/^^$./+&&}_;=&&$,,_.=!;:,+#__+&=,._.;=:.;*%;}==&/#}^:}&+$$+^;._&,$_,=/*#/%#;.}%++#!%$}&}$;_%=$&#;=&_:;^%%%=:*=:.,&_$=:+%,.%=/^;$*/#+*:$/,}_;=/%#$/..+*/;}==+=#^&+.=/^}&;,%_!&^$$&+!:#%:.}+#}=.&&,}$_,%&#,^_*__&+,=__=/&},;_%=$&,,%!_=,+!,:_+*=&.:&_$=;&/,#_^=*+_,+$==:}/,=$;=&&$_,_%!#&^,!_:=+&=,.$&=},;,%$#=.&*,__^*!&:./_=..&+,$_,=%+#,^$!=_,+,*_.=/&}.;_&*$&,.*_$*^&!,:}/==_.,&_$=.+%,#_,&*&_}+_==:&+.}_;=&;$,;/*=#&^,*$:=+&=$._/+}&;,%_#=,&*,_}+=!.:,/$}=.+&=$_;&%&#,^_!=_&+,%^.=/&},;=%=$/,,*_$#^&!,:_+!=&.,&_}!;&%,#_,!*/_,+_==^:/#}_;=&&!=^=$:+%_=*!:=+&=,:$/$}&;;%_$!,&*,__^+!::,/$}=.&&,$#,=%/#,^_%,_&+,=_.=/&},;_%==$,,*#_=^+!,:#/==&_/&_$=;&%;#_^=*&_;+_==:&/,=$;=&&$,*.*=#&^,!_:=+&/}$_^:}.;,%_#=_$$;}*.:_/:*/==..&&,$_;_*$./=*^:$^/&:,*%.!$+.&%=$&,,%/_}%!.%!^,^$^/%!%}/;&%,#_.$*!,%}++}=+/}}_;=&&!_,+$_+;_/&%:^##=$._&=}&;=:^++%#+&!,%/!&:,/_}=.&&,=,_=,/$&^_!=_&_!&^=;.^&^#_%/}%:%&=$$,.=+_^/==&.,^^$=/__;*#;,!+^,$:/^_;!}=*;=&&$,*!:#^_}$}.=/:+!,._&=}&.,&*.^=,,*$=/^:}!..&!!,%__&._,%^_&^_!=_&+,=_*=.;%,;}&=$&,,*_!^,___=,/#.+$,*:+!_+=$/:^}#,%!^:%.:#/,}_;=,;=%&&;*}/*$+;_+*_}+:.&=}&;,&.#.&_.}}$,$=&^*#=!_.$!_,_}!%,#=^_!=_&,+=;^!_$*^;.=/^*#^*#},^&!,:_^*!*.,&_$=;.%,#_^=*.$$+_==:&/_}_.!&&$;,_%&$+^,!_:=+,=,.#&=},..%_#=,&&/__^!!&_.+.}=.&&,}*,=%&#,;_&}_&+,=_.=/&}#;_/*$&,,*#_=,/!,:_/=!+.,&_}*;&&^#_^=*&#.+_==:^/,=%;=&&$,;$*=#&^_!__#+&=,._&=}&;,%##=,,*,_$+=!&:,/_}=.&&,$_;!%&#$^_!=_&+,!:.=//},;#%=$,;.*__=^&*^:_+!=&.,+;$=;&%,##^=*&_,+_*!:&/,}_;=&&$,,_&==:^,!_:=+&=,:_&==+;,%_$*,&%;__+=!&_./_}=.^&,}.,=%&#,,$!=_&+_=_:*/&},;_/*$&,,%!_=^/!,:_/==&.,&_}*;&%##_,**&_,+_==:&/,}$;=&+$,;**=#&^,!_$^+&=;._&=}&;_&$#=,&*,}%+=!/:,/_!!.&&,$_,=%&#,^_%=#&+,=_.=/&},.,%=!&..*__=^&!_:_^*=&._/$$=;&%,=%^=*/_,^$!$:&/,}_.+&&$,,_&==*^,!_:=+&=,:+&==+;,%_$!,&%;__+=!&_./_}=.+&,}/,=%&#,,$!=_&+:=_::/&},;_/*$&,,*=_=^_!,:_/==&.,&_}!;&%_#_,**&_,+_==:&/,}_;=&/$,._*=#&^,!_:=+&=:._&=}&;,%_#=,+*,_#+=!&#//_}=.&&;$_,=%&#,^_!=_&");local k=(260-0xa8)local e=13 local l=o;local _={}_={[(0x5a-89)]=function()local x,n,o,_=y(J,l,l+g);l=l+v;e=(e+(k*v))%a;return(((_+e-(k)+d*(v*N))%d)*((N*L)^N))+(((o+e-(k*N)+d*(N^g))%a)*(d*a))+(((n+e-(k*g)+L)%a)*d)+((x+e-(k*v)+L)%a);end,[(121-0x77)]=function(_,_,_)local _=y(J,l,l);l=l+r;e=(e+(k))%a;return((_+e-(k)+L)%d);end,[(-59+0x3e)]=function()local _,o=y(J,l,l+N);e=(e+(k*N))%a;l=l+N;return(((o+e-(k)+d*(N*v))%d)*a)+((_+e-(k*N)+a*(N^g))%d);end,[(356/0x59)]=function(l,_,e)if e then local _=(l/N^(_-o))%N^((e-r)-(_-o)+r);return _-_%o;else local _=N^(_-r);return(l%(_+_)>=_)and o or m;end;end,[(815/(0x9272/230))]=function()local e=_[(0x58-87)]();local n=_[(0xeb/235)]();local x=o;local l=(_[(0x2d0/180)](n,r,p+v)*(N^(p*N)))+e;local e=_[(53+-0x31)](n,21,31);local _=((-o)^_[(37-0x21)](n,32));if(e==m)then if(l==A)then return _*m;else e=r;x=A;end;elseif(e==(d*(N^g))-r)then return(l==m)and(_*(r/A))or(_*(m/A));end;return W(_,e-((a*(v))-o))*(x+(l/(N^K)));end,[((-25+-0x2a)+0x49)]=function(n,x,x)local x;if(not n)then n=_[(104+-0x67)]();if(n==m)then return'';end;end;x=Y(J,l,l+n-o);l=l+n;local _=''for l=r,#x do _=V(_,G((y(Y(x,l,l))+e)%a))e=(e+k)%d end return _;end}local function J(...)return{...},Q('#',...)end local function L()local h={};local i={};local e={};local n={h,i,nil,e};local l={}local w=(118+-0x3f)local e={[(30-0x1d)]=(function(e)return not(#e==_[(0x1a6/211)]())end),[(0x32-48)]=(function(e)return _[((138+-0x6d)+-0x18)]()end),[(0x65+-98)]=(function(e)return _[(0x2e2/123)]()end),[(0x1e0/120)]=(function(e)local l=_[(-21+0x1b)]()local _=''local e=1 for o=1,#l do e=(e+w)%a _=V(_,G((y(l:sub(o,o))+e)%d))end return _ end)};n[3]=_[(478/0xef)]();local d=_[((-6188/0xee)+0x1b)]()for o=1,d do local _=_[(0x1e+(-0x1b20/248))]();local d;local _=e[_%(146-0x6b)];l[o]=_ and _({});end;for a=1,_[(251/0xfb)]()do local e=_[(316/0x9e)]();if(_[(0x87-131)](e,o,r)==A)then local n=_[(416/0x68)](e,N,g);local d=_[((-0x7a+253)-0x7f)](e,v,N+v);local e={_[(0x31+(-0x1648/124))](),_[(33+-0x1e)](),nil,nil};local x={[(0x13+-19)]=function()e[c]=_[(0x41+(-30-0x20))]();e[j]=_[(30+(0x49-100))]();end,[(0x12+-17)]=function()e[f]=_[(-85+0x56)]();end,[(70-0x44)]=function()e[u]=_[(-0x68+105)]()-(N^p)end,[(54-0x33)]=function()e[x]=_[(0x19-24)]()-(N^p)e[P]=_[((317-0xda)-96)]();end};x[n]();if(_[(0xa4/41)](d,r,o)==r)then e[b]=l[e[O]]end if(_[(64+-0x3c)](d,N,N)==o)then e[c]=l[e[D]]end if(_[(0x5e+-90)](d,g,g)==r)then e[s]=l[e[P]]end h[a]=e;end end;for _=r,_[(-0x4f+80)]()do i[_-r]=L();end;return n;end;local function m(_,v,k)local A=_[N];local a=_[g];local e=_[o];return(function(...)local y=Q('#',...)-r;local p={...};local l={};local L={};local _=J local _=o _*=-1 local _=_;local d=e;local g={};local e=o;local A=A;local a=a;for _=0,y do if(_>=a)then L[_-a]=p[_+r];else l[_]=p[_+o];end;end;local _=y-a+o local _;local a;while true do _=d[e];a=_[(0x74-115)];n=(4579236)while a<=((4048/0x2c)-0x36)do n-= n n=(848160)while a<=(125-0x6b)do n-= n n=(421998)while(78-0x46)>=a do n-= n n=(13397076)while(0x15/7)>=a do n-= n n=(1840332)while a<=(-0x1e+31)do n-= n n=(3123120)while a>(104+-0x68)do n-= n local _={l,_};_[o][_[N][i]]=_[N][S]+_[N][D];break end while 1232==(n)/((2563+(-0x2-26)))do local _={l,_};_[r][_[N][U]]=_[o][_[N][P]]+_[r][_[N][f]];break end;break;end while 502==(n)/((7371-0xe79))do n=(1279048)while(107+-0x69)<a do n-= n local _=_[i]l[_](l[_+r])break end while(n)/((0xa9e+-97))==488 do local e=_[h]l[e](M(l,e+r,_[D]))break end;break;end break;end while 3402==(n)/((0xdf0d0/232))do n=(211200)while(0x81+-124)>=a do n-= n n=(7293475)while a>(122-0x76)do n-= n local e=_[i]l[e]=l[e](M(l,e+o,_[x]))break end while(n)/(((2646+-0x43)+-94))==2935 do l[_[h]]();break end;break;end while(n)/((3331-0x691))==128 do n=(6041984)while(0x2a-36)>=a do n-= n local _=_[b]l[_]=l[_](l[_+r])break;end while 1664==(n)/((7294-0xe4f))do n=(11725452)while a>(0x1f-24)do n-= n l[_[t]]=m(A[_[w]],nil,k);break end while 4077==(n)/((2992+-0x74))do local c=A[_[x]];local a;local o={};a=R({},{__index=function(e,_)local _=o[_];return _[1][_[2]];end,__newindex=function(l,_,e)local _=o[_]_[1][_[2]]=e;end;});for n=1,_[s]do e=e+r;local _=d[e];if _[(99+-0x62)]==24 then o[n-1]={l,_[x]};else o[n-1]={v,_[x]};end;g[#g+1]=o;end;l[_[U]]=m(c,a,k);break end;break;end break;end break;end break;end while(n)/((-0x1a+148))==3459 do n=(5773950)while(1287/0x63)>=a do n-= n n=(9083574)while(-26+0x24)>=a do n-= n n=(74841)while(81+-0x48)<a do n-= n if(l[_[b]]==l[_[j]])then e=e+r;else e=_[w];end;break end while(n)/((0x7ac+(-0x1707/131)))==39 do local o=_[u];local e=l[o]for _=o+1,_[P]do e=e..l[_];end;l[_[i]]=e;break end;break;end while(n)/((0x1c16-3632))==2553 do n=(2320272)while a<=(43-0x20)do n-= n if(l[_[b]]==_[P])then e=e+r;else e=_[c];end;break;end while(n)/((0x372+-96))==2952 do n=(1677940)while(2460/0xcd)<a do n-= n local o=_[i];local d=l[o]local n=l[o+2];if(n>0)then if(d>l[o+1])then e=_[D];else l[o+3]=d;end elseif(d<l[o+1])then e=_[x];else l[o+3]=d;end break end while 2893==(n)/((-64+0x284))do local o=_[t];local n=l[o+2];local d=l[o]+n;l[o]=d;if(n>0)then if(d<=l[o+1])then e=_[D];l[o+3]=d;end elseif(d>=l[o+1])then e=_[u];l[o+3]=d;end break end;break;end break;end break;end while 1950==(n)/((100674/(118-0x54)))do n=(1933352)while a<=(435/0x1d)do n-= n n=(3242495)while a>(136+-0x7a)do n-= n l[_[i]]=l[_[f]][l[_[P]]];break end while(n)/((6334-0xc75))==1031 do l[_[t]]=k[_[w]];break end;break;end while 3607==(n)/((0x451-569))do n=(11132996)while((0x5+-56)+0x43)>=a do n-= n l[_[h]]=l[_[u]][_[P]];break;end while 2876==(n)/(((0x69b6085/249)/115))do n=(9257565)while a>(-0x3b+(273-0xc5))do n-= n e=_[c];break end while(n)/((2465+-0x20))==3805 do l[_[t]]=v[_[D]];break end;break;end break;end break;end break;end break;end while 310==(n)/(((0x3f3a4/92)+-79))do n=(524700)while a<=(-0x69+133)do n-= n n=(4263638)while((-94+0xb2)+-61)>=a do n-= n n=(5212302)while a<=(0x3d-41)do n-= n n=(346302)while(91-0x48)<a do n-= n l[_[t]]=(_[D]~=0);break end while(n)/((17424/0x8))==159 do l[_[t]]=#l[_[f]];break end;break;end while 2238==(n)/((4738-0x969))do n=(1327464)while(0xa6-145)>=a do n-= n l[_[U]]=(_[w]~=0);e=e+r;break;end while 618==(n)/((251316/(12753/0x6d)))do n=(9654645)while a>(-0x5e+(0x116-162))do n-= n l[_[U]]=l[_[c]]%_[C];break end while 3215==(n)/((0xc26+-107))do l[_[t]]=_[c];break end;break;end break;end break;end while(n)/((0x1860-3166))==1387 do n=(8305518)while(0x125c/188)>=a do n-= n n=(10649309)while(4896/0xcc)<a do n-= n if(l[_[b]]~=l[_[P]])then e=e+r;else e=_[w];end;break end while(n)/((5772-0xb81))==3767 do l[_[t]]=l[_[c]];break end;break;end while 2742==(n)/((3076+-0x2f))do n=(11380608)while a<=(0x74+-90)do n-= n if(l[_[U]]~=_[s])then e=e+r;else e=_[f];end;break;end while 3293==(n)/((0x1b31-(592345/0xa9)))do n=(3595797)while((-0x414/12)+114)<a do n-= n do return l[_[U]]end break end while 1797==(n)/((428214/0xd6))do l[_[O]]={};break end;break;end break;end break;end break;end while 165==(n)/((-0x41+(6569-0xcfc)))do n=(1497340)while(192-0x9f)>=a do n-= n n=(3377998)while a<=(114-0x54)do n-= n n=(2898925)while a>(-0x68+133)do n-= n local e=_[U];local o=l[_[f]];l[e+1]=o;l[e]=o[_[C]];break end while(n)/((0xe3e-1851))==1615 do do return end;break end;break;end while(n)/((103638/0x45))==2249 do n=(2571615)while a<=(4712/0x98)do n-= n k[_[f]]=l[_[b]];break;end while(n)/((-88+0x7e7))==1329 do n=(9299136)while(-16+0x30)<a do n-= n l[_[h]][_[x]]=l[_[B]];break end while(n)/((0x1d27-3767))==2516 do l[_[h]][l[_[f]]]=l[_[C]];break end;break;end break;end break;end while 1772==(n)/(((0x6f1+-44)-888))do n=(4998208)while a<=(-0x44+103)do n-= n n=(150586)while a>((0x256e-4822)/0x8c)do n-= n v[_[x]]=l[_[i]];break end while(n)/((115566/0x21))==43 do l[_[i]][_[c]]=_[S];break end;break;end while(n)/((0xefa-1978))==2693 do n=(3774002)while a<=(0x83-95)do n-= n l[_[i]]=l[_[f]]-l[_[C]];break;end while(n)/((2122+-0x17))==1798 do n=(16204540)while(0x2060/(0x212-306))<a do n-= n if not l[_[i]]then e=e+r;else e=_[c];end;break end while(n)/((0x1015+-81))==4015 do if l[_[U]]then e=e+o;else e=_[u];end;break end;break;end break;end break;end break;end break;end break;end while(n)/((2406-0x4cb))==3884 do n=(9237288)while(137-0x4f)>=a do n-= n n=(4779054)while a<=(-28+0x4c)do n-= n n=(2684736)while(-58+(0x76+-17))>=a do n-= n n=(400482)while(66+-0x1a)>=a do n-= n n=(3256912)while(468/0xc)<a do n-= n local e=_[O]l[e]=l[e](M(l,e+o,_[c]))break end while(n)/((163419/0x39))==1136 do local o=l[_[B]];if not o then e=e+r;else l[_[t]]=o;e=_[c];end;break end;break;end while(n)/((0x2d0-378))==1171 do n=(8432732)while a<=(4469/0x6d)do n-= n local _={l,_};_[o][_[N][U]]=_[N][C]+_[N][u];break;end while 3388==(n)/((-37+0x9de))do n=(10400862)while(840/0x14)<a do n-= n local e=_[h]l[e](M(l,e+r,_[w]))break end while(n)/((-0x6a+3484))==3079 do local _=_[h]l[_](l[_+r])break end;break;end break;end break;end while(n)/((-0x54+1506))==1888 do n=(5079678)while a<=(0x24bd/209)do n-= n n=(2002864)while(0xd3-167)<a do n-= n l[_[h]]();break end while 3316==(n)/((646+-0x2a))do local _={l,_};_[r][_[N][t]]=_[o][_[N][C]]+_[r][_[N][c]];break end;break;end while 1374==(n)/((724612/0xc4))do n=(955626)while(-40+0x56)>=a do n-= n local a;local n;l[_[h]]=l[_[D]][_[S]];e=e+o;_=d[e];l[_[h]]=k[_[D]];e=e+o;_=d[e];l[_[b]]=_[w];e=e+o;_=d[e];l[_[O]]=_[w];e=e+o;_=d[e];l[_[b]]=_[f];e=e+o;_=d[e];n=_[h]l[n]=l[n](M(l,n+o,_[f]))e=e+o;_=d[e];l[_[t]]=l[_[w]][l[_[j]]];e=e+o;_=d[e];n=_[U];a=l[_[u]];l[n+1]=a;l[n]=a[_[P]];e=e+o;_=d[e];n=_[U]l[n](l[n+r])break;end while(n)/((1308+-0x1b))==746 do n=(8256402)while(0x7e-79)<a do n-= n l[_[b]]=v[_[c]];e=e+o;_=d[e];l[_[h]]=#l[_[f]];e=e+o;_=d[e];v[_[f]]=l[_[U]];e=e+o;_=d[e];l[_[U]]=v[_[f]];e=e+o;_=d[e];l[_[h]]=#l[_[D]];e=e+o;_=d[e];v[_[c]]=l[_[b]];e=e+o;_=d[e];do return end;break end while 2849==(n)/((-44+0xb7e))do local n;l[_[O]]=l[_[c]][_[P]];e=e+o;_=d[e];l[_[O]]=k[_[x]];e=e+o;_=d[e];l[_[U]]=_[c];e=e+o;_=d[e];l[_[h]]=_[D];e=e+o;_=d[e];l[_[i]]=_[u];e=e+o;_=d[e];n=_[i]l[n]=l[n](M(l,n+o,_[f]))e=e+o;_=d[e];l[_[i]]=l[_[f]][l[_[C]]];e=e+o;_=d[e];if not l[_[b]]then e=e+r;else e=_[D];end;break end;break;end break;end break;end break;end while 2421==(n)/((173712/0x58))do n=(911988)while a<=(176-0x7b)do n-= n n=(409184)while(117-0x43)>=a do n-= n n=(6244450)while a>(0xa9+-120)do n-= n local n;l[_[U]]=l[_[w]][_[S]];e=e+o;_=d[e];l[_[i]]=k[_[f]];e=e+o;_=d[e];l[_[i]]=_[u];e=e+o;_=d[e];l[_[b]]=_[D];e=e+o;_=d[e];l[_[t]]=_[u];e=e+o;_=d[e];n=_[h]l[n]=l[n](M(l,n+o,_[u]))e=e+o;_=d[e];l[_[t]]=l[_[D]][l[_[C]]];e=e+o;_=d[e];if l[_[b]]then e=e+o;else e=_[x];end;break end while 1775==(n)/((0x1b92-3540))do local n;l[_[b]]=l[_[x]][_[C]];e=e+o;_=d[e];l[_[b]]=k[_[x]];e=e+o;_=d[e];l[_[t]]=_[w];e=e+o;_=d[e];l[_[i]]=_[f];e=e+o;_=d[e];l[_[b]]=_[w];e=e+o;_=d[e];n=_[O]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];l[_[t]]=l[_[c]][l[_[C]]];e=e+o;_=d[e];if not l[_[i]]then e=e+r;else e=_[c];end;break end;break;end while 673==(n)/((-32+0x280))do n=(3737484)while(1581/0x1f)>=a do n-= n local a;local n;l[_[U]]=l[_[x]][_[S]];e=e+o;_=d[e];l[_[t]]=k[_[c]];e=e+o;_=d[e];l[_[h]]=_[u];e=e+o;_=d[e];l[_[t]]=_[f];e=e+o;_=d[e];l[_[U]]=_[x];e=e+o;_=d[e];n=_[b]l[n]=l[n](M(l,n+o,_[D]))e=e+o;_=d[e];l[_[O]]=l[_[c]][l[_[S]]];e=e+o;_=d[e];n=_[t];a=l[_[c]];l[n+1]=a;l[n]=a[_[S]];e=e+o;_=d[e];n=_[t]l[n](l[n+r])break;end while 2364==(n)/((36363/0x17))do n=(298480)while a>(-34+0x56)do n-= n local a;local n;n=_[U];a=l[_[D]];l[n+1]=a;l[n]=a[_[S]];e=e+o;_=d[e];l[_[O]]=k[_[w]];e=e+o;_=d[e];l[_[h]]=_[D];e=e+o;_=d[e];l[_[b]]=_[u];e=e+o;_=d[e];l[_[h]]=_[u];e=e+o;_=d[e];n=_[b]l[n]=l[n](M(l,n+o,_[D]))e=e+o;_=d[e];n=_[i]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];n=_[i];a=l[_[x]];l[n+1]=a;l[n]=a[_[C]];e=e+o;_=d[e];l[_[i]]=k[_[w]];e=e+o;_=d[e];l[_[i]]=l[_[x]][_[j]];e=e+o;_=d[e];l[_[i]]=l[_[w]][_[P]];e=e+o;_=d[e];n=_[U]l[n]=l[n](M(l,n+o,_[x]))e=e+o;_=d[e];if(l[_[i]]==_[S])then e=e+r;else e=_[c];end;break end while 2296==(n)/((0x55d2/169))do local a;local n;l[_[h]]=l[_[x]][_[B]];e=e+o;_=d[e];l[_[O]]=k[_[D]];e=e+o;_=d[e];l[_[t]]=_[u];e=e+o;_=d[e];l[_[t]]=_[w];e=e+o;_=d[e];l[_[b]]=_[D];e=e+o;_=d[e];n=_[h]l[n]=l[n](M(l,n+o,_[w]))e=e+o;_=d[e];l[_[b]]=l[_[c]][l[_[P]]];e=e+o;_=d[e];n=_[b];a=l[_[c]];l[n+1]=a;l[n]=a[_[j]];e=e+o;_=d[e];n=_[h]l[n](l[n+r])break end;break;end break;end break;end while 1764==(n)/(((0x25c+-51)+-0x24))do n=(9410688)while a<=(0x87-80)do n-= n n=(4721400)while(-22+0x4c)<a do n-= n local a;local n;n=_[O];a=l[_[D]];l[n+1]=a;l[n]=a[_[s]];e=e+o;_=d[e];l[_[t]]=k[_[x]];e=e+o;_=d[e];l[_[h]]=_[c];e=e+o;_=d[e];l[_[i]]=_[u];e=e+o;_=d[e];l[_[U]]=_[w];e=e+o;_=d[e];n=_[i]l[n]=l[n](M(l,n+o,_[x]))e=e+o;_=d[e];n=_[i]l[n]=l[n](M(l,n+o,_[w]))e=e+o;_=d[e];if l[_[O]]then e=e+o;else e=_[u];end;break end while 1290==(n)/((0xeb7+(-0x5da/14)))do local n;l[_[U]]=l[_[u]][_[C]];e=e+o;_=d[e];l[_[b]]=k[_[D]];e=e+o;_=d[e];l[_[b]]=_[f];e=e+o;_=d[e];l[_[b]]=_[c];e=e+o;_=d[e];l[_[b]]=_[x];e=e+o;_=d[e];n=_[t]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];l[_[O]]=l[_[x]][l[_[B]]];e=e+o;_=d[e];if not l[_[b]]then e=e+r;else e=_[u];end;break end;break;end while(n)/((7098-0xe0d))==2688 do n=(3006244)while a<=(191-0x87)do n-= n local a;local n;l[_[U]]=k[_[c]];e=e+o;_=d[e];n=_[O];a=l[_[c]];l[n+1]=a;l[n]=a[_[B]];e=e+o;_=d[e];l[_[U]]=k[_[w]];e=e+o;_=d[e];n=_[h];a=l[_[w]];l[n+1]=a;l[n]=a[_[B]];e=e+o;_=d[e];l[_[U]]=_[f];e=e+o;_=d[e];n=_[h]l[n]=l[n](M(l,n+o,_[x]))e=e+o;_=d[e];l[_[t]]=l[_[f]][_[B]];e=e+o;_=d[e];l[_[b]]=l[_[c]][_[P]];e=e+o;_=d[e];l[_[U]]=l[_[u]][_[j]];e=e+o;_=d[e];l[_[O]]=k[_[u]];e=e+o;_=d[e];l[_[t]]=_[x];e=e+o;_=d[e];l[_[i]]=_[f];e=e+o;_=d[e];l[_[t]]=_[c];e=e+o;_=d[e];n=_[O]l[n]=l[n](M(l,n+o,_[c]))break;end while 929==(n)/((0xb1c24/225))do n=(3375356)while(0xd23/59)<a do n-= n local n;l[_[i]]=k[_[w]];e=e+o;_=d[e];l[_[t]]=_[w];e=e+o;_=d[e];l[_[U]]=_[D];e=e+o;_=d[e];l[_[i]]=_[u];e=e+o;_=d[e];n=_[U]l[n]=l[n](M(l,n+o,_[f]))e=e+o;_=d[e];if(l[_[U]]~=l[_[j]])then e=e+r;else e=_[D];end;break end while(n)/((5801-0xb8b))==1186 do local a;local n;n=_[b];a=l[_[c]];l[n+1]=a;l[n]=a[_[S]];e=e+o;_=d[e];l[_[h]]=k[_[x]];e=e+o;_=d[e];l[_[O]]=l[_[w]][_[S]];e=e+o;_=d[e];l[_[U]]=l[_[w]][_[B]];e=e+o;_=d[e];n=_[O]l[n](M(l,n+r,_[u]))break end;break;end break;end break;end break;end break;end while 3342==(n)/((-0x38+2820))do n=(2181184)while(0x2c5c/167)>=a do n-= n n=(1538208)while(0x86+-71)>=a do n-= n n=(8808464)while a<=(2880/0x30)do n-= n n=(9161579)while(-0x6d+168)<a do n-= n local N;local a;local n;n=_[h];a=l[_[c]];l[n+1]=a;l[n]=a[_[s]];e=e+o;_=d[e];l[_[h]]=k[_[x]];e=e+o;_=d[e];l[_[i]]=_[w];e=e+o;_=d[e];l[_[h]]=_[c];e=e+o;_=d[e];l[_[i]]=_[f];e=e+o;_=d[e];n=_[h]l[n]=l[n](M(l,n+o,_[x]))e=e+o;_=d[e];l[_[O]]={};e=e+o;_=d[e];l[_[b]]=k[_[u]];e=e+o;_=d[e];l[_[h]]=_[u];e=e+o;_=d[e];l[_[U]]=_[u];e=e+o;_=d[e];l[_[b]]=_[f];e=e+o;_=d[e];n=_[O]l[n]=l[n](M(l,n+o,_[w]))e=e+o;_=d[e];l[_[O]][_[x]]=l[_[C]];e=e+o;_=d[e];l[_[b]]=v[_[u]];e=e+o;_=d[e];l[_[i]]=l[_[u]][_[P]];e=e+o;_=d[e];l[_[t]]=k[_[c]];e=e+o;_=d[e];l[_[b]]=_[u];e=e+o;_=d[e];l[_[h]]=_[x];e=e+o;_=d[e];l[_[h]]=_[x];e=e+o;_=d[e];n=_[h]l[n]=l[n](M(l,n+o,_[x]))e=e+o;_=d[e];a=_[x];N=l[a]for _=a+1,_[B]do N=N..l[_];end;l[_[b]]=N;e=e+o;_=d[e];l[_[i]][_[x]]=l[_[S]];e=e+o;_=d[e];l[_[O]]=k[_[u]];e=e+o;_=d[e];l[_[O]]=_[f];e=e+o;_=d[e];l[_[h]]=_[u];e=e+o;_=d[e];l[_[b]]=_[x];e=e+o;_=d[e];n=_[U]l[n]=l[n](M(l,n+o,_[x]))e=e+o;_=d[e];l[_[h]][_[f]]=l[_[C]];e=e+o;_=d[e];l[_[i]][_[f]]=_[B];e=e+o;_=d[e];n=_[O]l[n](M(l,n+r,_[w]))e=e+o;_=d[e];l[_[t]]=k[_[c]];e=e+o;_=d[e];l[_[O]]=_[D];e=e+o;_=d[e];n=_[h]l[n](l[n+r])e=e+o;_=d[e];l[_[b]]=v[_[D]];e=e+o;_=d[e];l[_[O]]=l[_[f]][_[B]];e=e+o;_=d[e];if l[_[b]]then e=e+o;else e=_[x];end;break end while 2891==(n)/((-108+(229390/0x46)))do local a;local n;l[_[t]]=k[_[x]];e=e+o;_=d[e];n=_[h];a=l[_[x]];l[n+1]=a;l[n]=a[_[P]];e=e+o;_=d[e];l[_[U]]=k[_[c]];e=e+o;_=d[e];n=_[U];a=l[_[c]];l[n+1]=a;l[n]=a[_[B]];e=e+o;_=d[e];l[_[i]]=_[w];e=e+o;_=d[e];n=_[O]l[n]=l[n](M(l,n+o,_[x]))e=e+o;_=d[e];l[_[U]]=l[_[u]][_[s]];e=e+o;_=d[e];l[_[t]]=l[_[x]][_[S]];e=e+o;_=d[e];l[_[b]]=l[_[D]][_[B]];e=e+o;_=d[e];l[_[b]]=l[_[c]][_[P]];e=e+o;_=d[e];l[_[b]]=k[_[w]];e=e+o;_=d[e];l[_[t]]=_[u];e=e+o;_=d[e];l[_[O]]=_[u];e=e+o;_=d[e];l[_[h]]=_[f];e=e+o;_=d[e];n=_[t]l[n]=l[n](M(l,n+o,_[w]))break end;break;end while(n)/((309256/0x74))==3304 do n=(10950575)while((-0x3c+-26)+0x93)>=a do n-= n local N;local a;local n;n=_[t];a=l[_[w]];l[n+1]=a;l[n]=a[_[B]];e=e+o;_=d[e];l[_[t]]=k[_[w]];e=e+o;_=d[e];l[_[O]]=_[x];e=e+o;_=d[e];l[_[O]]=_[w];e=e+o;_=d[e];l[_[i]]=_[c];e=e+o;_=d[e];n=_[O]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];l[_[t]]={};e=e+o;_=d[e];l[_[O]]=k[_[D]];e=e+o;_=d[e];l[_[b]]=_[c];e=e+o;_=d[e];l[_[t]]=_[x];e=e+o;_=d[e];l[_[U]]=_[D];e=e+o;_=d[e];n=_[t]l[n]=l[n](M(l,n+o,_[x]))e=e+o;_=d[e];l[_[O]][_[x]]=l[_[j]];e=e+o;_=d[e];l[_[h]]=v[_[u]];e=e+o;_=d[e];l[_[h]]=l[_[u]][_[s]];e=e+o;_=d[e];l[_[b]]=k[_[c]];e=e+o;_=d[e];l[_[O]]=_[w];e=e+o;_=d[e];l[_[i]]=_[f];e=e+o;_=d[e];l[_[i]]=_[f];e=e+o;_=d[e];n=_[O]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];a=_[D];N=l[a]for _=a+1,_[s]do N=N..l[_];end;l[_[h]]=N;e=e+o;_=d[e];l[_[h]][_[c]]=l[_[j]];e=e+o;_=d[e];l[_[O]]=k[_[c]];e=e+o;_=d[e];l[_[h]]=_[x];e=e+o;_=d[e];l[_[b]]=_[x];e=e+o;_=d[e];l[_[U]]=_[x];e=e+o;_=d[e];n=_[t]l[n]=l[n](M(l,n+o,_[w]))e=e+o;_=d[e];l[_[i]][_[w]]=l[_[j]];e=e+o;_=d[e];l[_[h]][_[x]]=_[C];e=e+o;_=d[e];n=_[t]l[n](M(l,n+r,_[w]))e=e+o;_=d[e];l[_[O]]=k[_[w]];e=e+o;_=d[e];l[_[t]]=_[w];e=e+o;_=d[e];n=_[i]l[n](l[n+r])e=e+o;_=d[e];l[_[t]]=v[_[x]];e=e+o;_=d[e];l[_[i]]=l[_[w]][_[B]];e=e+o;_=d[e];if l[_[i]]then e=e+o;else e=_[w];end;break;end while 3449==(n)/((34925/(149-0x8a)))do n=(3592050)while a>(140-0x4e)do n-= n local n;l[_[U]]=l[_[D]][_[S]];e=e+o;_=d[e];l[_[i]]=v[_[c]];e=e+o;_=d[e];l[_[U]]=l[_[x]][_[S]];e=e+o;_=d[e];l[_[i]]=k[_[w]];e=e+o;_=d[e];l[_[U]]=_[f];e=e+o;_=d[e];l[_[U]]=_[c];e=e+o;_=d[e];l[_[O]]=_[w];e=e+o;_=d[e];n=_[b]l[n]=l[n](M(l,n+o,_[x]))e=e+o;_=d[e];n=_[i]l[n]=l[n](M(l,n+o,_[f]))e=e+o;_=d[e];if l[_[i]]then e=e+o;else e=_[f];end;break end while(n)/((0x7af-1034))==3850 do local a;local n;l[_[i]]=k[_[f]];e=e+o;_=d[e];n=_[U];a=l[_[w]];l[n+1]=a;l[n]=a[_[S]];e=e+o;_=d[e];l[_[h]]=k[_[f]];e=e+o;_=d[e];n=_[h];a=l[_[u]];l[n+1]=a;l[n]=a[_[S]];e=e+o;_=d[e];l[_[O]]=_[D];e=e+o;_=d[e];n=_[U]l[n]=l[n](M(l,n+o,_[D]))e=e+o;_=d[e];l[_[U]]=l[_[f]][_[s]];e=e+o;_=d[e];l[_[i]]=l[_[w]][_[s]];e=e+o;_=d[e];l[_[i]]=l[_[x]][_[P]];e=e+o;_=d[e];l[_[O]]=k[_[x]];e=e+o;_=d[e];l[_[h]]=_[f];e=e+o;_=d[e];l[_[t]]=_[c];e=e+o;_=d[e];l[_[b]]=_[w];e=e+o;_=d[e];n=_[b]l[n]=l[n](M(l,n+o,_[w]))break end;break;end break;end break;end while(n)/((0x181e0/49))==763 do n=(8714240)while a<=((-0x78+352)-167)do n-= n n=(6253438)while(-122+0xba)<a do n-= n local t;local a;local O;local n;l[_[i]]=k[_[f]];e=e+o;_=d[e];l[_[b]]=l[_[w]][_[B]];e=e+o;_=d[e];n=_[b];O=l[_[D]];l[n+1]=O;l[n]=O[_[C]];e=e+o;_=d[e];l[_[U]]=l[_[u]];e=e+o;_=d[e];l[_[i]]=l[_[c]];e=e+o;_=d[e];n=_[h]l[n]=l[n](M(l,n+o,_[c]))e=e+o;_=d[e];n=_[h];O=l[_[x]];l[n+1]=O;l[n]=O[_[s]];e=e+o;_=d[e];n=_[U]l[n]=l[n](l[n+r])e=e+o;_=d[e];a={l,_};a[r][a[N][U]]=a[o][a[N][s]]+a[r][a[N][c]];e=e+o;_=d[e];l[_[i]]=l[_[f]]%_[s];e=e+o;_=d[e];n=_[b]l[n]=l[n](l[n+r])e=e+o;_=d[e];O=_[D];t=l[O]for _=O+1,_[j]do t=t..l[_];end;l[_[i]]=t;e=e+o;_=d[e];a={l,_};a[r][a[N][h]]=a[o][a[N][P]]+a[r][a[N][c]];e=e+o;_=d[e];l[_[i]]=l[_[c]]%_[C];break end while 3046==(n)/((4177-0x84c))do local a;local n;l[_[O]]=l[_[u]][_[P]];e=e+o;_=d[e];l[_[i]]=k[_[f]];e=e+o;_=d[e];l[_[b]]=_[u];e=e+o;_=d[e];l[_[i]]=_[c];e=e+o;_=d[e];l[_[O]]=_[f];e=e+o;_=d[e];n=_[h]l[n]=l[n](M(l,n+o,_[x]))e=e+o;_=d[e];l[_[i]]=l[_[x]][l[_[P]]];e=e+o;_=d[e];n=_[i];a=l[_[f]];l[n+1]=a;l[n]=a[_[S]];e=e+o;_=d[e];n=_[U]l[n](l[n+r])break end;break;end while(n)/((7464-(0xefd+-53)))==2368 do n=(2763864)while(233-0xa7)>=a do n-= n local r;local a;local n;l[_[h]]=_[x];e=e+o;_=d[e];l[_[U]]=_[u];e=e+o;_=d[e];l[_[h]]=#l[_[w]];e=e+o;_=d[e];l[_[h]]=_[c];e=e+o;_=d[e];n=_[i];a=l[n]r=l[n+2];if(r>0)then if(a>l[n+1])then e=_[D];else l[n+3]=a;end elseif(a<l[n+1])then e=_[u];else l[n+3]=a;end break;end while 1669==(n)/((0xd1b-(-0x44+1767)))do n=(2203328)while(-31+0x62)<a do n-= n local a;local n;n=_[h];a=l[_[u]];l[n+1]=a;l[n]=a[_[C]];e=e+o;_=d[e];n=_[b]l[n](l[n+r])e=e+o;_=d[e];l[_[b]]=k[_[f]];e=e+o;_=d[e];l[_[O]]=_[f];e=e+o;_=d[e];n=_[U]l[n](l[n+r])e=e+o;_=d[e];e=_[f];break end while 796==(n)/((5569-0xaf1))do local n;l[_[O]]=v[_[x]];e=e+o;_=d[e];l[_[h]]=k[_[w]];e=e+o;_=d[e];l[_[b]]=_[x];e=e+o;_=d[e];l[_[b]]=_[u];e=e+o;_=d[e];l[_[t]]=_[u];e=e+o;_=d[e];n=_[t]l[n]=l[n](M(l,n+o,_[f]))e=e+o;_=d[e];n=_[i]l[n](M(l,n+r,_[w]))e=e+o;_=d[e];e=_[u];break end;break;end break;end break;end break;end while 788==(n)/(((523262+-0x6e)/0xbd))do n=(5125890)while a<=(178-0x69)do n-= n n=(15639500)while a<=(131+-0x3d)do n-= n n=(9766532)while a>(249-0xb4)do n-= n local n;local a;l[_[U]]=k[_[D]];e=e+o;_=d[e];l[_[b]]=_[D];e=e+o;_=d[e];l[_[O]]=_[f];e=e+o;_=d[e];a=_[x];n=l[a]for _=a+1,_[C]do n=n..l[_];end;l[_[O]]=n;e=e+o;_=d[e];if not l[_[O]]then e=e+r;else e=_[x];end;break end while 2402==(n)/((983972/0xf2))do k[_[c]]=l[_[O]];e=e+o;_=d[e];l[_[t]]={};e=e+o;_=d[e];l[_[i]]={};e=e+o;_=d[e];k[_[w]]=l[_[O]];e=e+o;_=d[e];l[_[h]]=k[_[x]];e=e+o;_=d[e];if(l[_[b]]~=_[C])then e=e+r;else e=_[x];end;break end;break;end while 3875==(n)/((8149-(0x209a-4233)))do n=(2543372)while(162+-0x5b)>=a do n-= n local a;local n;l[_[h]]=k[_[c]];e=e+o;_=d[e];l[_[h]]=k[_[D]];e=e+o;_=d[e];l[_[U]]=_[u];e=e+o;_=d[e];l[_[b]]=_[u];e=e+o;_=d[e];l[_[U]]=_[u];e=e+o;_=d[e];n=_[b]l[n]=l[n](M(l,n+o,_[w]))e=e+o;_=d[e];l[_[b]]=l[_[c]][l[_[C]]];e=e+o;_=d[e];n=_[b]l[n]=l[n](l[n+r])e=e+o;_=d[e];a=l[_[s]];if not a then e=e+r;else l[_[O]]=a;e=_[D];end;break;end while(n)/((3130-0x63c))==1658 do n=(6686271)while(5544/0x4d)<a do n-= n local a;local n;n=_[b]l[n](M(l,n+r,_[w]))e=e+o;_=d[e];l[_[t]]=k[_[c]];e=e+o;_=d[e];n=_[h];a=l[_[c]];l[n+1]=a;l[n]=a[_[P]];e=e+o;_=d[e];l[_[i]]=k[_[c]];e=e+o;_=d[e];n=_[t];a=l[_[f]];l[n+1]=a;l[n]=a[_[C]];e=e+o;_=d[e];l[_[t]]=_[c];e=e+o;_=d[e];n=_[O]l[n]=l[n](M(l,n+o,_[x]))e=e+o;_=d[e];l[_[i]]=l[_[x]][_[P]];e=e+o;_=d[e];l[_[h]]=k[_[x]];e=e+o;_=d[e];l[_[O]]=_[x];break end while(n)/((3555+-0x4e))==1923 do local n;l[_[t]]=k[_[c]];e=e+o;_=d[e];l[_[i]]=k[_[c]];e=e+o;_=d[e];l[_[t]]=_[D];e=e+o;_=d[e];l[_[t]]=_[x];e=e+o;_=d[e];l[_[h]]=_[w];e=e+o;_=d[e];n=_[b]l[n]=l[n](M(l,n+o,_[x]))e=e+o;_=d[e];n=_[h]l[n](l[n+r])e=e+o;_=d[e];l[_[O]]=k[_[x]];e=e+o;_=d[e];l[_[t]]=_[f];e=e+o;_=d[e];n=_[b]l[n](l[n+r])break end;break;end break;end break;end while(n)/((-0x41+2284))==2310 do n=(2608081)while a<=(-0x73+190)do n-= n n=(169472)while a>(0xdb-145)do n-= n local a;local n;l[_[b]]=k[_[x]];e=e+o;_=d[e];l[_[U]]=k[_[u]];e=e+o;_=d[e];l[_[O]]=_[u];e=e+o;_=d[e];l[_[h]]=_[c];e=e+o;_=d[e];l[_[U]]=_[c];e=e+o;_=d[e];n=_[i]l[n]=l[n](M(l,n+o,_[f]))e=e+o;_=d[e];l[_[U]]=l[_[x]][l[_[P]]];e=e+o;_=d[e];n=_[O]l[n]=l[n](l[n+r])e=e+o;_=d[e];a=l[_[C]];if not a then e=e+r;else l[_[h]]=a;e=_[w];end;break end while(n)/((-19+0xa6b))==64 do local a;local n;l[_[i]]=k[_[D]];e=e+o;_=d[e];l[_[b]]=k[_[u]];e=e+o;_=d[e];l[_[U]]=_[D];e=e+o;_=d[e];l[_[t]]=_[w];e=e+o;_=d[e];l[_[O]]=_[x];e=e+o;_=d[e];n=_[i]l[n]=l[n](M(l,n+o,_[x]))e=e+o;_=d[e];l[_[i]]=l[_[f]][l[_[B]]];e=e+o;_=d[e];n=_[O]l[n]=l[n](l[n+r])e=e+o;_=d[e];a=l[_[j]];if not a then e=e+r;else l[_[t]]=a;e=_[f];end;break end;break;end while 1603==(n)/((0x6c2+-103))do n=(6995263)while(0xc5+-121)>=a do n-= n local a;local n;l[_[U]]=(_[c]~=0);e=e+o;_=d[e];l[_[b]]=l[_[w]];e=e+o;_=d[e];l[_[i]]=k[_[x]];e=e+o;_=d[e];n=_[U]l[n]=l[n](l[n+r])e=e+o;_=d[e];a=l[_[s]];if not a then e=e+r;else l[_[t]]=a;e=_[w];end;break;end while 2519==(n)/((533184/0xc0))do n=(59290)while a>(7238/0x5e)do n-= n local n;l[_[U]]=k[_[c]];e=e+o;_=d[e];l[_[U]]=k[_[x]];e=e+o;_=d[e];l[_[O]]=_[u];e=e+o;_=d[e];l[_[t]]=_[c];e=e+o;_=d[e];l[_[O]]=_[f];e=e+o;_=d[e];n=_[O]l[n]=l[n](M(l,n+o,_[D]))e=e+o;_=d[e];l[_[O]]=l[_[D]][l[_[s]]];e=e+o;_=d[e];n=_[U]l[n]=l[n](l[n+r])e=e+o;_=d[e];l[_[h]]=l[_[w]];e=e+o;_=d[e];e=_[D];break end while 1694==(n)/((-124+0x9f))do local a;local n;n=_[t];a=l[_[f]];l[n+1]=a;l[n]=a[_[B]];e=e+o;_=d[e];l[_[O]]=_[c];e=e+o;_=d[e];n=_[i]l[n]=l[n](M(l,n+o,_[D]))e=e+o;_=d[e];l[_[h]]=l[_[f]][_[j]];e=e+o;_=d[e];n=_[O];a=l[_[u]];l[n+1]=a;l[n]=a[_[C]];e=e+o;_=d[e];l[_[h]]=k[_[x]];e=e+o;_=d[e];l[_[O]]=_[D];e=e+o;_=d[e];l[_[b]]=_[u];e=e+o;_=d[e];l[_[t]]=_[w];e=e+o;_=d[e];n=_[h]l[n]=l[n](M(l,n+o,_[c]))break end;break;end break;end break;end break;end break;end break;end e+= r end;end);end;return m(L(),{},E())()end)_msec({[(0x4d00/128)]='\115\116'..(function(_)return(_ and'(0x578/14)')or'\114\105'or'\120\58'end)(((2175-0x44c)/215)==(0x4f-73))..'\110g',[(0x5ec-779)]='\108\100'..(function(_)return(_ and'(0x123-191)')or'\101\120'or'\119\111'end)((0x28-35)==(0x57-81))..'\112',[(0x164+-110)]=(function(_)return(_ and'(0x11c-(279+-0x5f))')and'\98\121'or'\100\120'end)((-0x65+106)==(-0x29+46))..'\116\101',[(0x9060/105)]='\99'..(function(_)return(_ and'(-96+0xc4)')and'\90\19\157'or'\104\97'end)(((-36+-0x38)+97)==(-80+0x53))..'\114',[((300384/0xfc)-0x281)]='\116\97'..(function(_)return(_ and'(150+-0x32)')and'\64\113'or'\98\108'end)((0x564/230)==(0x25-32))..'\101',[(1100-0x264)]=(function(_)return(_ and'(319-0xdb)')or'\115\117'or'\78\107'end)((0x72-111)==(87+-0x38))..'\98',[(1734-0x37a)]='\99\111'..(function(_)return(_ and'(0x5014/205)')and'\110\99'or'\110\105\103\97'end)((4867/0x9d)==((0x1b61e/18)/201))..'\97\116',[(0x1f059/197)]=(function(_,e)return(_ and'(-0x18+124)')and'\48\159\158\188\10'or'\109\97'end)((730/0x92)==(0x90/24))..'\116\104',[(89488/(0xb0-108))]=(function(e,_)return((-0x4d+82)==(-49+0x34)and'\48'..'\195'or e..((not'\20\95\69'and'\90'..'\180'or _)))or'\199\203\95'end),[(0x427+-117)]='\105\110'..(function(_,e)return(_ and'(0xed-137)')and'\90\115\138\115\15'or'\115\101'end)((0x15+-16)==((8107/0x79)+-0x24))..'\114\116',[(0x1052a/66)]='\117\110'..(function(_,e)return(_ and'(147+-0x2f)')or'\112\97'or'\20\38\154'end)(((9636/0x49)+-0x7f)==(128+-0x61))..'\99\107',[(-0x7c+1234)]='\115\101'..(function(_)return(_ and'(218-0x76)')and'\110\112\99\104'or'\108\101'end)((-0x22+39)==(1271/0x29))..'\99\116',[(0x528+(-1325/0x19))]='\116\111\110'..(function(_,e)return(_ and'(18200/0xb6)')and'\117\109\98'or'\100\97\120\122'end)((-0x52+87)==(124-0x77))..'\101\114'},{[(198-0x8b)]=((getfenv))},((getfenv))()) end)()




library:AddConnection(runService.RenderStepped, "24/7", function()
    if not library then library.connections["24/7"]:Disconnect() end
	local MX, MY = Mouse.X, Mouse.Y + 36
	if library.flags["Mouse Offset"] then
		MX = MX + library.flags["MXO Amount"]
		MY = MY + library.flags["MYO Amount"]
	end

	if Draw.Visible then
		Draw.Position = Vector2.new(MX, MY)
	end

	--if RadarWindow.Visible then
	--	RadarWindow.Position = Vector2.new(MX, MY)
	--end

	if CrosshairBottom.Visible then
		local Thickness = library.flags["Crosshair Thickness"] / 2
		local TX, TY = MX - Thickness, MY - Thickness
		CrosshairTop.Position = Vector2.new(TX, MY - library.flags["Crosshair Gap"])
		CrosshairLeft.Position = Vector2.new(MX - library.flags["Crosshair Gap"], TY)
		CrosshairRight.Position = Vector2.new(MX + library.flags["Crosshair Gap"], TY)
		CrosshairBottom.Position = Vector2.new(TX, MY + library.flags["Crosshair Gap"])
	end

    Camera = game:GetService("Workspace").CurrentCamera

    if library.flags["Clock Time Enabled"] then
	    Lighting.ClockTime = library.flags["Clock Time Enabled"] and library.flags["Clock Time Amount"] or LightingSpoof.ClockTime
    end
    
    if library.flags["Brightness Enabled"] then
	    Lighting.Brightness = library.flags["Brightness Enabled"] and library.flags["Brightness Amount"] or LightingSpoof.Brightness
    end

    if library.flags["Ambient Lighting"] then
	    Lighting.Ambient = library.flags["Ambient Lighting"] and library.flags["Indoor Ambient"] or LightingSpoof.Ambient
        Lighting.OutdoorAmbient = library.flags["Ambient Lighting"] and library.flags["Outdoor Ambient"] or LightingSpoof.OutdoorAmbient
    end

    if library.flags["Color Shift Enabled"] then
	    Lighting.ColorShift_Top = library.flags["Color Shift Enabled"] and library.flags["Color Shift Top"] or LightingSpoof.ColorShift_Top
    end

    -- if library.flags["FOV Changer Enabled"] then
	--     Camera.FieldOfView = (library.flags["FOV Changer Enabled"] and CameraSpoof.FieldOfView + library.flags["FOV Amount"]) or CameraSpoof.FieldOfView
    -- end
end)

-- [Init] --------------------------------------------------------------------------------------------------------------------------------------------------------------------
library:Init();
library:selectTab(library.tabs[1]);

end)

if not S then
	print(E)
    ErrorCapture(E)
end
